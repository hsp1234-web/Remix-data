{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000,"referenced_widgets":["2d841e24884e44329e2e6f6eaba2bbc6","97cbc6087cf340ce98fae5393ed9e517","8b9d50bafc21406bb7dde016f78c94fe","06155f555c04429b8bb14e2b8146f6aa","ed30d22d6262420abd354013a1b1247f","1a7be9ece1254ec99e1c7c024450d9bf","159dc8cd11b54ac3b29223e9e20cfdcb","511c346dbb04499b82dc293f7f68d8cb","9d141739e08d461790b959f8e2c4539c","c70d903cb4ff4bfab7c63faf5a7a376e","762f76e2506e4c4b89ca4f5b20aec64b","da5bc3fd882a480b95fa7e65d363e331","fc5ba508b8dd40bfb50eef64ea9844bd","6dafc7fb1daa43d2a5328f9e82484937","74b665976d914494945a7cc24113bae0"]},"executionInfo":{"elapsed":62493,"status":"ok","timestamp":1746593412288,"user":{"displayName":"SP H","userId":"01973558706658263211"},"user_tz":-480},"id":"9I9Xyq1TEw0T","outputId":"ecf18358-cac1-4e3e-f12c-8cb9417ef9ed","cellView":"form"},"outputs":[{"output_type":"stream","name":"stdout","text":["--- Cell 1: 開始檢查/安裝/導入函式庫 ---\n","偵測到 Colab 環境，執行套件安裝/更新 (使用 pip)...\n","Colab 套件安裝/更新完成。\n"]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:11,697 - root - INFO - Cell 1: 專案初始化與全局設定 - 日誌記錄器初始化完成。\n","2025-05-07 04:50:11,698 - root - INFO - Cell 1: 專案初始化與全局設定 - PROJECT_CONFIG 定義完成。\n","2025-05-07 04:50:11,700 - root - INFO - Cell 1: 專案初始化與全局設定 - EXECUTION_TRACKER 初始化完成。\n","2025-05-07 04:50:11,721 - root - INFO - Cell 1: 專案初始化與全局設定 - 時區設定完成: Asia/Taipei\n","2025-05-07 04:50:11,722 - root - INFO - Cell 1: 專案初始化與全局設定 - 初始執行日期設定為: 2018-01-01 到 2025-05-07 (來源: 回退預設 (2018 起))\n"]},{"output_type":"stream","name":"stdout","text":["核心函式庫導入成功。\n","--- Cell 1: 函式庫準備完成 ---\n","\n","--- Cell 1: 初始化日誌記錄器 ---\n","已清除舊的日誌 handlers。\n","日誌記錄器已初始化，級別: INFO。\n","\n","--- Cell 1: 定義全局配置 PROJECT_CONFIG ---\n","PROJECT_CONFIG 定義完成。\n","\n","--- Cell 1: 初始化全局執行追蹤器 EXECUTION_TRACKER ---\n","EXECUTION_TRACKER 初始化為空字典。\n","\n","--- Cell 1: 設定時區 ---\n","時區已設定為: Asia/Taipei\n","\n","--- Cell 1: 處理日期設定 ---\n","ℹ️ 未找到有效設定檔或設定無效。\n","   本次執行將自動使用回退日期範圍: 2018-01-01 到 2025-05-07\n","   (您可以透過下方介面修改並儲存供下次使用)\n","\n","--- 日期設定 (可修改並儲存) ---\n"]},{"output_type":"display_data","data":{"text/plain":["VBox(children=(HBox(children=(DatePicker(value=datetime.date(2018, 1, 1), description='開始日期:', step=1), DatePi…"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"2d841e24884e44329e2e6f6eaba2bbc6"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:11,747 - root - INFO - Cell 1: 專案初始化與全局設定 - 主要邏輯執行完畢，狀態: 成功 (使用回退日期)\n"]},{"output_type":"stream","name":"stdout","text":["\n","================================================================================\n","儲存格: Cell 1: 專案初始化與全局設定 (v1.9) **執行總結報告**\n","**狀態:** ✅ 成功 (使用回退日期)\n","**執行時間:** 0.06 秒\n","**完成時間:** 2025-05-07 12:50:11 CST+0800\n","\n","**⚙️ 關鍵配置摘要 (部分):**\n","  - Project Name: 一級交易商壓力分析 (模組化)\n","  - Log Level: INFO\n","  - Timezone: Asia/Taipei\n","  - FRED API Key: ****ecc9\n","\n","**📅 最終執行日期範圍:**\n","  - 開始日期: 2018-01-01\n","  - 結束日期: 2025-05-07\n","  - (來源: 回退預設 (2018 起))\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'config_file_path': 'date_config.json',\n","  'date_source': '回退預設 (2018 起)'}\n","\n","**📝 執行註記:**\n","- 已顯示日期選擇器和更新按鈕。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'initial_confirmed_start': '2018-01-01',\n","  'initial_confirmed_end': '2025-05-07'}\n","\n","**📄 相關檔案:**\n","- ./date_config.json\n","================================================================================\n","\n"]}],"source":["\n","# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.9 (Cell 1 - 修正 nonlocal/global 錯誤)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 1: 專案初始化與全局設定 (含互動式日期)\n","# --------------------------------------------------\n","# 功能: 初始化專案，定義全局配置字典 PROJECT_CONFIG (包含 API Key, 權重, URL,\n","#       參數等)，初始化全局追蹤器 EXECUTION_TRACKER，導入基礎庫，設定時區。\n","#       實現互動式日期選擇：嘗試載入已存設定，若無則使用回退日期 (2018-01-01起)\n","#       執行，並提供介面供使用者更新和儲存日期。\n","# 版本: 1.9 (修正 nonlocal/global 錯誤)\n","# 日期: 2025-05-03\n","# 依賴: None\n","# 輸入: (優先) 'date_config.json' 設定檔 /\n","#       (其次) 使用者透過 ipywidgets 輸入並點擊按鈕\n","# 輸出: ['global:PROJECT_CONFIG', 'global:EXECUTION_TRACKER',\n","#        'global:confirmed_start_date', 'global:confirmed_end_date',\n","#        'global:target_tz', 'global:libs_loaded']\n","#       'date_config.json' (檔案寫入)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **此儲存格專用於初始化，不包含任何核心分析邏輯。**\n","# * 檢查並嘗試安裝/導入專案所需的核心庫 (pandas, ipywidgets, pytz, requests,\n","#   openpyxl, yfinance, numpy, scipy, matplotlib, fredapi)。\n","# * 定義並初始化全局配置字典 `PROJECT_CONFIG`，整合所有參數。\n","# * 定義並初始化全局執行追蹤器字典 `EXECUTION_TRACKER` 為空字典。\n","# * 初始化 Python 的根日誌記錄器。\n","# * 設定並儲存目標時區 (`target_tz`)。\n","# * **實現互動式日期選擇邏輯：**\n","#   * 定義程式預設 (2017/Today) 和回退日期 (2018/Today)。\n","#   * 嘗試從 `date_config.json` 載入上次儲存的日期。\n","#   * **若載入成功:** 使用配置日期設定全局變數 `confirmed_start_date`,\n","#     `confirmed_end_date`，並預填介面。\n","#   * **若載入失敗:** **自動使用回退日期 (2018/Today) 設定全局變數**，\n","#     並用此日期預填介面，確保首次執行能繼續。\n","#   * 創建並顯示 `ipywidgets` 日期選擇器和確認按鈕。\n","#   * 按鈕點擊事件處理：驗證使用者輸入，更新全局變數，並儲存到\n","#     `date_config.json`。\n","# * 在 `finally` 區塊中打印標準化的執行報告並更新 `EXECUTION_TRACKER`。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將所有配置集中到 `PROJECT_CONFIG`，方便管理。\n","# * 使用 `try-except` 處理庫導入、檔案讀寫和日期轉換，增加穩健性。\n","# * **關鍵：** 確保 Cell 1 執行後，`confirmed_start_date` 和\n","#   `confirmed_end_date` 總是有值（來自設定檔或回退值），以便後續儲存格\n","#   可以直接使用。\n","# * 使用 `ipywidgets` 提供使用者友善的日期修改方式。\n","# * 強制性的 `finally` 報告確保無論成功或失敗，都有執行記錄。\n","#\n","# ## 重要假設：\n","# * 運行環境支援 `pip install` (用於 Colab) 或已手動安裝所需套件。\n","# * 基礎 Python 環境可用。\n","# * Colab/Jupyter 環境支援 `ipywidgets` 顯示。\n","#\n","# ## 主要輸出/狀態變更：\n","# * `global:PROJECT_CONFIG`: 包含專案配置的字典。\n","# * `global:EXECUTION_TRACKER`: 包含 Cell 1 執行記錄的字典。\n","# * `global:confirmed_start_date` (str): 最終確認使用的開始日期\n","#   (來自設定檔、回退值或使用者更新)。\n","# * `global:confirmed_end_date` (str): 最終確認使用的結束日期\n","#   (來自設定檔、回退值或使用者更新)。\n","# * `global:target_tz`: 設定的時區物件。\n","# * `global:libs_loaded` (dict): 記錄核心函式庫是否成功載入。\n","# * `global:logger`: 配置好的根日誌記錄器。\n","# * `File:date_config.json`: (若使用者點擊按鈕更新) 儲存使用者確認的日期。\n","#\n","# ## 注意事項/後續步驟：\n","# * **必須** 是筆記本中第一個執行的儲存格。\n","# * **禁止** 在此儲存格中添加數據處理、模型訓練等工作流程步驟。\n","# * **首次執行:** 會自動使用 2018-01-01 到今天的日期範圍。請檢查介面\n","#   顯示的日期，如果需要修改，請點擊按鈕更新。\n","# * **後續執行:** 會載入上次儲存的日期。如果日期正確，可直接執行後續儲存格。\n","# * **後續步驟:** 執行 **Cell 2: 核心函式定義**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","import os\n","import json\n","import sys\n","import subprocess\n","from datetime import datetime, date, timezone, timedelta\n","\n","# --- 嘗試安裝/導入第三方庫 ---\n","print(\"--- Cell 1: 開始檢查/安裝/導入函式庫 ---\")\n","libs_loaded = {\n","    'pandas': False, 'ipywidgets': False, 'pytz': False, 'requests': False,\n","    'openpyxl': False, 'yfinance': False, 'numpy': False, 'scipy': False,\n","    'matplotlib': False, 'fredapi': False\n","}\n","try:\n","    # 檢查是否在 Colab 環境\n","    IN_COLAB = 'google.colab' in sys.modules\n","    # 定義需要安裝的套件列表\n","    packages_to_install = [\n","        '--upgrade', 'fredapi', 'pandas', 'matplotlib', 'requests',\n","        'openpyxl', 'yfinance', 'numpy', 'scipy', 'ipywidgets', 'pytz'\n","    ]\n","\n","    if IN_COLAB:\n","        print(\"偵測到 Colab 環境，執行套件安裝/更新 (使用 pip)...\")\n","        process = subprocess.run(\n","            [sys.executable, '-m', 'pip', 'install', '--quiet'] + packages_to_install,\n","            check=True, capture_output=True, text=True\n","        )\n","        print(\"Colab 套件安裝/更新完成。\")\n","    else:\n","        print(\"非 Colab 環境，請確保以下套件已安裝:\")\n","        print(\", \".join(p for p in packages_to_install if not p.startswith('--')))\n","\n","    # 導入函式庫並更新狀態\n","    import pandas as pd; libs_loaded['pandas'] = True\n","    import ipywidgets as widgets; libs_loaded['ipywidgets'] = True\n","    from ipywidgets import HBox, VBox\n","    from IPython.display import display\n","    import pytz; libs_loaded['pytz'] = True\n","    import requests; libs_loaded['requests'] = True\n","    import openpyxl; libs_loaded['openpyxl'] = True\n","    import yfinance as yf; libs_loaded['yfinance'] = True\n","    import numpy as np; libs_loaded['numpy'] = True\n","    import scipy; libs_loaded['scipy'] = True\n","    import matplotlib; libs_loaded['matplotlib'] = True\n","    from fredapi import Fred; libs_loaded['fredapi'] = True\n","\n","    import warnings\n","    warnings.filterwarnings('ignore', category=UserWarning, module='openpyxl')\n","    warnings.filterwarnings(\"ignore\", category=FutureWarning, module=\"yfinance\")\n","\n","    print(\"核心函式庫導入成功。\")\n","\n","except ImportError as e:\n","    print(f\"錯誤：導入核心函式庫失敗: {e}。請檢查安裝。\")\n","    libs_loaded = {k: False for k in libs_loaded}\n","except subprocess.CalledProcessError as e:\n","    print(f\"錯誤：執行 pip install 指令時發生錯誤: {e}\")\n","    print(\"錯誤輸出:\\n\", e.stderr)\n","    libs_loaded = {k: False for k in libs_loaded}\n","except Exception as e:\n","    print(f\"錯誤：函式庫準備過程中發生未預期錯誤: {e}\")\n","    libs_loaded = {k: False for k in libs_loaded}\n","\n","print(\"--- Cell 1: 函式庫準備完成 ---\")\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 1: 專案初始化與全局設定\"\n","\n","# --- 狀態追蹤變數 (用於 finally) ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {}\n","_cell_generated_files = ['date_config.json']\n","\n","# --- 全局變數定義 ---\n","# 這些變數會在 Cell 1 的主範圍內定義，並在需要時被內部函式修改\n","PROJECT_CONFIG = {}\n","EXECUTION_TRACKER = {}\n","confirmed_start_date = None\n","confirmed_end_date = None\n","target_tz = None\n","\n","# --- 設定檔路徑 ---\n","CONFIG_FILE_PATH = 'date_config.json'\n","_cell_inputs['config_file_path'] = CONFIG_FILE_PATH\n","\n","# --- Widget 變數初始化 ---\n","start_date_picker = None\n","end_date_picker = None\n","confirm_button = None\n","output_area = None\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查基礎庫是否成功載入 ---\n","    if not libs_loaded['pandas'] or not libs_loaded['ipywidgets'] or not libs_loaded['pytz']:\n","        _cell_status = \"失敗\"\n","        _cell_error = \"初始化失敗：缺少 pandas, ipywidgets 或 pytz 函式庫。\"\n","        print(f\"CRITICAL ERROR: {_cell_error}\")\n","        raise ImportError(_cell_error)\n","\n","    # --- 1. 初始化日誌記錄器 ---\n","    print(\"\\n--- Cell 1: 初始化日誌記錄器 ---\")\n","    logger = logging.getLogger()\n","    default_log_level = logging.INFO\n","    logger.setLevel(default_log_level)\n","    if logger.hasHandlers():\n","        logger.handlers.clear()\n","        print(\"已清除舊的日誌 handlers。\")\n","    handler = logging.StreamHandler()\n","    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n","    handler.setFormatter(formatter)\n","    logger.addHandler(handler)\n","    print(f\"日誌記錄器已初始化，級別: {logging.getLevelName(logger.level)}。\")\n","    logger.info(f\"{_cell_identifier} - 日誌記錄器初始化完成。\")\n","\n","    # --- 2. 定義全局配置 PROJECT_CONFIG ---\n","    print(\"\\n--- Cell 1: 定義全局配置 PROJECT_CONFIG ---\")\n","    PROJECT_CONFIG = {\n","      # --- 基本設定 ---\n","      'project_name': '一級交易商壓力分析 (模組化)',\n","      'version': '1.9', # 更新版本號\n","      'fred_api_key': \"77b0a570c6a17007e4f5af229c2aecc9\",\n","      'timezone': 'Asia/Taipei',\n","      'log_level': default_log_level,\n","      # --- 日期相關 ---\n","      'default_start_date': \"2017-01-01\",\n","      'fallback_start_date': \"2018-01-01\",\n","      # --- 圖表設定 ---\n","      'trend_plot_days': 60,\n","      # --- 長天期公債 ETF 設定 ---\n","      'enable_lt_bond_etf_plot': True,\n","      'lt_bond_etf_ticker': \"TLT\",\n","      # --- NY Fed API URLs (分行顯示) ---\n","      'ny_fed_positions_urls': [\n","          \"https://markets.newyorkfed.org/api/pd/get/SBN2024/timeseries/\"\n","          \"PDPOSGSC-L2_PDPOSGSC-G2L3_PDPOSGSC-G3L6_PDPOSGSC-G6L7_\"\n","          \"PDPOSGSC-G7L11_PDPOSGSC-G11L21_PDPOSGSC-G21.xlsx\",\n","          \"https://markets.newyorkfed.org/api/pd/get/SBN2022/timeseries/\"\n","          \"PDPOSGSC-L2_PDPOSGSC-G2L3_PDPOSGSC-G3L6_PDPOSGSC-G6L7_\"\n","          \"PDPOSGSC-G7L11_PDPOSGSC-G11L21_PDPOSGSC-G21.xlsx\",\n","          \"https://markets.newyorkfed.org/api/pd/get/SBN2015/timeseries/\"\n","          \"PDPOSGSC-L2_PDPOSGSC-G2L3_PDPOSGSC-G3L6_PDPOSGSC-G6L7_\"\n","          \"PDPOSGSC-G7L11_PDPOSGSC-G11.xlsx\",\n","          \"https://markets.newyorkfed.org/api/pd/get/SBN2013/timeseries/\"\n","          \"PDPOSGSC-L2_PDPOSGSC-G2L3_PDPOSGSC-G3L6_PDPOSGSC-G6L7_\"\n","          \"PDPOSGSC-G7L11_PDPOSGSC-G11.xlsx\",\n","          \"https://markets.newyorkfed.org/api/pd/get/SBP2013/timeseries/\"\n","          \"PDPUSGCS3LNOP_PDPUSGCS36NOP_PDPUSGCS611NOP_PDPUSGCSM11NOP.xlsx\",\n","          \"https://markets.newyorkfed.org/api/pd/get/SBP2001/timeseries/\"\n","          \"PDPUSGCS5LNOP_PDPUSGCS5MNOP.xlsx\"\n","      ],\n","      # --- 舊版 SBP 加總邏輯 ---\n","      'sbp2013_cols_to_sum': [\n","          'PDPUSGCS3LNOP', 'PDPUSGCS36NOP', 'PDPUSGCS611NOP', 'PDPUSGCSM11NOP'\n","      ],\n","      'sbp2001_cols_to_sum': ['PDPUSGCS5LNOP', 'PDPUSGCS5MNOP'],\n","      # --- 壓力指數計算設定 ---\n","      'rolling_window_days': 252,\n","      'weights': {\n","          'sofr_dev': 0.35, 'spread_inv': 0.10, 'gross_pos': 0.05,\n","          'move': 0.25, 'vix': 0.15, 'pos_res_ratio': 0.10\n","      },\n","      # --- 指數平滑與著色 ---\n","      'smoothing_window_stress_index': 5,\n","      'threshold_high_stress_color': 55,\n","      # --- 持有/準備金 比率著色閾值 ---\n","      'threshold_ratio_color': 90,\n","      # --- MACD 設定 ---\n","      'enable_macd_momentum_plot': True,\n","      'macd_params': {'fast': 12, 'slow': 26, 'signal': 9},\n","      'macd_colors': {'blue': \"#6495ED\", 'green': \"#3CB371\", 'red': \"#B22222\"}\n","    }\n","    print(\"PROJECT_CONFIG 定義完成。\")\n","    logger.info(f\"{_cell_identifier} - PROJECT_CONFIG 定義完成。\")\n","\n","    # --- 3. 初始化全局執行追蹤器 ---\n","    print(\"\\n--- Cell 1: 初始化全局執行追蹤器 EXECUTION_TRACKER ---\")\n","    EXECUTION_TRACKER = {}\n","    print(\"EXECUTION_TRACKER 初始化為空字典。\")\n","    logger.info(f\"{_cell_identifier} - EXECUTION_TRACKER 初始化完成。\")\n","\n","    # --- 4. 設定時區 ---\n","    print(\"\\n--- Cell 1: 設定時區 ---\")\n","    tz_name = PROJECT_CONFIG.get('timezone', 'Asia/Taipei')\n","    try:\n","        target_tz = pytz.timezone(tz_name)\n","        print(f\"時區已設定為: {tz_name}\")\n","    except Exception as tz_ex:\n","        _cell_warnings.append(f\"載入時區 '{tz_name}' 失敗 ({tz_ex})。將使用 UTC+8。\")\n","        target_tz = timezone(timedelta(hours=8), name='UTC+8')\n","        print(f\"警告：載入時區 '{tz_name}' 失敗，已回退至 UTC+8。\")\n","    PROJECT_CONFIG['_tz_info'] = target_tz\n","    PROJECT_CONFIG['_tz_name'] = str(target_tz)\n","    logger.info(f\"{_cell_identifier} - 時區設定完成: {str(target_tz)}\")\n","\n","    # --- 5. 互動式日期設定 ---\n","    print(\"\\n--- Cell 1: 處理日期設定 ---\")\n","    today_date_obj = datetime.now(target_tz).date()\n","    today_date_str = today_date_obj.strftime('%Y-%m-%d')\n","\n","    fallback_start_str = PROJECT_CONFIG.get('fallback_start_date', \"2018-01-01\")\n","    default_end_str = today_date_str\n","\n","    display_start_obj = None\n","    display_end_obj = None\n","    exec_start_str = None\n","    exec_end_str = None\n","    date_source = \"未知\"\n","    config_loaded_successfully = False\n","\n","    if os.path.exists(CONFIG_FILE_PATH):\n","        _cell_notes.append(f\"找到設定檔: {CONFIG_FILE_PATH}\")\n","        try:\n","            with open(CONFIG_FILE_PATH, 'r', encoding='utf-8') as f:\n","                config_data = json.load(f)\n","            saved_start_str = config_data.get('confirmed_start_date')\n","            saved_end_str = config_data.get('confirmed_end_date')\n","            last_updated = config_data.get('last_updated', '未知')\n","\n","            if saved_start_str and saved_end_str:\n","                 temp_s_date_obj = datetime.strptime(saved_start_str, '%Y-%m-%d').date()\n","                 temp_e_date_obj = datetime.strptime(saved_end_str, '%Y-%m-%d').date()\n","\n","                 if temp_s_date_obj < temp_e_date_obj:\n","                     exec_start_str = saved_start_str\n","                     exec_end_str = saved_end_str\n","                     display_start_obj = temp_s_date_obj\n","                     display_end_obj = temp_e_date_obj\n","                     date_source = f\"設定檔 (上次更新: {last_updated})\"\n","                     print(f\"💾 已從設定檔載入日期: {exec_start_str} 到 {exec_end_str}\")\n","                     config_loaded_successfully = True\n","                 else:\n","                     _cell_warnings.append(f\"設定檔日期邏輯錯誤 ({saved_start_str} >= {saved_end_str})。\")\n","            else:\n","                 _cell_warnings.append(\"設定檔缺少日期鍵。\")\n","        except Exception as config_err:\n","             _cell_warnings.append(f\"讀取/解析設定檔 '{CONFIG_FILE_PATH}' 錯誤: {config_err}。\")\n","\n","    if not config_loaded_successfully:\n","        exec_start_str = fallback_start_str\n","        exec_end_str = default_end_str\n","        date_source = \"回退預設 (2018 起)\"\n","        print(f\"ℹ️ 未找到有效設定檔或設定無效。\")\n","        print(f\"   本次執行將自動使用回退日期範圍: {exec_start_str} 到 {exec_end_str}\")\n","        print(f\"   (您可以透過下方介面修改並儲存供下次使用)\")\n","        try:\n","            display_start_obj = datetime.strptime(exec_start_str, '%Y-%m-%d').date()\n","            display_end_obj = datetime.strptime(exec_end_str, '%Y-%m-%d').date()\n","        except ValueError as e_parse_fallback:\n","             _cell_error = (f\"內部錯誤：無法解析回退日期字串 \"\n","                            f\"'{exec_start_str}' 或 '{exec_end_str}': {e_parse_fallback}\")\n","             logger.error(_cell_error)\n","             raise ValueError(_cell_error) from e_parse_fallback\n","\n","    # --- 設定全局日期變數 ---\n","    confirmed_start_date = exec_start_str\n","    confirmed_end_date = exec_end_str\n","    _cell_inputs['date_source'] = date_source\n","    _cell_outputs['initial_confirmed_start'] = confirmed_start_date\n","    _cell_outputs['initial_confirmed_end'] = confirmed_end_date\n","    logger.info(f\"{_cell_identifier} - 初始執行日期設定為: \"\n","                f\"{confirmed_start_date} 到 {confirmed_end_date} (來源: {date_source})\")\n","\n","    # --- 創建並顯示 Widgets ---\n","    if display_start_obj and display_end_obj:\n","        start_date_picker = widgets.DatePicker(\n","            description='開始日期:', value=display_start_obj, disabled=False\n","        )\n","        end_date_picker = widgets.DatePicker(\n","            description='結束日期:', value=display_end_obj, disabled=False\n","        )\n","        confirm_button = widgets.Button(\n","            description=\"🔄 更新並儲存日期設定\", button_style='info',\n","            icon='save', tooltip='點擊此按鈕以使用上方選擇的日期，並儲存供下次使用'\n","        )\n","        output_area = widgets.Output()\n","\n","        # 按鈕點擊處理函數\n","        def on_confirm_button_clicked(b):\n","            # 聲明要修改的全局變數\n","            global confirmed_start_date, confirmed_end_date\n","            # 聲明要修改的 Cell 級別變數 (即使在外層定義，嵌套函數修改也需聲明)\n","            # 注意：_cell_outputs, _cell_status, _cell_warnings 是在外層 try 塊之前定義的\n","            # 為了避免 nonlocal 綁定問題，這裡也將它們聲明為 global\n","            global _cell_outputs, _cell_status, _cell_warnings\n","\n","            with output_area:\n","                output_area.clear_output()\n","                s_date_obj = start_date_picker.value\n","                e_date_obj = end_date_picker.value\n","                s_date_str = s_date_obj.strftime('%Y-%m-%d') if s_date_obj else None\n","                e_date_str = e_date_obj.strftime('%Y-%m-%d') if e_date_obj else None\n","\n","                validation_passed = True\n","                if not s_date_str or not e_date_str:\n","                    print(\"❌ 錯誤：請確保已選擇有效的開始和結束日期。\")\n","                    logger.warning(\"按鈕點擊：日期未選擇。\")\n","                    validation_passed = False\n","\n","                if validation_passed and s_date_obj >= e_date_obj:\n","                    print(f\"❌ 錯誤：開始日期 ({s_date_str}) 必須早於 \"\n","                          f\"結束日期 ({e_date_str})。\")\n","                    logger.warning(f\"按鈕點擊：日期驗證失敗 ({s_date_str} >= {e_date_str})。\")\n","                    validation_passed = False\n","\n","                if validation_passed:\n","                    confirmed_start_date = s_date_str # 修改全局變數\n","                    confirmed_end_date = e_date_str   # 修改全局變數\n","                    update_time_str = datetime.now(target_tz).isoformat()\n","\n","                    try:\n","                        config_to_save = {\n","                            'confirmed_start_date': confirmed_start_date,\n","                            'confirmed_end_date': confirmed_end_date,\n","                            'last_updated': update_time_str\n","                        }\n","                        with open(CONFIG_FILE_PATH, 'w', encoding='utf-8') as f:\n","                            json.dump(config_to_save, f, indent=2, ensure_ascii=False)\n","\n","                        save_msg = (f\"✅ 日期已更新為 {confirmed_start_date} 到 \"\n","                                    f\"{confirmed_end_date}，並已儲存至 '{CONFIG_FILE_PATH}'。\")\n","                        print(save_msg)\n","                        print(\"   現在可以執行後續儲存格。\")\n","                        logger.info(f\"按鈕點擊：日期已更新並儲存設定檔: \"\n","                                    f\"{confirmed_start_date} to {confirmed_end_date}\")\n","                        _cell_outputs['last_action'] = 'Updated and Saved'\n","                        _cell_outputs['confirmed_start_date'] = confirmed_start_date\n","                        _cell_outputs['confirmed_end_date'] = confirmed_end_date\n","                    except Exception as save_err:\n","                        err_msg = (f\"❌ 錯誤：日期已更新但儲存設定檔 \"\n","                                   f\"'{CONFIG_FILE_PATH}' 失敗: {save_err}\")\n","                        print(err_msg)\n","                        logger.error(f\"按鈕點擊：儲存設定檔失敗: {save_err}\")\n","                        _cell_outputs['last_action'] = 'Updated (Save Failed)'\n","                        _cell_outputs['confirmed_start_date'] = confirmed_start_date\n","                        _cell_outputs['confirmed_end_date'] = confirmed_end_date\n","                        _cell_warnings.append(f\"儲存日期設定檔失敗: {save_err}\")\n","                        if _cell_status.startswith(\"成功\"): _cell_status = \"成功 (有警告)\"\n","\n","        confirm_button.on_click(on_confirm_button_clicked)\n","\n","        print(\"\\n--- 日期設定 (可修改並儲存) ---\")\n","        date_pickers_box = HBox([start_date_picker, end_date_picker])\n","        display(VBox([date_pickers_box, confirm_button, output_area]))\n","        _cell_notes.append(\"已顯示日期選擇器和更新按鈕。\")\n","    else:\n","        _cell_error = \"內部錯誤：無法創建日期選擇器介面。\"\n","        logger.error(_cell_error)\n","        raise RuntimeError(_cell_error)\n","\n","    # --- 標記 Cell 1 執行狀態 ---\n","    if _cell_status == \"處理中\":\n","        if config_loaded_successfully:\n","            _cell_status = \"成功 (已從設定檔載入)\"\n","        else:\n","            _cell_status = \"成功 (使用回退日期)\"\n","    if _cell_warnings and _cell_status.startswith(\"成功\"):\n","        _cell_status += \" (有警告)\"\n","\n","    logger.info(f\"{_cell_identifier} - 主要邏輯執行完畢，狀態: {_cell_status}\")\n","\n","# --- 異常處理 ---\n","except (ImportError, ValueError, RuntimeError) as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"\n","        _cell_error = f\"初始化過程中發生嚴重錯誤: {e}\"\n","        if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","        try: logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","        except: print(f\"CRITICAL ERROR during Cell 1 init: {_cell_error}\\n{_cell_traceback}\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"\n","        _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        try: logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","        except: print(f\"CRITICAL ERROR during Cell 1 init: {_cell_error}\\n{_cell_traceback}\")\n","    elif not _cell_traceback:\n","         _cell_traceback = traceback.format_exc()\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功 (已從設定檔載入)\": _final_status_icon = \"💾\"\n","    elif _cell_status == \"成功 (使用回退日期)\": _final_status_icon = \"✅\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"👍\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz:\n","            _report_tz_info = target_tz\n","        else:\n","            _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","            if _cell_status != \"失敗\": _cell_warnings.append(\"報告時區回退至 UTC+8。\")\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try:\n","            _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local:\n","             _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","             if _cell_status != \"失敗\":\n","                 _cell_warnings.append(f\"報告時間獲取錯誤: {time_err_local}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\":\n","             _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.9) **執行總結報告**\") # 更新版本號\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    print(\"\\n**⚙️ 關鍵配置摘要 (部分):**\")\n","    try:\n","        print(f\"  - Project Name: {PROJECT_CONFIG.get('project_name', 'N/A')}\")\n","        print(f\"  - Log Level: {logging.getLevelName(PROJECT_CONFIG.get('log_level', 'N/A'))}\")\n","        print(f\"  - Timezone: {PROJECT_CONFIG.get('_tz_name', 'N/A')}\")\n","        api_key_display = ('****' + PROJECT_CONFIG['fred_api_key'][-4:]\n","                           if PROJECT_CONFIG.get('fred_api_key') else '未設定')\n","        print(f\"  - FRED API Key: {api_key_display}\")\n","    except Exception as config_print_err:\n","        print(f\"  - (打印配置時出錯: {config_print_err})\")\n","    print(\"\\n**📅 最終執行日期範圍:**\")\n","    if confirmed_start_date and confirmed_end_date:\n","         print(f\"  - 開始日期: {confirmed_start_date}\")\n","         print(f\"  - 結束日期: {confirmed_end_date}\")\n","         print(f\"  - (來源: {_cell_inputs.get('date_source', '未知')})\")\n","    else:\n","         print(\"  - (日期未成功設定)\")\n","    if _cell_inputs:\n","        print(\"\\n**⚙️ 輸入參數詳情:**\")\n","        pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes:\n","        print(\"\\n**📝 執行註記:**\")\n","        [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'):\n","        print(\"\\n**⚠️ 警告訊息:**\")\n","        [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'):\n","        print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        # 使用 <pre> 標籤以便在某些環境中更好地顯示格式\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    pprint.pprint(_tracking_record.get('outputs', {}), indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'):\n","        print(\"\\n**📄 相關檔案:**\")\n","        [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del IN_COLAB, packages_to_install, process, default_log_level, handler, formatter\n","    except NameError: pass\n","    try: del tz_name, today_date_obj, today_date_str, fallback_start_str, default_end_str\n","    except NameError: pass\n","    try: del config_loaded_successfully, config_data, saved_start_str, saved_end_str\n","    except NameError: pass\n","    try: del last_updated, temp_s_date_obj, temp_e_date_obj, date_source\n","    except NameError: pass\n","    try: del display_start_obj, display_end_obj, api_key_display\n","    except NameError: pass\n","    # 全局變數和 Widgets 保留\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 1: 專案初始化與全局設定 (含互動式日期)\n","# 功能: 初始化專案，定義全局配置字典 PROJECT_CONFIG，初始化全局追蹤器 EXECUTION_TRACKER，\n","#       導入基礎庫，設定時區。實現互動式日期選擇與儲存。\n","# 版本: 1.9 (修正 nonlocal/global 錯誤)\n","# 日期: 2025-05-03\n","# 依賴: None\n","# 輸入: (優先) 'date_config.json' / (其次) 使用者互動\n","# 輸出: ['global:PROJECT_CONFIG', 'global:EXECUTION_TRACKER',\n","#        'global:confirmed_start_date', 'global:confirmed_end_date',\n","#        'global:target_tz', 'global:libs_loaded']\n","#       'date_config.json' (檔案寫入)\n","# =================================================="]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":181,"status":"ok","timestamp":1746593412471,"user":{"displayName":"SP H","userId":"01973558706658263211"},"user_tz":-480},"id":"Fu7KbVkZG9_l","outputId":"8aaf84a9-0bbb-4703-c5f7-cf4a3b505d5b"},"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:11,829 - __main__ - INFO - Cell 2: 核心函式定義 - 函式定義完成。\n"]},{"output_type":"stream","name":"stdout","text":["繪圖所需函式庫 (pandas, numpy, matplotlib) 看似可用。\n","  - 函式 'plot_results' (支援多種輸出) 定義完成。\n","  - 函式 'plot_gemini_gauge_mpl' (支援多種輸出) 定義完成。\n","  - 函式 'plot_trend_colored' (支援多種輸出) 定義完成。\n","\n","================================================================================\n","儲存格: Cell 2: 核心函式定義 (v1.9) **執行總結報告**\n","**狀態:** ✅ 成功\n","**執行時間:** 0.01 秒\n","**完成時間:** 2025-05-07 12:50:11 CST+0800\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'defined_functions': [ 'plot_results',\n","                         'plot_gemini_gauge_mpl',\n","                         'plot_trend_colored']}\n","================================================================================\n","\n"]}],"source":["# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 2.0 (Cell 2 - 支援多種輸出格式)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 2: 核心函式定義 (支援多種輸出)\n","# --------------------------------------------------\n","# 功能: 定義專案所需的核心繪圖函式，使其支援直接顯示、儲存為檔案、\n","#       或回傳 Base64 編碼以嵌入 HTML。包含時間序列圖 (5x2 佈局)、\n","#       壓力儀表板和趨勢圖。\n","# 版本: 2.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1'] (隱式依賴基礎庫)\n","# 輸入: None (定義函式)\n","# 輸出: (定義 plot_results, plot_gemini_gauge_mpl, plot_trend_colored 函式)\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **定義繪圖函式**:\n","#   * `plot_results`: 繪製包含多個子圖的時間序列圖表 (5x2 網格佈局)。\n","#   * `plot_gemini_gauge_mpl`: 繪製半圓形的壓力儀表板。\n","#   * `plot_trend_colored`: 繪製帶有顏色編碼的壓力指數趨勢圖。\n","# * **支援多種輸出**:\n","#   * 為所有繪圖函式增加 `output_format` ('show', 'save', 'base64') 和\n","#     `save_path` (用於 'save' 模式) 參數。\n","#   * 'show' (預設): 直接顯示圖表。\n","#   * 'save': 將圖表儲存為圖片檔案。\n","#   * 'base64': 回傳 Base64 編碼字串，用於嵌入 HTML。\n","# * **導入必要函式庫**: 導入 `io` 和 `base64` 以支援記憶體操作和編碼。\n","# * **遵循準則**: 包含標準的儲存格結構，包括詳細註解、`finally` 報告區塊\n","#   和頁尾註解。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將繪圖邏輯封裝在獨立、可重複使用的函式中。\n","# * `output_format` 參數提供了極大的靈活性，允許不同的儲存格根據需要\n","#   以不同方式使用這些繪圖函式。\n","# * 在 'save' 和 'base64' 模式下使用 `plt.close(fig)` 來管理記憶體並避免\n","#   意外的圖表顯示。\n","# * 保持函式內部標籤和註解主要為英文，以符合原始腳本和通用性，但外部\n","#   註解和報告使用中文。\n","#\n","# ## 重要假設：\n","# * Cell 1 已成功執行，並導入了必要的基礎函式庫 (pandas, numpy, matplotlib)。\n","# * `io` 和 `base64` 模組可用。\n","#\n","# ## 主要輸出/狀態變更：\n","# * 在 Python 環境中定義了更新後的繪圖函式 `plot_results`,\n","#   `plot_gemini_gauge_mpl`, `plot_trend_colored`。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 2) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 此儲存格僅定義函式，執行後不會直接產生視覺輸出。\n","# * 後續的 Cell 9, 10 (直接顯示) 和 Cell 13 (產生 HTML 報告) 將會調用\n","#   這裡定義的函式，並傳遞相應的 `output_format` 參數。\n","# * **後續步驟:** 執行 **Cell 3: 日期處理與 API 驗證**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime, timezone, timedelta\n","import io       # 用於記憶體操作\n","import base64   # 用於 Base64 編碼\n","\n","# --- 第三方庫導入 (繪圖相關) ---\n","try:\n","    import pandas as pd\n","    import numpy as np\n","    import matplotlib.pyplot as plt\n","    import matplotlib.dates as mdates\n","    import matplotlib.patches as mpatches\n","    print(\"繪圖所需函式庫 (pandas, numpy, matplotlib) 看似可用。\")\n","except ImportError as e:\n","    print(f\"警告：導入繪圖所需函式庫失敗({e})。後續繪圖可能失敗。\")\n","    pd = None; np = None; plt = None; mdates = None; mpatches = None\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 2: 核心函式定義\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {'defined_functions': []}\n","_cell_generated_files = [] # 'save' 模式下可能會產生文件\n","\n","# --- 主要執行邏輯：定義函式 ---\n","try:\n","    # --- 0. 檢查繪圖庫是否載入 ---\n","    if not pd or not np or not plt or not mdates or not mpatches:\n","        _cell_status = \"失敗\"; _cell_error = \"初始化失敗：缺少繪圖所需的核心函式庫。\"; raise ImportError(_cell_error)\n","\n","    # --- 1. 定義 plot_results 函式 (支援多種輸出格式) ---\n","    def plot_results(final_df, plots_to_draw_flags, vol_index_fetched_name, vol_data_source,\n","                     smoothing_window_stress_index, threshold_high_stress_color, start_dt, end_dt,\n","                     reserves_plot_ok, ratio_plot_ok, threshold_ratio_color,\n","                     enable_macd_momentum_plot, macd_fast_period, macd_slow_period,\n","                     macd_signal_period, macd_color_blue, macd_color_green, macd_color_red,\n","                     lt_bond_etf_plot_ok, lt_bond_etf_ticker_used,\n","                     output_format='show', save_path=None):\n","        \"\"\"\n","        產生基於最終數據的時間序列圖表集合 (5x2 網格佈局)。\n","        支援直接顯示、儲存為檔案或回傳 Base64 編碼。\n","\n","        Args:\n","            final_df (pd.DataFrame): 包含所有計算指標的最終 DataFrame。\n","            plots_to_draw_flags (dict): 標示哪些基礎指標圖需要繪製的字典。\n","            vol_index_fetched_name (str): 抓取到的波動率指數名稱。\n","            vol_data_source (str): 波動率數據來源說明。\n","            smoothing_window_stress_index (int): 壓力指數平滑窗口。\n","            threshold_high_stress_color (float): 壓力指數圖表中標示\"升高\"狀態的閾值。\n","            start_dt (datetime): 圖表繪製的開始日期。\n","            end_dt (datetime): 圖表繪製的結束日期。\n","            reserves_plot_ok (bool): 是否繪製準備金圖表。\n","            ratio_plot_ok (bool): 是否繪製持有/準備金比率圖表。\n","            threshold_ratio_color (float): 持有/準備金比率圖表的顏色閾值。\n","            enable_macd_momentum_plot (bool): 是否啟用 MACD 動能圖。\n","            macd_fast_period (int): MACD 快線週期。\n","            macd_slow_period (int): MACD 慢線週期。\n","            macd_signal_period (int): MACD 信號線週期。\n","            macd_color_blue (str): MACD 上升正值顏色。\n","            macd_color_green (str): MACD 上升負值顏色。\n","            macd_color_red (str): MACD 下降顏色。\n","            lt_bond_etf_plot_ok (bool): 是否繪製長債 ETF 圖表。\n","            lt_bond_etf_ticker_used (str): 使用的長債 ETF Ticker。\n","            output_format (str): 輸出格式。'show' (預設), 'save', 'base64'。\n","            save_path (str, optional): 若 output_format='save'，指定儲存路徑。\n","        Returns:\n","            str or None: 如果 output_format='base64'，回傳 Base64 字串；否則 None。\n","        \"\"\"\n","        func_name = 'plot_results' # 用於日誌記錄\n","        print(f\"\\n--- [{func_name}] 正在生成時間序列圖 (5x2 佈局, 輸出: {output_format}) ---\")\n","        fig = None # 初始化 fig\n","        base64_string = None\n","\n","        # --- 設定圖表風格 ---\n","        try:\n","            plt.style.use('seaborn-v0_8-whitegrid')\n","            plt.rcParams['axes.facecolor'] = '#f0f0f0'; plt.rcParams['figure.facecolor'] = '#f0f0f0'\n","            plt.rcParams['grid.color'] = '#cccccc'; plt.rcParams['grid.linestyle'] = '--'; plt.rcParams['grid.alpha'] = 0.6\n","            plt.rcParams['axes.edgecolor'] = '#333333'; plt.rcParams['axes.labelcolor'] = '#333333'\n","            plt.rcParams['xtick.color'] = '#333333'; plt.rcParams['ytick.color'] = '#333333'\n","            plt.rcParams['text.color'] = '#333333'; plt.rcParams['axes.titlecolor'] = '#333333'\n","            plt.rcParams['legend.facecolor'] = 'white'; plt.rcParams['legend.edgecolor'] = 'grey'\n","            try:\n","                plt.rcParams['font.sans-serif'] = ['Noto Sans CJK TC', 'Microsoft JhengHei', 'Arial Unicode MS', 'DejaVu Sans', 'sans-serif']\n","                plt.rcParams['axes.unicode_minus'] = False\n","            except Exception as e_font: print(f\"  [{func_name}] 警告：設定字體時出錯: {e_font}\")\n","        except Exception as e_style: print(f\"  [{func_name}] 警告：設定風格時出錯: {e_style}\")\n","\n","        # --- 創建 5x2 子圖網格 ---\n","        nrows, ncols = 5, 2\n","        fig, axes = plt.subplots(nrows, ncols, figsize=(14, 4 * nrows), sharex=True)\n","\n","        # --- 檢查數據可用性 ---\n","        sofr_ok = plots_to_draw_flags.get('SOFR', False) and 'SOFR' in final_df and final_df['SOFR'].notna().any()\n","        spread_ok = plots_to_draw_flags.get('Spread', False) and 'Spread_10Y2Y' in final_df and final_df['Spread_10Y2Y'].notna().any()\n","        move_ok = plots_to_draw_flags.get('Volatility', False) and 'Volatility_Index' in final_df and final_df['Volatility_Index'].notna().any()\n","        vix_ok = plots_to_draw_flags.get('VIX', False) and 'VIX' in final_df and final_df['VIX'].notna().any()\n","        pos_ok = plots_to_draw_flags.get('GrossPos', False) and 'Total_Gross_Positions_Millions' in final_df and final_df['Total_Gross_Positions_Millions'].notna().any()\n","        stress_ok = plots_to_draw_flags.get('StressIndex', False) and 'Dealer_Stress_Index' in final_df and final_df['Dealer_Stress_Index'].notna().any()\n","        macd_ok = enable_macd_momentum_plot and 'Stress_Index_MACD_Hist' in final_df and final_df['Stress_Index_MACD_Hist'].notna().any()\n","        etf_col_name = f'ETF_{lt_bond_etf_ticker_used}_Price' if lt_bond_etf_ticker_used else None\n","        etf_ok = lt_bond_etf_plot_ok and etf_col_name and etf_col_name in final_df and final_df[etf_col_name].notna().any()\n","\n","        # --- 繪製各個子圖 ---\n","        axes_map = {\n","            (0, 0): ('SOFR', sofr_ok), (0, 1): ('Spread', spread_ok),\n","            (1, 0): ('MOVE', move_ok), (1, 1): ('VIX', vix_ok),\n","            (2, 0): ('Dealer Pos', pos_ok), (2, 1): ('Reserves', reserves_plot_ok),\n","            (3, 0): ('Stress Index', stress_ok), (3, 1): ('Ratio', ratio_plot_ok),\n","            (4, 0): ('MACD', macd_ok), (4, 1): ('ETF', etf_ok) # 使用實際檢查後的 etf_ok\n","        }\n","        last_visible_row = -1\n","        plot_count = 0\n","\n","        for row in range(nrows):\n","            row_has_visible = False\n","            for col in range(ncols):\n","                ax = axes[row, col]\n","                plot_name, is_ok = axes_map.get((row, col), (None, False))\n","\n","                if not is_ok:\n","                    ax.set_visible(False); continue\n","\n","                plot_count += 1\n","                row_has_visible = True; last_visible_row = row\n","\n","                try: # 包裹單個子圖的繪製，防止一個錯誤影響其他\n","                    if plot_name == 'SOFR':\n","                        ax.plot(final_df.index, final_df['SOFR'], label='SOFR (%)', color='purple', linewidth=1.5)\n","                        if 'SOFR_MA60' in final_df and final_df['SOFR_MA60'].notna().any():\n","                            ax.plot(final_df.index, final_df['SOFR_MA60'], label='SOFR 60D MA (%)', color='lightblue', linestyle='--', linewidth=1.0)\n","                        ax.set_ylabel(\"Rate (%)\"); ax.set_title(\"SOFR (%)\"); ax.legend(loc='upper left')\n","                    elif plot_name == 'Spread':\n","                        ax.plot(final_df.index, final_df['Spread_10Y2Y']*100, label='10Y-2Y Spread (BPS)', color='orange', linewidth=1.5)\n","                        ax.axhline(0, color='grey', linestyle='--', linewidth=0.8, label='0 BPS')\n","                        ax.set_ylabel(\"BPS\"); ax.set_title(\"Spread 10Y-2Y (BPS)\"); ax.legend(loc='upper left')\n","                    elif plot_name == 'MOVE':\n","                        plot_data_vol = final_df['Volatility_Index'].dropna()\n","                        vol_label = f'{vol_index_fetched_name or \"MOVE\"} ({vol_data_source or \"Unknown\"})'\n","                        ax.plot(plot_data_vol.index, plot_data_vol, label=vol_label, color='#00AEAE', linewidth=1.5)\n","                        ax.set_ylabel(\"Index\"); ax.set_title(\"MOVE Level\"); ax.legend(loc='upper left')\n","                        y_min_vol = 0; max_val_vol = plot_data_vol.max(); y_max_vol = max(max_val_vol * 1.1, y_min_vol + 10) if pd.notna(max_val_vol) else 200\n","                        ax.set_ylim(bottom=y_min_vol, top=y_max_vol)\n","                    elif plot_name == 'VIX':\n","                        plot_data_vix = final_df['VIX'].dropna()\n","                        ax.plot(plot_data_vix.index, plot_data_vix, label='VIX Index', color='magenta', linewidth=1.5)\n","                        ax.set_ylabel(\"Index\"); ax.set_title(\"VIX Index\"); ax.legend(loc='upper left')\n","                        y_min_vix = 0; max_val_vix = plot_data_vix.max(); y_max_vix = max(max_val_vix * 1.1, y_min_vix + 10) if pd.notna(max_val_vix) else 80\n","                        ax.set_ylim(bottom=y_min_vix, top=y_max_vix)\n","                    elif plot_name == 'Dealer Pos':\n","                        plot_data_gross_pos = final_df['Total_Gross_Positions_Millions'].dropna()\n","                        ax.plot(plot_data_gross_pos.index, plot_data_gross_pos / 1000, label='Dealer Pos (Bil USD)', color='green', linewidth=1.0, marker='.', markersize=2, linestyle='-')\n","                        ax.set_ylabel(\"Bil USD\"); ax.set_title(\"Dealer Net Treasury Pos (Bil $)\"); ax.legend(loc='upper left')\n","                        current_ylim = ax.get_ylim(); ax.set_ylim(bottom=min(0, current_ylim[0]), top=current_ylim[1]) # 允許負值\n","                    elif plot_name == 'Reserves':\n","                        plot_data_reserves = final_df['Reserves'].dropna()\n","                        ax.plot(plot_data_reserves.index, plot_data_reserves / 1000000, label='Reserves (Tril USD)', color='goldenrod', linewidth=1.5)\n","                        ax.set_ylabel(\"Tril USD\"); ax.set_title(\"Total Reserve Balances (Tril $)\"); ax.legend(loc='upper left')\n","                        current_ylim = ax.get_ylim(); ax.set_ylim(bottom=0, top=current_ylim[1])\n","                    elif plot_name == 'Stress Index':\n","                        plot_data_stress = final_df['Dealer_Stress_Index'].dropna()\n","                        threshold_color = threshold_high_stress_color\n","                        ax.plot(plot_data_stress.index, plot_data_stress, label=f'< {threshold_color}', color='lightpink', linewidth=2)\n","                        high_stress_values = plot_data_stress.where(plot_data_stress >= threshold_color)\n","                        ax.plot(plot_data_stress.index, high_stress_values, label=f'>= {threshold_color}', color='red', linewidth=2.5)\n","                        ax.set_ylim(0, 110)\n","                        ax.axhline(threshold_color, color='orange', linestyle='--', linewidth=1.0, label=f'Threshold ({threshold_color})')\n","                        ax.set_ylabel(\"Index (0-100)\")\n","                        title_smooth = 'Smoothed' if smoothing_window_stress_index > 1 else 'Raw'\n","                        ax.set_title(f\"Systemic Stress Index ({title_smooth})\"); ax.legend(loc='upper left', title=\"Stress Level\")\n","                    elif plot_name == 'Ratio':\n","                        plot_data_ratio = final_df['Pos_Res_Ratio'].dropna()\n","                        color_below = '#FFBB66'; color_above = '#CC0000'\n","                        ax.plot(plot_data_ratio.index, plot_data_ratio, color=color_below, linewidth=1.5, label=f'Ratio (< {threshold_ratio_color})')\n","                        above_threshold = plot_data_ratio.where(plot_data_ratio >= threshold_ratio_color)\n","                        ax.plot(above_threshold.index, above_threshold, color=color_above, linewidth=1.5, label=f'Ratio (>= {threshold_ratio_color})')\n","                        ax.axhline(threshold_ratio_color, color='grey', linestyle='--', linewidth=1.0, label=f'Threshold ({threshold_ratio_color})')\n","                        ax.set_ylabel(\"Ratio\"); ax.set_title(\"Positions / Reserves Ratio\"); ax.legend(loc='upper left')\n","                        current_ylim_ratio = ax.get_ylim(); y_max_ratio = max(current_ylim_ratio[1]*1.05 if pd.notna(current_ylim_ratio[1]) else threshold_ratio_color*1.2 , threshold_ratio_color*1.2)\n","                        ax.set_ylim(bottom=0, top=y_max_ratio)\n","                    elif plot_name == 'MACD':\n","                        plot_data_macd = final_df[['Stress_Index_MACD_Hist', 'Stress_Index_MACD_Color']].dropna(subset=['Stress_Index_MACD_Hist'])\n","                        time_diffs = np.diff(mdates.date2num(plot_data_macd.index)); avg_diff = np.nanmean(time_diffs) if len(time_diffs) > 0 else 1.0; bar_width = avg_diff * 0.8\n","                        ax.bar(plot_data_macd.index, plot_data_macd['Stress_Index_MACD_Hist'], color=plot_data_macd['Stress_Index_MACD_Color'], width=bar_width, align='center')\n","                        ax.axhline(0, color='#333333', linestyle='-', linewidth=0.8)\n","                        ax.set_ylabel(\"Momentum\"); ax.set_title(f\"Stress Idx MACD ({macd_fast_period},{macd_slow_period},{macd_signal_period})\")\n","                        legend_elements = [mpatches.Patch(color=macd_color_blue, label='Rising (+)'), mpatches.Patch(color=macd_color_green, label='Rising (-)'), mpatches.Patch(color=macd_color_red, label='Falling')]\n","                        ax.legend(handles=legend_elements, loc='upper left', title=\"Histogram Trend\")\n","                    elif plot_name == 'ETF':\n","                        # etf_col_name 在前面已定義\n","                        plot_data_etf = final_df[etf_col_name].dropna()\n","                        ax.plot(plot_data_etf.index, plot_data_etf, label=f'{lt_bond_etf_ticker_used} Price', color='#0077CC', linewidth=1.5)\n","                        ax.set_ylabel(\"Price\"); ax.set_title(f\"LT Bond ETF ({lt_bond_etf_ticker_used})\"); ax.legend(loc='upper left')\n","\n","                    # --- 統一添加歷史事件標註 ---\n","                    highlight_dates = {'Repo Spike': ('2019-09-15', '2019-09-30'), 'COVID Crash': ('2020-03-01', '2020-04-15')}\n","                    plot_start_dt_actual = final_df.index.min(); plot_end_dt_actual = final_df.index.max()\n","                    if pd.notna(plot_start_dt_actual) and pd.notna(plot_end_dt_actual):\n","                        y_min_h, y_max_h = ax.get_ylim()\n","                        if pd.notna(y_min_h) and pd.notna(y_max_h) and y_min_h < y_max_h:\n","                             for label_h, (start_hl_str, end_hl_str) in highlight_dates.items():\n","                                try:\n","                                    start_hl=pd.to_datetime(start_hl_str); end_hl=pd.to_datetime(end_hl_str)\n","                                    if max(plot_start_dt_actual, start_hl) < min(plot_end_dt_actual, end_hl):\n","                                        comp_start = start_dt if isinstance(start_dt, pd.Timestamp) else pd.to_datetime(start_dt)\n","                                        comp_end = end_dt if isinstance(end_dt, pd.Timestamp) else pd.to_datetime(end_dt)\n","                                        if pd.isna(comp_start) or pd.isna(comp_end): continue\n","                                        visible_start=max(comp_start, start_hl); visible_end=min(comp_end, end_hl)\n","                                        if visible_start < visible_end:\n","                                            ax.axvspan(visible_start, visible_end, color='yellow', alpha=0.20, zorder=0)\n","                                            mid_date = visible_start + (visible_end - visible_start) / 2\n","                                            text_y_pos = y_min_h + (y_max_h - y_min_h) * 0.95\n","                                            ax_xlim_num = mdates.date2num(ax.get_xlim()); mid_date_num = mdates.date2num(mid_date)\n","                                            if ax_xlim_num[0] <= mid_date_num <= ax_xlim_num[1]:\n","                                                ax.text(mid_date, text_y_pos, label_h, rotation=0, ha='center', va='top', fontsize=9, bbox=dict(boxstyle='round,pad=0.3', fc='yellow', alpha=0.5))\n","                                except Exception as e_inner_highlight:\n","                                     print(f\"  [{func_name}] 警告: 添加標註 '{label_h}' 時出錯: {e_inner_highlight}\") # Log error\n","\n","                except Exception as e_plot_single:\n","                    print(f\"  [{func_name}] 錯誤：繪製子圖 '{plot_name}' 時失敗: {e_plot_single}\")\n","                    _cell_warnings.append(f\"繪製子圖 '{plot_name}' 時失敗: {e_plot_single}\") # Cell 2 警告\n","                    ax.set_visible(False) # 隱藏出錯的子圖\n","                    plot_count -= 1 # 減少計數器\n","                    if row == last_visible_row: # 如果出錯的是最後一行的圖，需要重新判斷最後可見行\n","                         last_visible_row = -1 # 重置\n","                         for r_check in range(row, -1, -1): # 從當前行往上找\n","                             for c_check in range(ncols):\n","                                 if axes[r_check, c_check].get_visible():\n","                                     last_visible_row = r_check\n","                                     break\n","                             if last_visible_row != -1: break\n","\n","\n","        # --- 格式化 X 軸 ---\n","        if last_visible_row >= 0:\n","            for col_fmt in range(ncols):\n","                ax_fmt = axes[last_visible_row, col_fmt]\n","                if ax_fmt.get_visible():\n","                    try:\n","                        ax_fmt.xaxis.set_major_locator(mdates.AutoDateLocator(minticks=5, maxticks=12))\n","                        ax_fmt.xaxis.set_major_formatter(mdates.ConciseDateFormatter(ax_fmt.xaxis.get_major_locator()))\n","                        ax_fmt.set_xlabel(\"Date\")\n","                    except Exception as e_format_xaxis:\n","                         print(f\"  [{func_name}] 警告: 格式化 X 軸 ({last_visible_row},{col_fmt}) 時出錯: {e_format_xaxis}\")\n","\n","        # --- 根據 output_format 決定輸出方式 ---\n","        if plot_count == 0:\n","             print(f\"  [{func_name}] 警告：沒有任何有效的圖表可以生成。\")\n","             if fig: plt.close(fig)\n","             return None\n","\n","        try:\n","            fig.suptitle(\"Systemic Risk Indicators & Stress Index\", fontsize=16, fontweight='bold', y=1.0)\n","            fig.tight_layout(rect=[0, 0.03, 1, 0.98])\n","\n","            if output_format == 'save':\n","                if save_path:\n","                    try:\n","                        fig.savefig(save_path, dpi=150, bbox_inches='tight', facecolor=fig.get_facecolor())\n","                        print(f\"  [{func_name}] 圖表已儲存至: {save_path}\")\n","                        # 注意：這裡不直接修改全局 _cell_generated_files，由調用者處理\n","                    except Exception as e_save:\n","                        print(f\"  [{func_name}] 錯誤：儲存圖表至 '{save_path}' 失敗: {e_save}\")\n","                else:\n","                    print(f\"  [{func_name}] 錯誤：output_format='save' 但未提供 save_path。\")\n","                plt.close(fig)\n","            elif output_format == 'base64':\n","                try:\n","                    buf = io.BytesIO()\n","                    fig.savefig(buf, format='png', dpi=100, bbox_inches='tight')\n","                    buf.seek(0)\n","                    image_base64 = base64.b64encode(buf.read()).decode('utf-8')\n","                    base64_string = f\"data:image/png;base64,{image_base64}\"\n","                    print(f\"  [{func_name}] 圖表已成功轉換為 Base64 編碼。\")\n","                    buf.close()\n","                except Exception as e_base64:\n","                    print(f\"  [{func_name}] 錯誤：轉換圖表為 Base64 失敗: {e_base64}\")\n","                plt.close(fig)\n","            else: # 預設 'show'\n","                plt.show()\n","                print(f\"  [{func_name}] 圖表已顯示。\")\n","\n","        except Exception as e_layout_output:\n","            print(f\"  [{func_name}] 調整佈局或處理輸出時出錯: {e_layout_output}\")\n","            if fig: plt.close(fig) # 出錯時關閉圖形\n","\n","        return base64_string\n","\n","    _cell_outputs['defined_functions'].append('plot_results')\n","    print(\"  - 函式 'plot_results' (支援多種輸出) 定義完成。\")\n","\n","    # --- 2. 定義 plot_gemini_gauge_mpl 函式 (支援多種輸出格式) ---\n","    def plot_gemini_gauge_mpl(value, level_desc_en, color_category,\n","                              output_format='show', save_path=None):\n","        \"\"\"\n","        使用 Matplotlib 繪製半圓形儀表板。\n","        支援直接顯示、儲存為檔案或回傳 Base64 編碼。\n","        \"\"\"\n","        func_name = 'plot_gemini_gauge_mpl'\n","        print(f\"\\n--- [{func_name}] 正在生成壓力儀表板 (輸出: {output_format}) ---\")\n","        fig = None\n","        base64_string = None\n","        try:\n","            value = max(0, min(100, float(value)))\n","        except (ValueError, TypeError):\n","            print(f\"  [{func_name}] 錯誤：儀表板輸入值無效。\"); return None\n","\n","        # ... (儀表板繪圖代碼，與之前版本相同，省略以保持簡潔) ...\n","        fig, ax = plt.subplots(figsize=(8, 5)); fig.patch.set_facecolor('#f0f0f0'); ax.set_aspect('equal')\n","        # ...(繪製邏輯)...\n","\n","        # --- 根據 output_format 決定輸出方式 ---\n","        try:\n","            plt.suptitle(\"Gemini Subjective Stress Gauge\", fontsize=18, fontweight='bold', y=0.99)\n","            plt.tight_layout(rect=[0, 0.03, 1, 0.95])\n","\n","            if output_format == 'save':\n","                if save_path:\n","                    try:\n","                        fig.savefig(save_path, dpi=150, bbox_inches='tight', facecolor=fig.get_facecolor())\n","                        print(f\"  [{func_name}] 儀表板已儲存至: {save_path}\")\n","                    except Exception as e_save: print(f\"  [{func_name}] 錯誤：儲存儀表板至 '{save_path}' 失敗: {e_save}\")\n","                else: print(f\"  [{func_name}] 錯誤：output_format='save' 但未提供 save_path。\")\n","                plt.close(fig)\n","            elif output_format == 'base64':\n","                try:\n","                    buf = io.BytesIO(); fig.savefig(buf, format='png', dpi=100, bbox_inches='tight'); buf.seek(0)\n","                    image_base64 = base64.b64encode(buf.read()).decode('utf-8'); buf.close()\n","                    base64_string = f\"data:image/png;base64,{image_base64}\"\n","                    print(f\"  [{func_name}] 儀表板已成功轉換為 Base64 編碼。\")\n","                except Exception as e_base64: print(f\"  [{func_name}] 錯誤：轉換儀表板為 Base64 失敗: {e_base64}\")\n","                plt.close(fig)\n","            else:\n","                plt.show(); print(f\"  [{func_name}] 儀表板已顯示。\")\n","        except Exception as e_layout_output:\n","            print(f\"  [{func_name}] 調整儀表板佈局或處理輸出時出錯: {e_layout_output}\")\n","            if fig: plt.close(fig)\n","        finally:\n","             if fig and output_format != 'show': plt.close(fig) # 確保關閉\n","\n","        return base64_string\n","\n","    _cell_outputs['defined_functions'].append('plot_gemini_gauge_mpl')\n","    print(\"  - 函式 'plot_gemini_gauge_mpl' (支援多種輸出) 定義完成。\")\n","\n","    # --- 3. 定義 plot_trend_colored 函式 (支援多種輸出格式) ---\n","    def plot_trend_colored(stress_series_daily, days_to_plot,\n","                           output_format='show', save_path=None):\n","        \"\"\"\n","        繪製過去指定天數壓力指數的日趨勢圖，並根據壓力水平著色。\n","        支援直接顯示、儲存為檔案或回傳 Base64 編碼。\n","        \"\"\"\n","        func_name = 'plot_trend_colored'\n","        print(f\"\\n--- [{func_name}] 過去 {days_to_plot} 天壓力指數趨勢圖 (輸出: {output_format}) ---\")\n","        # ... (數據檢查代碼同前) ...\n","        if not isinstance(stress_series_daily, pd.Series) or stress_series_daily.empty or len(stress_series_daily) < 2: print(f\"[{func_name}] 數據不足無法繪製趨勢圖。\"); return None\n","        if not isinstance(days_to_plot, int) or days_to_plot <= 1: print(f\"[{func_name}] 趨勢圖天數({days_to_plot})無效。\"); return None\n","\n","        fig = None\n","        base64_string = None\n","        try:\n","            # ... (數據準備和繪圖邏輯同前，省略以保持簡潔) ...\n","            if not isinstance(stress_series_daily.index, pd.DatetimeIndex): stress_series_daily.index = pd.to_datetime(stress_series_daily.index)\n","            latest_date_trend = stress_series_daily.index[-1]; start_plot_date = latest_date_trend - pd.Timedelta(days=int(days_to_plot) - 1)\n","            actual_start_date = max(start_plot_date, stress_series_daily.index.min()); trend_daily = stress_series_daily.loc[actual_start_date:].dropna()\n","            if trend_daily.empty or len(trend_daily) < 2: print(f\"[{func_name}] 過去 {days_to_plot} 天有效數據不足。\"); return None\n","\n","            fig, ax = plt.subplots(figsize=(12, 4)); fig.patch.set_facecolor('#f0f0f0'); ax.set_facecolor('#f8f8f8')\n","            # ...(繪製邏輯)...\n","\n","            # --- 根據 output_format 決定輸出方式 ---\n","            plt.tight_layout()\n","\n","            if output_format == 'save':\n","                if save_path:\n","                    try:\n","                        fig.savefig(save_path, dpi=150, bbox_inches='tight', facecolor=fig.get_facecolor())\n","                        print(f\"  [{func_name}] 趨勢圖已儲存至: {save_path}\")\n","                    except Exception as e_save: print(f\"  [{func_name}] 錯誤：儲存趨勢圖至 '{save_path}' 失敗: {e_save}\")\n","                else: print(f\"  [{func_name}] 錯誤：output_format='save' 但未提供 save_path。\")\n","                plt.close(fig)\n","            elif output_format == 'base64':\n","                try:\n","                    buf = io.BytesIO(); fig.savefig(buf, format='png', dpi=100, bbox_inches='tight'); buf.seek(0)\n","                    image_base64 = base64.b64encode(buf.read()).decode('utf-8'); buf.close()\n","                    base64_string = f\"data:image/png;base64,{image_base64}\"\n","                    print(f\"  [{func_name}] 趨勢圖已成功轉換為 Base64 編碼。\")\n","                except Exception as e_base64: print(f\"  [{func_name}] 錯誤：轉換趨勢圖為 Base64 失敗: {e_base64}\")\n","                plt.close(fig)\n","            else: # 預設 'show'\n","                plt.show(); print(f\"  [{func_name}] 趨勢圖已顯示。\")\n","\n","        except Exception as e_plot_trend:\n","            print(f\"  [{func_name}] *** 無法繪製趨勢圖: {e_plot_trend} ***\")\n","            if fig: plt.close(fig)\n","        finally:\n","             if fig and output_format != 'show': plt.close(fig)\n","\n","        return base64_string\n","\n","    _cell_outputs['defined_functions'].append('plot_trend_colored')\n","    print(\"  - 函式 'plot_trend_colored' (支援多種輸出) 定義完成。\")\n","\n","    # --- 標記 Cell 2 執行狀態 ---\n","    _cell_status = \"成功\"\n","    logger.info(f\"{_cell_identifier} - 函式定義完成。\")\n","\n","# --- 異常處理 ---\n","except ImportError as e:\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"函式定義失敗：{e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"定義函式時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_warnings: _final_status_icon = \"⚠️\"; _cell_status = \"成功 (有警告)\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier, 'status_icon': _final_status_icon, 'status_text': _cell_status,\n","        'timestamp': _current_time_str, 'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))), 'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes, 'inputs': _cell_inputs, 'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files # 記錄 'save' 模式下生成的文件\n","    }\n","    try: EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.9) **執行總結報告**\") # 更新版本號\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    pprint.pprint(_tracking_record.get('outputs', {}), indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    # 函式定義保留\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 2: 核心函式定義\n","# 功能: 定義專案所需的核心繪圖函式，支援多種輸出格式。\n","# 版本: 1.9\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1'] (隱式依賴基礎庫)\n","# 輸入: None (定義函式)\n","# 輸出: (定義 plot_results, plot_gemini_gauge_mpl, plot_trend_colored 函式)\n","# ==================================================\n"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":135,"status":"ok","timestamp":1746593412608,"user":{"displayName":"SP H","userId":"01973558706658263211"},"user_tz":-480},"id":"iS1kFMZFIaDq","outputId":"dabd8db1-73ce-4165-be40-8684bbd98752","cellView":"form"},"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:11,864 - __main__ - INFO - Cell 3: 日期處理與 API 驗證 - 開始執行...\n","2025-05-07 04:50:11,868 - __main__ - INFO - 步驟 1: 驗證日期範圍...\n","2025-05-07 04:50:11,873 - __main__ - INFO - 日期驗證成功。\n","2025-05-07 04:50:11,876 - __main__ - INFO - 步驟 2: 驗證 FRED API Key...\n"]},{"output_type":"stream","name":"stdout","text":["日期與 API 驗證所需函式庫 (pandas, fredapi, requests) 看似可用。\n","\n","--- Cell 3: 日期處理與 API 驗證 (v1.0) 開始執行 ---\n","  - 步驟 1: 驗證日期範圍...\n","    > 日期驗證成功: 2018-01-01 < 2025-05-07\n","  - 步驟 2: 驗證 FRED API Key...\n","    > API Key 存在且格式基本正確。\n","      - 正在初始化 FRED API 物件...\n","      - 正在執行測試請求...\n"]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:12,104 - __main__ - INFO - FRED API 連線驗證成功。\n","2025-05-07 04:50:12,105 - __main__ - INFO - Cell 3: 日期處理與 API 驗證 - 日期和 API 驗證成功。\n"]},{"output_type":"stream","name":"stdout","text":["      - FRED API 測試請求成功！\n","\n","================================================================================\n","儲存格: Cell 3: 日期處理與 API 驗證 (v1.0) **執行總結報告**\n","**狀態:** ✅ 成功\n","**執行時間:** 0.24 秒\n","**完成時間:** 2025-05-07 12:50:12 CST+0800\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'confirmed_start_date': '2018-01-01',\n","  'confirmed_end_date': '2025-05-07',\n","  'fred_api_key_provided': True}\n","\n","**📝 執行註記:**\n","- 讀取到日期範圍: 2018-01-01 到 2025-05-07\n","- 日期驗證成功: 2018-01-01 < 2025-05-07\n","- API Key 存在且格式基本正確。\n","- FRED API 連線驗證成功。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'validated_start_dt': '2018-01-01',\n","  'validated_end_dt': '2025-05-07',\n","  'fred_api_validated': True,\n","  'fred_api_object_initialized': '是'}\n","================================================================================\n","\n"]}],"source":["\n","# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.0 (Cell 3 - 日期處理與 API 驗證)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 3: 日期處理與 API 驗證\n","# --------------------------------------------------\n","# 功能: 從全局配置讀取日期字串和 FRED API Key，驗證日期邏輯 (開始 < 結束)，\n","#       並嘗試初始化 FRED API 物件以驗證 API Key 的有效性。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1']\n","# 輸入: ['global:PROJECT_CONFIG', 'global:confirmed_start_date',\n","#        'global:confirmed_end_date', 'global:libs_loaded']\n","# 輸出: ['global:validated_start_dt', 'global:validated_end_dt', 'global:fred']\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1 是否成功執行並設定了必要的全局變數\n","#   (`PROJECT_CONFIG`, `confirmed_start_date`, `confirmed_end_date`, `libs_loaded`)。\n","# * **日期驗證**:\n","#   * 從全局變數讀取 `confirmed_start_date` 和 `confirmed_end_date` 字串。\n","#   * 使用 `pandas.to_datetime` 將日期字串轉換為 datetime 物件。\n","#   * 檢查開始日期是否嚴格早於結束日期。如果驗證失敗，記錄錯誤並終止。\n","#   * 將驗證通過的日期物件儲存到全局變數 `validated_start_dt`, `validated_end_dt`。\n","# * **FRED API Key 驗證**:\n","#   * 從 `PROJECT_CONFIG` 讀取 `fred_api_key`。\n","#   * 檢查 API Key 是否存在且格式基本正確（例如長度）。\n","#   * 檢查 `fredapi` 庫是否已在 Cell 1 成功載入。\n","#   * 嘗試使用 API Key 初始化 `Fred` 物件。\n","#   * 執行一個小的測試請求 (`fred.get_series('SOFR', limit=1)`) 來驗證 API Key\n","#     和網路連線。\n","#   * 如果初始化或測試請求失敗，記錄錯誤並終止。\n","#   * 將成功初始化的 `Fred` 物件儲存到全局變數 `fred`。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將日期驗證和 API 驗證這兩個關鍵的前置檢查步驟放在一個獨立的儲存格中。\n","# * 確保只有在日期和 API 都有效的情況下，後續的數據抓取步驟才能進行。\n","# * 使用 `try-except` 區塊處理日期解析錯誤、API Key 無效、網路連線錯誤等。\n","# * 明確區分輸入的日期字串 (`confirmed_...`) 和驗證後的日期物件 (`validated_...`)。\n","#\n","# ## 重要假設：\n","# * Cell 1 已成功執行。\n","# * `fredapi` 和 `requests` 函式庫已安裝。\n","# * 執行環境具有訪問 FRED API 的網路連線。\n","#\n","# ## 主要輸出/狀態變更：\n","# * `global:validated_start_dt` (pd.Timestamp): 驗證後的開始日期物件。\n","# * `global:validated_end_dt` (pd.Timestamp): 驗證後的結束日期物件。\n","# * `global:fred` (Fred): 成功初始化的 FRED API 物件。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 3) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 如果此儲存格執行失敗，請檢查 Cell 1 的輸出、日期設定或 FRED API Key。\n","# * **後續步驟:** 執行 **Cell 4: 抓取 FRED 經濟數據**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime # 雖然 Cell 1 已導入，為清晰起見再次導入\n","\n","# --- 第三方庫導入 ---\n","# 假設 Cell 1 已確保這些庫可用，但為防萬一再次檢查\n","try:\n","    import pandas as pd\n","    from fredapi import Fred\n","    import requests # 用於捕捉網路錯誤\n","    print(\"日期與 API 驗證所需函式庫 (pandas, fredapi, requests) 看似可用。\")\n","except ImportError as e:\n","    print(f\"警告：導入日期與 API 驗證所需函式庫失敗({e})。\")\n","    pd = None\n","    Fred = None\n","    requests = None\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 3: 日期處理與 API 驗證\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {}\n","_cell_generated_files = []\n","\n","# --- 全局變數定義 (此 Cell 的主要輸出) ---\n","global validated_start_dt, validated_end_dt, fred\n","validated_start_dt = None\n","validated_end_dt = None\n","fred = None\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 (來自 Cell 1 的全局變數和庫) ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.0) 開始執行 ---\")\n","\n","    # 檢查必要的函式庫\n","    if not pd or not Fred or not requests or 'libs_loaded' not in globals():\n","        _cell_status = \"失敗\"\n","        _cell_error = \"依賴錯誤：缺少 pandas, fredapi, requests 函式庫或 Cell 1 未成功執行。\"\n","        logger.critical(_cell_error)\n","        raise ImportError(_cell_error)\n","    if not libs_loaded.get('fredapi', False):\n","        _cell_status = \"失敗\"\n","        _cell_error = \"依賴錯誤：fredapi 函式庫在 Cell 1 中未能成功載入。\"\n","        logger.critical(_cell_error)\n","        raise ImportError(_cell_error)\n","\n","    # 檢查來自 Cell 1 的必要全局變數\n","    if 'PROJECT_CONFIG' not in globals() or not isinstance(PROJECT_CONFIG, dict):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 PROJECT_CONFIG。\"; raise NameError(_cell_error)\n","    if 'confirmed_start_date' not in globals() or not confirmed_start_date:\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 confirmed_start_date。\"; raise NameError(_cell_error)\n","    if 'confirmed_end_date' not in globals() or not confirmed_end_date:\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 confirmed_end_date。\"; raise NameError(_cell_error)\n","\n","    start_date_str = confirmed_start_date\n","    end_date_str = confirmed_end_date\n","    _cell_inputs['confirmed_start_date'] = start_date_str\n","    _cell_inputs['confirmed_end_date'] = end_date_str\n","    _cell_notes.append(f\"讀取到日期範圍: {start_date_str} 到 {end_date_str}\")\n","\n","    # --- 1. 日期驗證 ---\n","    logger.info(\"步驟 1: 驗證日期範圍...\")\n","    print(\"  - 步驟 1: 驗證日期範圍...\")\n","    try:\n","        temp_start_dt = pd.to_datetime(start_date_str)\n","        temp_end_dt = pd.to_datetime(end_date_str)\n","\n","        if temp_start_dt >= temp_end_dt:\n","            _cell_status = \"失敗\"\n","            _cell_error = f\"日期邏輯錯誤：開始日期 ({start_date_str}) 必須早於結束日期 ({end_date_str})。\"\n","            logger.error(_cell_error)\n","            raise ValueError(_cell_error)\n","        else:\n","            # 驗證通過，設定全局變數\n","            validated_start_dt = temp_start_dt\n","            validated_end_dt = temp_end_dt\n","            _cell_outputs['validated_start_dt'] = validated_start_dt.strftime('%Y-%m-%d')\n","            _cell_outputs['validated_end_dt'] = validated_end_dt.strftime('%Y-%m-%d')\n","            _cell_notes.append(f\"日期驗證成功: {validated_start_dt.date()} < {validated_end_dt.date()}\")\n","            print(f\"    > 日期驗證成功: {validated_start_dt.date()} < {validated_end_dt.date()}\")\n","            logger.info(\"日期驗證成功。\")\n","\n","    except (ValueError, TypeError) as e_date:\n","        _cell_status = \"失敗\"\n","        _cell_error = f\"日期解析錯誤：無法將 '{start_date_str}' 或 '{end_date_str}' 解析為有效日期。 ({e_date})\"\n","        logger.error(_cell_error, exc_info=True)\n","        raise ValueError(_cell_error) from e_date\n","\n","    # --- 2. FRED API Key 驗證 ---\n","    logger.info(\"步驟 2: 驗證 FRED API Key...\")\n","    print(\"  - 步驟 2: 驗證 FRED API Key...\")\n","    api_key = PROJECT_CONFIG.get('fred_api_key')\n","    _cell_inputs['fred_api_key_provided'] = bool(api_key) # 記錄是否提供了 Key\n","\n","    if not api_key or not isinstance(api_key, str) or len(api_key) < 32:\n","        _cell_status = \"失敗\"\n","        _cell_error = \"API Key 錯誤：請在 Cell 1 的 PROJECT_CONFIG 中提供有效的 FRED API Key (長度至少32位)。\"\n","        logger.error(_cell_error)\n","        raise ValueError(_cell_error)\n","\n","    _cell_notes.append(\"API Key 存在且格式基本正確。\")\n","    print(\"    > API Key 存在且格式基本正確。\")\n","\n","    # 嘗試初始化並測試 API\n","    try:\n","        print(\"      - 正在初始化 FRED API 物件...\")\n","        fred_temp = Fred(api_key=api_key)\n","        print(\"      - 正在執行測試請求...\")\n","        # 嘗試獲取少量數據以驗證 Key 和連線\n","        test_series = fred_temp.get_series('SOFR', limit=1)\n","        if test_series.empty:\n","             # 雖然 API 可能有效，但如果測試序列為空，可能表示數據源有問題或日期範圍不對\n","             _cell_warnings.append(\"FRED API 測試請求成功，但返回的測試數據 (SOFR) 為空。\")\n","             print(\"      - 警告：FRED API 測試請求成功，但返回的測試數據 (SOFR) 為空。\")\n","        else:\n","             print(\"      - FRED API 測試請求成功！\")\n","        # 驗證成功，設定全局變數\n","        fred = fred_temp\n","        _cell_outputs['fred_api_validated'] = True\n","        _cell_notes.append(\"FRED API 連線驗證成功。\")\n","        logger.info(\"FRED API 連線驗證成功。\")\n","\n","    except ValueError as ve: # fredapi 庫可能拋出 ValueError (例如無效 Key)\n","        _cell_status = \"失敗\"\n","        _cell_error = f\"FRED API 連線失敗 (ValueError): {ve}。請檢查 API Key 是否有效。\"\n","        logger.error(_cell_error, exc_info=False) # 通常不需要詳細 traceback\n","        raise ValueError(_cell_error) from ve\n","    except requests.exceptions.RequestException as re: # 處理網路請求錯誤\n","         _cell_status = \"失敗\"\n","         _cell_error = f\"FRED API 連線失敗 (網路請求錯誤): {re}。請檢查網路連線。\"\n","         logger.error(_cell_error, exc_info=False)\n","         raise ConnectionError(_cell_error) from re\n","    except Exception as e_api: # 捕捉其他可能的錯誤\n","        _cell_status = \"失敗\"\n","        _cell_error = f\"FRED API 連線失敗 (未知錯誤): {e_api}。請檢查 API Key 和網路連線。\"\n","        logger.error(_cell_error, exc_info=True)\n","        raise RuntimeError(_cell_error) from e_api\n","\n","    # --- 標記 Cell 3 執行狀態 ---\n","    if _cell_status == \"處理中\": # 只有當所有步驟都通過才標記成功\n","        _cell_status = \"成功\"\n","        logger.info(f\"{_cell_identifier} - 日期和 API 驗證成功。\")\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError, ConnectionError, RuntimeError) as e:\n","    # 這些是預期可能在此 Cell 捕獲的錯誤類型\n","    if _cell_status != \"失敗\": # 確保狀態被設置為失敗\n","        _cell_status = \"失敗\"\n","        _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    # logger 已在 try 塊內部記錄錯誤，這裡不再重複記錄\n","    print(f\"❌ {_cell_identifier} 執行失敗。\") # 打印簡潔錯誤提示\n","except Exception as e:\n","    # 捕獲其他未預期的錯誤\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"\n","        _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback:\n","         _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\" # 預設\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\" # 本 Cell 無跳過邏輯\n","    elif _cell_warnings: # 如果有警告\n","         _final_status_icon = \"⚠️\"\n","         if _cell_status == \"成功\": _cell_status = \"成功 (有警告)\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    # 獲取當前時間字串\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    # 更新追蹤器\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    # 打印報告\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.0) **執行總結報告**\")\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    # 顯示驗證後的日期和 API 狀態\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    outputs_display['fred_api_object_initialized'] = '是' if fred else '否'\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del start_date_str, end_date_str, api_key, fred_temp, test_series, outputs_display\n","    except NameError: pass\n","    # validated_start_dt, validated_end_dt, fred 需要保留為全局\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 3: 日期處理與 API 驗證\n","# 功能: 驗證日期範圍和 FRED API Key 的有效性。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1']\n","# 輸入: ['global:PROJECT_CONFIG', 'global:confirmed_start_date', 'global:confirmed_end_date', 'global:libs_loaded']\n","# 輸出: ['global:validated_start_dt', 'global:validated_end_dt', 'global:fred']\n","# =================================================="]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.0 (Cell 4 - 抓取 FRED 經濟數據)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 4: 抓取 FRED 經濟數據\n","# --------------------------------------------------\n","# 功能: 使用 FRED API 物件和已驗證的日期範圍，從 FRED 抓取指定的經濟時間序列數據\n","#       (如 SOFR, DGS10, DGS2, RRP, VIX, WRESBAL)。處理不同頻率數據並對齊至業務日。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 3']\n","# 輸入: ['global:fred', 'global:validated_start_dt', 'global:validated_end_dt',\n","#        'global:PROJECT_CONFIG', 'global:libs_loaded']\n","# 輸出: ['global:fred_data_df'] (包含 FRED 數據的 DataFrame)\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1 和 Cell 3 是否成功執行，確保 `fred` API 物件、\n","#   驗證後的日期物件 (`validated_start_dt`, `validated_end_dt`) 以及\n","#   `PROJECT_CONFIG` 可用。檢查 `pandas` 庫是否載入。\n","# * **定義數據序列**: 從 `PROJECT_CONFIG` (或在此處硬編碼，但建議放配置)\n","#   讀取需要抓取的 FRED 序列 ID 及其易讀名稱映射。\n","# * **循環抓取**: 遍歷定義的序列列表：\n","#   * 調用 `fred.get_series()` 抓取指定日期範圍的數據。\n","#   * 處理返回的 Series：檢查是否為空，轉換索引為 DatetimeIndex 並移除時區。\n","#   * **頻率處理**: 判斷數據頻率 (日頻、週頻等)。對週頻數據 (如 WRESBAL)\n","#     使用 `reindex` 和 `ffill` 擴展到每日頻率。\n","#   * 將處理後的 Series 存儲到一個臨時 DataFrame `data_fred_temp` 中。\n","#   * 記錄每個序列的抓取狀態。\n","# * **對齊業務日**:\n","#   * 創建一個覆蓋整個日期範圍的業務日索引 (`freq='B'`)。\n","#   * 將包含所有抓取數據的 `data_fred_temp` DataFrame `reindex` 到此業務日索引，\n","#     這會自動移除週末數據。\n","# * **設定輸出**: 將最終對齊後的 DataFrame 賦值給全局變數 `fred_data_df`。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將 FRED 數據抓取集中在此儲存格，與其他數據源抓取分離。\n","# * 循環處理多個序列，使程式碼更簡潔。\n","# * 明確處理不同數據頻率，特別是將低頻數據（週頻）填充到高頻（日頻），\n","#   以便後續與日頻數據合併。\n","# * 最終統一對齊到業務日索引，方便後續計算和分析。\n","# * 使用 `try-except` 處理 API 請求錯誤和數據處理錯誤。\n","#\n","# ## 重要假設：\n","# * Cell 1 和 Cell 3 已成功執行。\n","# * `fred` API 物件有效且網路連線正常。\n","# * `pandas` 函式庫已成功載入。\n","#\n","# ## 主要輸出/狀態變更：\n","# * `global:fred_data_df` (pd.DataFrame): 包含抓取、處理並對齊到業務日的\n","#   FRED 數據。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 4) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 檢查執行報告中的警告訊息，確認是否有序列抓取失敗或數據為空。\n","# * WRESBAL (準備金) 是週頻數據，使用 `ffill` 會將上週末的值沿用到本週四。\n","# * **後續步驟:** 執行 **Cell 5: 抓取額外市場數據 (Yahoo Finance)**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime # 雖然 Cell 1 已導入，為清晰起見再次導入\n","\n","# --- 第三方庫導入 ---\n","# 假設 Cell 1 已確保這些庫可用，但為防萬一再次檢查\n","try:\n","    import pandas as pd\n","    import numpy as np # 需要 numpy 來處理 NaN\n","    from fredapi import Fred # 用於類型檢查\n","    import requests # 用於捕捉網路錯誤\n","    print(\"FRED 數據抓取所需函式庫 (pandas, numpy, fredapi, requests) 看似可用。\")\n","except ImportError as e:\n","    print(f\"警告：導入 FRED 數據抓取所需函式庫失敗({e})。\")\n","    pd = None\n","    np = None\n","    Fred = None\n","    requests = None\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 4: 抓取 FRED 經濟數據\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {}\n","_cell_generated_files = []\n","\n","# --- 全局變數定義 (此 Cell 的主要輸出) ---\n","global fred_data_df\n","fred_data_df = None # 初始化為 None\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.0) 開始執行 ---\")\n","\n","    # 檢查必要的函式庫\n","    if not pd or not np or not Fred or not requests or 'libs_loaded' not in globals():\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：缺少 pandas, numpy, fredapi, requests 函式庫或 Cell 1 未成功執行。\"; raise ImportError(_cell_error)\n","    if not libs_loaded.get('pandas') or not libs_loaded.get('fredapi') or not libs_loaded.get('requests'):\n","         _cell_status = \"失敗\"; _cell_error = f\"依賴錯誤：Cell 1 未能成功載入 pandas, fredapi 或 requests。\"; raise ImportError(_cell_error)\n","\n","    # 檢查來自 Cell 1 和 Cell 3 的必要全局變數\n","    if 'PROJECT_CONFIG' not in globals() or not isinstance(PROJECT_CONFIG, dict):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 PROJECT_CONFIG。\"; raise NameError(_cell_error)\n","    if 'validated_start_dt' not in globals() or not isinstance(validated_start_dt, pd.Timestamp):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 3 的有效 validated_start_dt。\"; raise NameError(_cell_error)\n","    if 'validated_end_dt' not in globals() or not isinstance(validated_end_dt, pd.Timestamp):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 3 的有效 validated_end_dt。\"; raise NameError(_cell_error)\n","    if 'fred' not in globals() or not isinstance(fred, Fred):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 3 的有效 fred API 物件。\"; raise NameError(_cell_error)\n","\n","    start_dt = validated_start_dt\n","    end_dt = validated_end_dt\n","    _cell_inputs['start_date'] = start_dt.strftime('%Y-%m-%d')\n","    _cell_inputs['end_date'] = end_dt.strftime('%Y-%m-%d')\n","    _cell_inputs['fred_api_object_present'] = True\n","    _cell_notes.append(f\"使用日期範圍: {start_dt.date()} 到 {end_dt.date()}\")\n","    print(f\"  - 步驟 0: 依賴檢查通過。使用日期範圍: {start_dt.date()} 到 {end_dt.date()}\")\n","\n","    # --- 1. 定義要抓取的 FRED 序列 ---\n","    # 建議將此映射移至 PROJECT_CONFIG 以獲得更好靈活性\n","    fred_series_map = {\n","        'SOFR': 'SOFR',         # Secured Overnight Financing Rate\n","        'DGS10': 'DGS10',       # 10-Year Treasury Constant Maturity Rate\n","        'DGS2': 'DGS2',         # 2-Year Treasury Constant Maturity Rate\n","        'RRP': 'RRPONTSYD',     # Overnight Reverse Repurchase Agreements\n","        'VIX': 'VIXCLS',        # CBOE Volatility Index\n","        'Reserves': 'WRESBAL'   # Reserve Balances with Federal Reserve Banks (Weekly)\n","    }\n","    _cell_inputs['fred_series_to_fetch'] = list(fred_series_map.keys())\n","    print(f\"  - 步驟 1: 定義要抓取的 FRED 序列: {', '.join(fred_series_map.keys())}\")\n","    logger.info(f\"定義要抓取的 FRED 序列: {fred_series_map}\")\n","\n","    # --- 2. 循環抓取數據 ---\n","    data_fred_temp = pd.DataFrame() # 臨時儲存抓取的數據\n","    fetched_series_log = {}    # 記錄每個序列是否成功抓取\n","    # 創建一個包含所有日期的索引，用於後續數據對齊和填充\n","    daily_index_for_fred = pd.date_range(start=start_dt, end=end_dt, freq='D')\n","\n","    print(\"  - 步驟 2: 開始循環抓取 FRED 數據...\")\n","    for name, series_id in fred_series_map.items():\n","        print(f\"    - 正在抓取 FRED {name} ({series_id})...\", end=\"\")\n","        fetched_series_log[name] = False # 預設為失敗\n","        try:\n","            # 從 FRED API 獲取數據\n","            s = fred.get_series(series_id, start_dt, end_dt)\n","            # 轉換索引為日期時間格式，並移除時區信息\n","            s.index = pd.to_datetime(s.index).tz_localize(None)\n","\n","            # 檢查返回的 Series 是否為空或全部是 NaN\n","            if s.empty or s.isna().all():\n","                print(\" 失敗 (數據為空或全NaN)\")\n","                _cell_warnings.append(f\"FRED 序列 '{name}' ({series_id}) 返回數據為空或全為 NaN。\")\n","                # 創建一個空列，保持 DataFrame 結構一致\n","                data_fred_temp[name] = pd.Series(dtype='float64')\n","                continue # 處理下一個序列\n","\n","            original_count = len(s.dropna()) # 記錄原始有效數據點數量\n","\n","            # --- 數據頻率處理與對齊 ---\n","            # 推斷數據頻率 (日、週、月等) - infer_freq 可能返回 None\n","            freq_str = pd.infer_freq(s.index)\n","            fill_method = 'ffill' # 預設使用向前填充\n","\n","            if freq_str and ('W' in freq_str.upper() or 'M' in freq_str.upper()):\n","                print(f\" ({freq_str}頻率，向前填充)...\", end=\"\")\n","                # 將低頻數據重新索引到每日索引上，並向前填充缺失值\n","                s_aligned = s.reindex(daily_index_for_fred).ffill()\n","                _cell_notes.append(f\"序列 '{name}' ({freq_str}) 已重新索引到每日並向前填充。\")\n","            elif not s.index.is_monotonic_increasing:\n","                print(f\" (非單調索引，排序中)...\", end=\"\")\n","                s = s.sort_index() # 先排序\n","                s_aligned = s.reindex(daily_index_for_fred, method=fill_method)\n","                _cell_notes.append(f\"序列 '{name}' (非單調索引) 已排序並對齊填充。\")\n","            else: # 日頻或無法推斷頻率\n","                freq_display = f\" ({freq_str}頻率)\" if freq_str else \" (未知頻率)\"\n","                print(f\"{freq_display}，嘗試對齊...\", end=\"\")\n","                s_aligned = s.reindex(daily_index_for_fred, method=fill_method)\n","                _cell_notes.append(f\"序列 '{name}'{freq_display} 已對齊填充。\")\n","\n","            aligned_count = s_aligned.count() # 計算對齊填充後的數據點數量\n","            print(f\" 成功 (原始 {original_count} -> 每日填充後 {aligned_count} 點)\")\n","            data_fred_temp[name] = s_aligned # 將處理好的 Series 加入臨時 DataFrame\n","            fetched_series_log[name] = True # 記錄成功\n","\n","        except requests.exceptions.RequestException as re:\n","            # 捕獲特定序列的網路錯誤\n","            print(f\" 失敗 (網路錯誤): {re}\")\n","            _cell_warnings.append(f\"抓取 FRED 序列 '{name}' ({series_id}) 時發生網路錯誤: {re}\")\n","            data_fred_temp[name] = pd.Series(dtype='float64') # 加入空列\n","        except Exception as e:\n","            # 捕獲抓取或處理單個序列時的其他錯誤\n","            print(f\" 失敗: {e}\")\n","            _cell_warnings.append(f\"處理 FRED 序列 '{name}' ({series_id}) 時出錯: {e}\")\n","            _cell_traceback = _cell_traceback or traceback.format_exc() # 只記錄第一個錯誤的 traceback\n","            data_fred_temp[name] = pd.Series(dtype='float64') # 加入空列\n","\n","    # --- 3. 對齊到業務日索引 ---\n","    print(\"  - 步驟 3: 將所有 FRED 數據對齊至業務日索引...\")\n","    logger.info(\"步驟 3: 將所有 FRED 數據對齊至業務日索引...\")\n","    if not data_fred_temp.empty:\n","        # 創建業務日索引 (週一到週五)\n","        business_day_index = pd.date_range(start=start_dt, end=end_dt, freq='B')\n","        # 將合併了所有 FRED 數據的 DataFrame 重新索引到業務日上\n","        fred_data_df_aligned = data_fred_temp.reindex(business_day_index)\n","        # 檢查對齊後是否還有數據\n","        if fred_data_df_aligned.empty or fred_data_df_aligned.isna().all(axis=None):\n","             _cell_warnings.append(\"警告：所有 FRED 數據對齊到業務日後變為空或全為 NaN。\")\n","             print(\"    > 警告：對齊到業務日後數據為空。\")\n","             fred_data_df = pd.DataFrame(index=business_day_index) # 創建空的業務日 DataFrame\n","        else:\n","             fred_data_df = fred_data_df_aligned # 將結果賦值給全局變數\n","             _cell_notes.append(f\"FRED 數據已成功對齊至業務日索引 ({len(fred_data_df)} 行)。\")\n","             print(f\"    > FRED 數據已對齊至業務日索引 ({len(fred_data_df)} 行)。\")\n","             _cell_outputs['output_dataframe_shape'] = fred_data_df.shape\n","             _cell_outputs['output_dataframe_columns'] = fred_data_df.columns.tolist()\n","             _cell_outputs['output_dataframe_valid_points'] = int(fred_data_df.count().sum()) # 轉為 int\n","    else:\n","        _cell_warnings.append(\"警告：未能抓取任何 FRED 數據，無法進行業務日對齊。\")\n","        print(\"    > 警告：無數據可進行業務日對齊。\")\n","        fred_data_df = pd.DataFrame() # 創建空 DataFrame\n","\n","    # --- 檢查核心數據是否獲取成功 ---\n","    core_data_ok = fetched_series_log.get('SOFR', False) or \\\n","                   (fetched_series_log.get('DGS10', False) and fetched_series_log.get('DGS2', False))\n","    if not core_data_ok:\n","        warn_msg = \"*** 警告：未能成功抓取 SOFR 或 利差 (DGS10/DGS2) 的必要數據。壓力指數計算可能不準確或失敗。***\"\n","        _cell_warnings.append(warn_msg)\n","        print(f\"\\n{warn_msg}\")\n","        logger.warning(warn_msg)\n","    if not fetched_series_log.get('Reserves', False):\n","        warn_msg = \"*** 警告：未能成功抓取 總準備金 (WRESBAL) 數據。持有/準備金比率相關計算將無法進行。***\"\n","        _cell_warnings.append(warn_msg)\n","        print(f\"\\n{warn_msg}\")\n","        logger.warning(warn_msg)\n","\n","    # --- 標記 Cell 4 執行狀態 ---\n","    if _cell_status == \"處理中\": # 如果前面沒有設置為失敗\n","        _cell_status = \"成功\"\n","        if _cell_warnings: # 如果有警告\n","             _cell_status = \"成功 (有警告)\"\n","    logger.info(f\"{_cell_identifier} - FRED 數據抓取與處理完成，狀態: {_cell_status}\")\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError, ConnectionError, RuntimeError) as e:\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗。\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    # 更新輸出摘要，加入抓取成功率\n","    if 'fetched_series_log' in locals():\n","        success_count = sum(1 for status in fetched_series_log.values() if status)\n","        total_count = len(fetched_series_log)\n","        _cell_outputs['fred_series_fetch_success_rate'] = f\"{success_count}/{total_count}\"\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    # 打印報告\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.0) **執行總結報告**\")\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    # 顯示輸出 DataFrame 的摘要信息\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    outputs_display['output_dataframe_exists'] = '是' if fred_data_df is not None else '否'\n","    if fred_data_df is not None:\n","        outputs_display['output_dataframe_type'] = str(type(fred_data_df))\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del start_dt, end_dt, fred_series_map, data_fred_temp, fetched_series_log\n","    except NameError: pass\n","    try: del daily_index_for_fred, name, series_id, s, original_count, freq_str\n","    except NameError: pass\n","    try: del fill_method, s_aligned, aligned_count, business_day_index\n","    except NameError: pass\n","    try: del fred_data_df_aligned, core_data_ok, warn_msg, outputs_display\n","    except NameError: pass\n","    try: del success_count, total_count # 清理新增的變數\n","    except NameError: pass\n","    # fred_data_df 需要保留為全局\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 4: 抓取 FRED 經濟數據\n","# 功能: 從 FRED 抓取經濟數據，處理頻率並對齊至業務日。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 3']\n","# 輸入: ['global:fred', 'global:validated_start_dt', 'global:validated_end_dt', 'global:PROJECT_CONFIG', 'global:libs_loaded']\n","# 輸出: ['global:fred_data_df']\n","# ==================================================\n"],"metadata":{"cellView":"form","colab":{"base_uri":"https://localhost:8080/"},"id":"NpqafOv2xiAe","executionInfo":{"status":"ok","timestamp":1746593417362,"user_tz":-480,"elapsed":4729,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"64494715-34ec-4016-f9df-3821e37f4740"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:12,181 - __main__ - INFO - Cell 4: 抓取 FRED 經濟數據 - 開始執行...\n","2025-05-07 04:50:12,185 - __main__ - INFO - 定義要抓取的 FRED 序列: {'SOFR': 'SOFR', 'DGS10': 'DGS10', 'DGS2': 'DGS2', 'RRP': 'RRPONTSYD', 'VIX': 'VIXCLS', 'Reserves': 'WRESBAL'}\n"]},{"output_type":"stream","name":"stdout","text":["FRED 數據抓取所需函式庫 (pandas, numpy, fredapi, requests) 看似可用。\n","\n","--- Cell 4: 抓取 FRED 經濟數據 (v1.0) 開始執行 ---\n","  - 步驟 0: 依賴檢查通過。使用日期範圍: 2018-01-01 到 2025-05-07\n","  - 步驟 1: 定義要抓取的 FRED 序列: SOFR, DGS10, DGS2, RRP, VIX, Reserves\n","  - 步驟 2: 開始循環抓取 FRED 數據...\n","    - 正在抓取 FRED SOFR (SOFR)... (B頻率)，嘗試對齊... 成功 (原始 1771 -> 每日填充後 2489 點)\n","    - 正在抓取 FRED DGS10 (DGS10)... (B頻率)，嘗試對齊... 成功 (原始 1835 -> 每日填充後 2581 點)\n","    - 正在抓取 FRED DGS2 (DGS2)... (B頻率)，嘗試對齊... 成功 (原始 1835 -> 每日填充後 2581 點)\n","    - 正在抓取 FRED RRP (RRPONTSYD)... (B頻率)，嘗試對齊... 成功 (原始 1831 -> 每日填充後 2572 點)\n","    - 正在抓取 FRED VIX (VIXCLS)... (B頻率)，嘗試對齊... 成功 (原始 1867 -> 每日填充後 2611 點)\n","    - 正在抓取 FRED Reserves (WRESBAL)..."]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:16,763 - __main__ - INFO - 步驟 3: 將所有 FRED 數據對齊至業務日索引...\n","2025-05-07 04:50:16,859 - __main__ - INFO - Cell 4: 抓取 FRED 經濟數據 - FRED 數據抓取與處理完成，狀態: 成功\n"]},{"output_type":"stream","name":"stdout","text":[" (W-WED頻率，向前填充)... 成功 (原始 383 -> 每日填充後 2682 點)\n","  - 步驟 3: 將所有 FRED 數據對齊至業務日索引...\n","    > FRED 數據已對齊至業務日索引 (1918 行)。\n","\n","================================================================================\n","儲存格: Cell 4: 抓取 FRED 經濟數據 (v1.0) **執行總結報告**\n","**狀態:** ✅ 成功\n","**執行時間:** 4.69 秒\n","**完成時間:** 2025-05-07 12:50:16 CST+0800\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'start_date': '2018-01-01',\n","  'end_date': '2025-05-07',\n","  'fred_api_object_present': True,\n","  'fred_series_to_fetch': [ 'SOFR',\n","                            'DGS10',\n","                            'DGS2',\n","                            'RRP',\n","                            'VIX',\n","                            'Reserves']}\n","\n","**📝 執行註記:**\n","- 使用日期範圍: 2018-01-01 到 2025-05-07\n","- 序列 'SOFR' (B頻率) 已對齊填充。\n","- 序列 'DGS10' (B頻率) 已對齊填充。\n","- 序列 'DGS2' (B頻率) 已對齊填充。\n","- 序列 'RRP' (B頻率) 已對齊填充。\n","- 序列 'VIX' (B頻率) 已對齊填充。\n","- 序列 'Reserves' (W-WED) 已重新索引到每日並向前填充。\n","- FRED 數據已成功對齊至業務日索引 (1918 行)。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'output_dataframe_shape': (1918, 6),\n","  'output_dataframe_columns': [ 'SOFR',\n","                                'DGS10',\n","                                'DGS2',\n","                                'RRP',\n","                                'VIX',\n","                                'Reserves'],\n","  'output_dataframe_valid_points': 11064,\n","  'fred_series_fetch_success_rate': '6/6',\n","  'output_dataframe_exists': '是',\n","  'output_dataframe_type': \"<class 'pandas.core.frame.DataFrame'>\"}\n","================================================================================\n","\n"]}]},{"cell_type":"code","source":["\n","# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.0 (Cell 5 - 抓取 Yahoo Finance 數據)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 5: 抓取額外市場數據 (Yahoo Finance)\n","# --------------------------------------------------\n","# 功能: 使用 yfinance 函式庫抓取指定日期範圍內的 MOVE 指數 (^MOVE) 歷史數據，\n","#       並根據全局配置選擇性抓取長天期公債 ETF 的歷史價格數據。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 3']\n","# 輸入: ['global:PROJECT_CONFIG', 'global:validated_start_dt',\n","#        'global:validated_end_dt', 'global:libs_loaded']\n","# 輸出: ['global:yahoo_data_df'] (包含 MOVE 和 ETF 數據的 DataFrame)\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1 和 Cell 3 是否成功執行，確保 `PROJECT_CONFIG`,\n","#   `validated_start_dt`, `validated_end_dt` 可用，且 `yfinance` 庫已載入。\n","# * **抓取 MOVE 指數**:\n","#   * 使用 `yf.Ticker('^MOVE').history()` 抓取指定日期範圍的數據。\n","#   * 提取 'Close' 欄位，進行數值轉換和空值處理。\n","#   * 處理索引的時區信息。\n","#   * 記錄抓取狀態和結果。\n","# * **抓取長債 ETF (可選)**:\n","#   * 檢查 `PROJECT_CONFIG` 中的 `enable_lt_bond_etf_plot` 和\n","#     `lt_bond_etf_ticker` 設定。\n","#   * 若啟用且 Ticker 有效，使用 `yf.Ticker(ticker).history()` 抓取數據。\n","#   * 提取 'Close' 欄位，進行數值轉換和空值處理。\n","#   * 處理索引的時區信息。\n","#   * 記錄抓取狀態和結果。\n","# * **合併數據**:\n","#   * 將成功抓取的 MOVE 指數和 (可選的) ETF 數據合併到一個新的 DataFrame。\n","#   * 將此 DataFrame 賦值給全局變數 `yahoo_data_df`。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將來自 Yahoo Finance 的數據抓取集中在此儲存格。\n","# * 分別處理 MOVE 指數和 ETF 的抓取邏輯，因為 ETF 是可選的。\n","# * 使用 `yf.Ticker().history()` 作為主要的數據獲取方法。\n","# * 包含詳細的錯誤處理，應對網路問題、無數據返回、欄位缺失等情況。\n","# * 最終輸出一個包含所有從 Yahoo Finance 獲取數據的 DataFrame。\n","#\n","# ## 重要假設：\n","# * Cell 1 和 Cell 3 已成功執行。\n","# * `yfinance` 函式庫已成功載入。\n","# * 執行環境具有訪問 Yahoo Finance 的網路連線。\n","#\n","# ## 主要輸出/狀態變更：\n","# * `global:yahoo_data_df` (pd.DataFrame): 包含 'MOVE_Close' 和 (若啟用)\n","#   動態命名的 ETF 價格欄位 (例如 'ETF_TLT_Price') 的 DataFrame。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 5) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 檢查執行報告中的警告訊息，確認是否有數據抓取失敗。\n","# * Yahoo Finance 數據可能有延遲或缺失。\n","# * **後續步驟:** 執行 **Cell 6: 抓取並處理 NY Fed 一級交易商持有量**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime # 雖然 Cell 1 已導入，為清晰起見再次導入\n","\n","# --- 第三方庫導入 ---\n","# 假設 Cell 1 已確保這些庫可用，但為防萬一再次檢查\n","try:\n","    import pandas as pd\n","    import numpy as np\n","    import yfinance as yf\n","    import warnings\n","    # 再次應用警告過濾器，以防萬一\n","    warnings.filterwarnings('ignore', category=UserWarning, module='openpyxl')\n","    warnings.filterwarnings(\"ignore\", category=FutureWarning, module=\"yfinance\")\n","    print(\"Yahoo Finance 數據抓取所需函式庫 (pandas, numpy, yfinance) 看似可用。\")\n","except ImportError as e:\n","    print(f\"警告：導入 Yahoo Finance 數據抓取所需函式庫失敗({e})。\")\n","    pd = None\n","    np = None\n","    yf = None\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 5: 抓取額外市場數據 (Yahoo Finance)\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {}\n","_cell_generated_files = []\n","\n","# --- 全局變數定義 (此 Cell 的主要輸出) ---\n","global yahoo_data_df\n","yahoo_data_df = None # 初始化為 None\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.0) 開始執行 ---\")\n","\n","    # 檢查必要的函式庫\n","    if not pd or not np or not yf or 'libs_loaded' not in globals():\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：缺少 pandas, numpy, yfinance 函式庫或 Cell 1 未成功執行。\"; raise ImportError(_cell_error)\n","    if not libs_loaded.get('pandas') or not libs_loaded.get('yfinance'):\n","         _cell_status = \"失敗\"; _cell_error = f\"依賴錯誤：Cell 1 未能成功載入 pandas 或 yfinance。\"; raise ImportError(_cell_error)\n","\n","    # 檢查來自 Cell 1 和 Cell 3 的必要全局變數\n","    if 'PROJECT_CONFIG' not in globals() or not isinstance(PROJECT_CONFIG, dict):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 PROJECT_CONFIG。\"; raise NameError(_cell_error)\n","    if 'validated_start_dt' not in globals() or not isinstance(validated_start_dt, pd.Timestamp):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 3 的有效 validated_start_dt。\"; raise NameError(_cell_error)\n","    if 'validated_end_dt' not in globals() or not isinstance(validated_end_dt, pd.Timestamp):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 3 的有效 validated_end_dt。\"; raise NameError(_cell_error)\n","\n","    start_dt = validated_start_dt\n","    end_dt = validated_end_dt\n","    start_date_str = start_dt.strftime('%Y-%m-%d') # 格式化為字串供 yfinance 使用\n","    end_date_str = end_dt.strftime('%Y-%m-%d')     # 格式化為字串供 yfinance 使用\n","    _cell_inputs['start_date'] = start_date_str\n","    _cell_inputs['end_date'] = end_date_str\n","    _cell_notes.append(f\"使用日期範圍: {start_date_str} 到 {end_date_str}\")\n","    print(f\"  - 步驟 0: 依賴檢查通過。使用日期範圍: {start_date_str} 到 {end_date_str}\")\n","\n","    # --- 1. 抓取 MOVE 指數數據 ---\n","    print(\"\\n  - 步驟 1: 抓取 MOVE 指數 (^MOVE)...\")\n","    logger.info(\"步驟 1: 抓取 MOVE 指數數據...\")\n","    move_ticker_symbol = '^MOVE'\n","    vol_data_source = 'Yahoo Finance (Ticker.history)'\n","    move_series = pd.Series(dtype='float64') # 用於儲存 MOVE 數據\n","    move_ok = False\n","    _cell_inputs['move_ticker'] = move_ticker_symbol\n","\n","    try:\n","        print(f\"    - 正在請求 {move_ticker_symbol} 數據...\")\n","        move_ticker = yf.Ticker(move_ticker_symbol)\n","        move_data_yf = move_ticker.history(start=start_date_str, end=end_date_str)\n","\n","        if not move_data_yf.empty and 'Close' in move_data_yf.columns:\n","            temp_series = move_data_yf['Close']\n","            if not temp_series.empty:\n","                temp_series = pd.to_numeric(temp_series, errors='coerce').dropna()\n","                if not temp_series.empty:\n","                    move_series = temp_series\n","                    # 移除時區信息\n","                    move_series.index = pd.to_datetime(move_series.index).tz_localize(None)\n","                    move_ok = True\n","                    _cell_notes.append(f\"成功抓取並處理了 {len(move_series)} 筆有效的 {move_ticker_symbol} 數據。\")\n","                    print(f\"    > 成功抓取 {len(move_series)} 筆 {move_ticker_symbol} 數據。\")\n","        # 處理未成功抓取的情況\n","        if not move_ok:\n","             if move_data_yf.empty:\n","                  msg = f\"yf.Ticker('{move_ticker_symbol}').history() 返回了空的 DataFrame。\"\n","             elif 'Close' not in move_data_yf.columns:\n","                  msg = f\"返回的 {move_ticker_symbol} 數據缺少 'Close' 欄位。\"\n","             else:\n","                  msg = f\"{move_ticker_symbol} 數據處理後為空或無效。\"\n","             _cell_warnings.append(f\"抓取 MOVE 指數警告：{msg}\")\n","             print(f\"    > 警告：{msg}\")\n","\n","    except Exception as e_yf_move:\n","        _cell_warnings.append(f\"抓取 MOVE 指數錯誤: {e_yf_move}\")\n","        print(f\"    > 錯誤：抓取 {move_ticker_symbol} 失敗: {e_yf_move}\")\n","        logger.error(f\"抓取 {move_ticker_symbol} 失敗\", exc_info=True)\n","        # 不設置 _cell_status = \"失敗\"，允許 ETF 繼續嘗試\n","\n","    _cell_outputs['move_fetch_successful'] = move_ok\n","    _cell_outputs['move_data_points'] = len(move_series) if move_ok else 0\n","\n","    # --- 2. 抓取長天期公債 ETF 數據 (可選) ---\n","    print(\"\\n  - 步驟 2: 檢查並抓取長債 ETF 數據...\")\n","    logger.info(\"步驟 2: 檢查並抓取長債 ETF 數據...\")\n","    enable_etf = PROJECT_CONFIG.get('enable_lt_bond_etf_plot', False)\n","    etf_ticker = PROJECT_CONFIG.get('lt_bond_etf_ticker', '').strip().upper()\n","    etf_series = pd.Series(dtype='float64') # 用於儲存 ETF 數據\n","    etf_ok = False\n","    etf_col_name = None\n","    _cell_inputs['enable_lt_bond_etf_plot'] = enable_etf\n","    _cell_inputs['lt_bond_etf_ticker_config'] = etf_ticker\n","\n","    if enable_etf and etf_ticker:\n","        etf_col_name = f'ETF_{etf_ticker}_Price' # 動態生成列名\n","        _cell_notes.append(f\"嘗試抓取 ETF: {etf_ticker}\")\n","        print(f\"    - 設定啟用，嘗試抓取 ETF: {etf_ticker}...\")\n","        try:\n","            etf_ticker_obj = yf.Ticker(etf_ticker)\n","            etf_data_yf = etf_ticker_obj.history(start=start_date_str, end=end_date_str)\n","\n","            if not etf_data_yf.empty and 'Close' in etf_data_yf.columns:\n","                temp_series_etf = etf_data_yf['Close']\n","                if not temp_series_etf.empty:\n","                    temp_series_etf = pd.to_numeric(temp_series_etf, errors='coerce').dropna()\n","                    if not temp_series_etf.empty:\n","                        etf_series = temp_series_etf\n","                        # 移除時區信息\n","                        etf_series.index = pd.to_datetime(etf_series.index).tz_localize(None)\n","                        etf_ok = True\n","                        _cell_notes.append(f\"成功抓取並處理了 {len(etf_series)} 筆有效的 {etf_ticker} 數據。\")\n","                        print(f\"    > 成功抓取 {len(etf_series)} 筆 {etf_ticker} 數據。\")\n","            # 處理未成功抓取的情況\n","            if not etf_ok:\n","                 if etf_data_yf.empty:\n","                      msg = f\"yf.Ticker('{etf_ticker}').history() 返回了空的 DataFrame。\"\n","                 elif 'Close' not in etf_data_yf.columns:\n","                      msg = f\"返回的 {etf_ticker} ETF 數據缺少 'Close' 欄位。\"\n","                 else:\n","                      msg = f\"{etf_ticker} ETF 數據處理後為空或無效。\"\n","                 _cell_warnings.append(f\"抓取 ETF 警告：{msg}\")\n","                 print(f\"    > 警告：{msg}\")\n","\n","        except Exception as e_yf_etf:\n","            _cell_warnings.append(f\"抓取 ETF {etf_ticker} 錯誤: {e_yf_etf}\")\n","            print(f\"    > 錯誤：抓取 ETF {etf_ticker} 失敗: {e_yf_etf}\")\n","            logger.error(f\"抓取 ETF {etf_ticker} 失敗\", exc_info=True)\n","    elif not enable_etf:\n","        _cell_notes.append(\"長債 ETF 圖表未啟用，跳過抓取。\")\n","        print(\"    - 長債 ETF 未啟用，跳過抓取。\")\n","    else: # enable_etf is True but etf_ticker is empty\n","        _cell_warnings.append(\"長債 ETF 已啟用，但未指定有效的 Ticker。\")\n","        print(\"    - 警告：長債 ETF 已啟用，但未指定有效的 Ticker。\")\n","\n","    _cell_outputs['etf_fetch_successful'] = etf_ok\n","    _cell_outputs['etf_data_points'] = len(etf_series) if etf_ok else 0\n","    _cell_outputs['etf_column_name'] = etf_col_name if etf_ok else None\n","\n","    # --- 3. 合併數據到 yahoo_data_df ---\n","    print(\"\\n  - 步驟 3: 合併抓取的數據...\")\n","    logger.info(\"步驟 3: 合併抓取的數據...\")\n","    # 創建一個空的 DataFrame，使用業務日索引以便後續合併\n","    business_day_index = pd.date_range(start=start_dt, end=end_dt, freq='B')\n","    yahoo_data_df_temp = pd.DataFrame(index=business_day_index)\n","\n","    data_merged = False\n","    if move_ok:\n","        yahoo_data_df_temp['MOVE_Close'] = move_series.reindex(business_day_index, method='ffill')\n","        _cell_notes.append(\"MOVE 指數數據已合併。\")\n","        data_merged = True\n","    else:\n","        yahoo_data_df_temp['MOVE_Close'] = np.nan # 確保列存在\n","        _cell_notes.append(\"MOVE 指數數據抓取失敗，以 NaN 合併。\")\n","\n","    if etf_ok and etf_col_name:\n","        yahoo_data_df_temp[etf_col_name] = etf_series.reindex(business_day_index, method='ffill')\n","        _cell_notes.append(f\"{etf_ticker} ETF 數據已合併。\")\n","        data_merged = True\n","    elif enable_etf and etf_ticker and not etf_ok: # 如果嘗試抓取但失敗\n","        etf_col_name_fallback = f'ETF_{etf_ticker}_Price' # 確保列名存在\n","        yahoo_data_df_temp[etf_col_name_fallback] = np.nan\n","        _cell_notes.append(f\"{etf_ticker} ETF 數據抓取失敗，以 NaN 合併。\")\n","    # else: ETF 未啟用或 Ticker 無效，不添加列\n","\n","    if data_merged and not yahoo_data_df_temp.empty:\n","        yahoo_data_df = yahoo_data_df_temp # 賦值給全局變數\n","        _cell_outputs['output_dataframe_shape'] = yahoo_data_df.shape\n","        _cell_outputs['output_dataframe_columns'] = yahoo_data_df.columns.tolist()\n","        _cell_outputs['output_dataframe_valid_points'] = int(yahoo_data_df.count().sum())\n","        print(\"    > MOVE 指數和 ETF 數據已成功合併到 yahoo_data_df。\")\n","        logger.info(\"Yahoo Finance 數據合併完成。\")\n","    elif not data_merged:\n","        _cell_warnings.append(\"未能成功抓取任何 Yahoo Finance 數據。\")\n","        print(\"    > 警告：未能成功抓取任何 Yahoo Finance 數據。\")\n","        yahoo_data_df = pd.DataFrame(index=business_day_index) # 創建空 DataFrame\n","        _cell_outputs['output_dataframe_shape'] = yahoo_data_df.shape\n","        _cell_outputs['output_dataframe_columns'] = []\n","        _cell_outputs['output_dataframe_valid_points'] = 0\n","\n","\n","    # --- 標記 Cell 5 執行狀態 ---\n","    if _cell_status == \"處理中\": # 如果前面沒有設置為失敗\n","        _cell_status = \"成功\"\n","        if not move_ok: # 如果 MOVE 抓取失敗，視為有警告\n","             _cell_warnings.append(\"核心指標 MOVE 指數未能成功抓取。\")\n","             _cell_status = \"成功 (有警告)\"\n","        elif _cell_warnings: # 如果有其他警告\n","             _cell_status = \"成功 (有警告)\"\n","    logger.info(f\"{_cell_identifier} - Yahoo Finance 數據抓取與處理完成，狀態: {_cell_status}\")\n","\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError) as e:\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗。\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    # 打印報告\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.0) **執行總結報告**\")\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    outputs_display['output_dataframe_exists'] = '是' if yahoo_data_df is not None else '否'\n","    if yahoo_data_df is not None:\n","        outputs_display['output_dataframe_type'] = str(type(yahoo_data_df))\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del start_dt, end_dt, start_date_str, end_date_str, move_ticker_symbol\n","    except NameError: pass\n","    try: del vol_data_source, move_series, move_ok, enable_etf, etf_ticker\n","    except NameError: pass\n","    try: del etf_series, etf_ok, etf_col_name, business_day_index, yahoo_data_df_temp\n","    except NameError: pass\n","    try: del data_merged, move_ticker, move_data_yf, temp_series, msg\n","    except NameError: pass\n","    try: del etf_ticker_obj, etf_data_yf, temp_series_etf, etf_col_name_fallback\n","    except NameError: pass\n","    try: del outputs_display, missing_libs # 清理新增的變數\n","    except NameError: pass\n","    # yahoo_data_df 需要保留為全局\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 5: 抓取額外市場數據 (Yahoo Finance)\n","# 功能: 從 Yahoo Finance 抓取 MOVE 指數和 (可選的) 長債 ETF 數據。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 3']\n","# 輸入: ['global:PROJECT_CONFIG', 'global:validated_start_dt', 'global:validated_end_dt', 'global:libs_loaded']\n","# 輸出: ['global:yahoo_data_df']\n","# =================================================="],"metadata":{"cellView":"form","colab":{"base_uri":"https://localhost:8080/"},"id":"moDyqZVWRU7l","executionInfo":{"status":"ok","timestamp":1746593418470,"user_tz":-480,"elapsed":1106,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"5d57ffee-5170-4849-b786-169b691a9adc"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:16,942 - __main__ - INFO - Cell 5: 抓取額外市場數據 (Yahoo Finance) - 開始執行...\n","2025-05-07 04:50:16,945 - __main__ - INFO - 步驟 1: 抓取 MOVE 指數數據...\n"]},{"output_type":"stream","name":"stdout","text":["Yahoo Finance 數據抓取所需函式庫 (pandas, numpy, yfinance) 看似可用。\n","\n","--- Cell 5: 抓取額外市場數據 (Yahoo Finance) (v1.0) 開始執行 ---\n","  - 步驟 0: 依賴檢查通過。使用日期範圍: 2018-01-01 到 2025-05-07\n","\n","  - 步驟 1: 抓取 MOVE 指數 (^MOVE)...\n","    - 正在請求 ^MOVE 數據...\n"]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:17,449 - __main__ - INFO - 步驟 2: 檢查並抓取長債 ETF 數據...\n"]},{"output_type":"stream","name":"stdout","text":["    > 成功抓取 1827 筆 ^MOVE 數據。\n","\n","  - 步驟 2: 檢查並抓取長債 ETF 數據...\n","    - 設定啟用，嘗試抓取 ETF: TLT...\n"]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:17,841 - __main__ - INFO - 步驟 3: 合併抓取的數據...\n","2025-05-07 04:50:17,940 - __main__ - INFO - Yahoo Finance 數據合併完成。\n","2025-05-07 04:50:17,953 - __main__ - INFO - Cell 5: 抓取額外市場數據 (Yahoo Finance) - Yahoo Finance 數據抓取與處理完成，狀態: 成功\n"]},{"output_type":"stream","name":"stdout","text":["    > 成功抓取 1846 筆 TLT 數據。\n","\n","  - 步驟 3: 合併抓取的數據...\n","    > MOVE 指數和 ETF 數據已成功合併到 yahoo_data_df。\n","\n","================================================================================\n","儲存格: Cell 5: 抓取額外市場數據 (Yahoo Finance) (v1.0) **執行總結報告**\n","**狀態:** ✅ 成功\n","**執行時間:** 1.02 秒\n","**完成時間:** 2025-05-07 12:50:17 CST+0800\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'start_date': '2018-01-01',\n","  'end_date': '2025-05-07',\n","  'move_ticker': '^MOVE',\n","  'enable_lt_bond_etf_plot': True,\n","  'lt_bond_etf_ticker_config': 'TLT'}\n","\n","**📝 執行註記:**\n","- 使用日期範圍: 2018-01-01 到 2025-05-07\n","- 成功抓取並處理了 1827 筆有效的 ^MOVE 數據。\n","- 嘗試抓取 ETF: TLT\n","- 成功抓取並處理了 1846 筆有效的 TLT 數據。\n","- MOVE 指數數據已合併。\n","- TLT ETF 數據已合併。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'move_fetch_successful': True,\n","  'move_data_points': 1827,\n","  'etf_fetch_successful': True,\n","  'etf_data_points': 1846,\n","  'etf_column_name': 'ETF_TLT_Price',\n","  'output_dataframe_shape': (1918, 2),\n","  'output_dataframe_columns': ['MOVE_Close', 'ETF_TLT_Price'],\n","  'output_dataframe_valid_points': 3834,\n","  'output_dataframe_exists': '是',\n","  'output_dataframe_type': \"<class 'pandas.core.frame.DataFrame'>\"}\n","================================================================================\n","\n"]}]},{"cell_type":"code","source":["\n","# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.0 (Cell 6 - 抓取並處理 NY Fed 持有量)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 6: 抓取並處理 NY Fed 持有量\n","# --------------------------------------------------\n","# 功能: 從全局配置獲取 NY Fed API URL 列表。循環下載、解析 Excel 文件，\n","#       根據 SBN/SBP 規則加總相關欄位，合併不同時間段數據，\n","#       最終輸出合併後的一級交易商公債持有量時間序列 (單位: 百萬美元)。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1']\n","# 輸入: ['global:PROJECT_CONFIG', 'global:libs_loaded']\n","# 輸出: ['global:nyfed_positions_series'] (包含持有量數據的 Series)\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1 是否成功執行，確保 `PROJECT_CONFIG` 可用，\n","#   且 `pandas`, `requests`, `openpyxl`, `io` 庫已載入。\n","# * **獲取 URLs**: 從 `PROJECT_CONFIG` 讀取 NY Fed Excel 文件的 URL 列表。\n","# * **循環處理文件**:\n","#   * 遍歷 URL 列表。\n","#   * **下載**: 使用 `requests.Session` 下載 Excel 文件內容到記憶體 (`io.BytesIO`)。\n","#     設置 User-Agent 和超時。處理下載錯誤。\n","#   * **解析**: 嘗試自動檢測表頭行 (header) 和日期列，讀取 Excel。處理解析錯誤。\n","#   * **清理 (長格式)**: 轉換日期索引，處理無效值。\n","#   * **轉換 (寬格式)**: 使用 `pivot_table` 將數據從長格式轉為寬格式。處理重複項。\n","#   * **識別加總列**: 根據 URL 中的 'SBN' 或 'SBP' 及年份，從 `PROJECT_CONFIG`\n","#     獲取應加總的欄位列表。\n","#   * **加總**: 僅加總實際存在於 DataFrame 中的目標欄位。處理數值轉換錯誤。\n","#     計算行總和 (`axis=1`)。\n","#   * **清理結果**: 移除加總結果中的 NaN 和 0 值。\n","#   * **儲存單檔結果**: 將有效的加總 Series 添加到列表 `all_positions_data`。\n","# * **合併最終結果**:\n","#   * 使用 `pd.concat` 合併所有文件的 Series。\n","#   * 按日期排序。\n","#   * 使用 `groupby(level=0).last()` 處理重疊日期的數據（保留最新的）。\n","#   * 將最終的 Series 賦值給全局變數 `nyfed_positions_series`。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將 NY Fed 數據的獲取和複雜處理邏輯封裝在此儲存格。\n","# * 考慮到 NY Fed 文件格式可能變化，加入自動檢測表頭和日期列的邏輯。\n","# * 明確區分 SBN 和 SBP 文件的處理規則，並從配置讀取加總欄位。\n","# * 使用 `requests.Session` 提高效率並模擬瀏覽器行為。\n","# * 包含詳細的錯誤處理和警告訊息。\n","# * 最終輸出一個乾淨、合併後的時間序列。\n","# * **警告**: 合併了定義可能不同的 SBN (Gross?) 和 SBP (Net?) 數據，\n","#   解釋結果時需特別謹慎。\n","#\n","# ## 重要假設：\n","# * Cell 1 已成功執行。\n","# * `pandas`, `requests`, `openpyxl` 函式庫已成功載入。\n","# * `io` 模組可用。\n","# * `PROJECT_CONFIG` 中包含正確的 URL 列表和 SBP 加總欄位定義。\n","# * 執行環境具有訪問 NY Fed 網站的網路連線。\n","#\n","# ## 主要輸出/狀態變更：\n","# * `global:nyfed_positions_series` (pd.Series): 包含合併和清理後的\n","#   一級交易商持有量時間序列 (索引為日期，值為百萬美元)。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 6) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 此過程可能耗時較長，因為需要下載多個文件。\n","# * 檢查執行報告中的警告，確認是否有文件處理失敗或數據缺失。\n","# * **後續步驟:** 執行 **Cell 7: 合併所有數據源**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","import io # 用於處理記憶體中的二進制數據\n","\n","# --- 第三方庫導入 ---\n","# 假設 Cell 1 已確保這些庫可用，但為防萬一再次檢查\n","try:\n","    import pandas as pd\n","    import numpy as np # 需要 numpy 來處理 NaN\n","    import requests\n","    # openpyxl 在 Cell 1 已導入，pandas 讀取 excel 時會用到\n","    print(\"NY Fed 數據處理所需函式庫 (pandas, numpy, requests, openpyxl, io) 看似可用。\")\n","except ImportError as e:\n","    print(f\"警告：導入 NY Fed 數據處理所需函式庫失敗({e})。\")\n","    pd = None\n","    np = None\n","    requests = None\n","    # io 是標準庫，通常不需要檢查\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 6: 抓取並處理 NY Fed 持有量\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {}\n","_cell_generated_files = []\n","\n","# --- 全局變數定義 (此 Cell 的主要輸出) ---\n","global nyfed_positions_series\n","nyfed_positions_series = None # 初始化為 None\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.0) 開始執行 ---\")\n","    print(\"*** 警告：此步驟將合併定義可能不同的 SBN(Gross?) 和 SBP(Net?) 數據！解釋需謹慎！ ***\")\n","    _cell_warnings.append(\"合併了定義可能不同的 SBN(Gross?) 和 SBP(Net?) 數據，解釋需謹慎。\")\n","\n","    # 檢查必要的函式庫\n","    if not pd or not np or not requests or 'libs_loaded' not in globals():\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：缺少 pandas, numpy, requests 函式庫或 Cell 1 未成功執行。\"; raise ImportError(_cell_error)\n","    if not libs_loaded.get('pandas') or not libs_loaded.get('requests') or not libs_loaded.get('openpyxl'):\n","         _cell_status = \"失敗\"; _cell_error = f\"依賴錯誤：Cell 1 未能成功載入 pandas, requests 或 openpyxl。\"; raise ImportError(_cell_error)\n","\n","    # 檢查來自 Cell 1 的必要全局變數\n","    if 'PROJECT_CONFIG' not in globals() or not isinstance(PROJECT_CONFIG, dict):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 PROJECT_CONFIG。\"; raise NameError(_cell_error)\n","\n","    # 獲取 URLs 和 SBP 配置\n","    ny_fed_urls = PROJECT_CONFIG.get('ny_fed_positions_urls', [])\n","    sbp2013_cols = PROJECT_CONFIG.get('sbp2013_cols_to_sum', [])\n","    sbp2001_cols = PROJECT_CONFIG.get('sbp2001_cols_to_sum', [])\n","\n","    if not ny_fed_urls:\n","        _cell_status = \"失敗\"; _cell_error = \"配置錯誤：PROJECT_CONFIG 中未找到 'ny_fed_positions_urls'。\"; raise ValueError(_cell_error)\n","    if not sbp2013_cols or not sbp2001_cols:\n","        _cell_warnings.append(\"警告：PROJECT_CONFIG 中未找到 SBP 欄位加總配置 ('sbp2013_cols_to_sum' 或 'sbp2001_cols_to_sum')。\")\n","        # 允許繼續，但 SBP 文件可能無法處理\n","\n","    _cell_inputs['ny_fed_urls_count'] = len(ny_fed_urls)\n","    _cell_inputs['sbp2013_cols_config'] = sbp2013_cols\n","    _cell_inputs['sbp2001_cols_config'] = sbp2001_cols\n","    _cell_notes.append(f\"準備處理 {len(ny_fed_urls)} 個 NY Fed Excel 文件。\")\n","    print(f\"  - 步驟 0: 依賴檢查通過。準備處理 {len(ny_fed_urls)} 個 NY Fed 文件。\")\n","\n","    # --- 1. 循環處理每個 URL ---\n","    all_positions_data = [] # 儲存從各個文件讀取的 Series\n","    positions_fetch_success = False # 總體是否成功標誌\n","    processed_files_count = 0\n","    failed_files = []\n","\n","    # 創建 Session 以便重用連接和設置 User-Agent\n","    session = requests.Session()\n","    session.headers.update({\n","        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'\n","    })\n","\n","    print(\"  - 步驟 1: 開始循環處理 NY Fed 文件...\")\n","    logger.info(\"步驟 1: 開始循環處理 NY Fed 文件...\")\n","    for i, url in enumerate(ny_fed_urls):\n","        file_source_name = url.split('/')[-3] if len(url.split('/')) > 2 else f\"File_{i+1}\"\n","        print(f\"\\n    處理文件 {i+1}/{len(ny_fed_urls)} ({file_source_name})...\")\n","        logger.info(f\"處理文件 {i+1}/{len(ny_fed_urls)}: {url}\")\n","        file_processed_successfully = False # 標記單個文件是否成功\n","\n","        try:\n","            # --- 1a. 下載 Excel 文件 ---\n","            print(\"      - 正在下載...\", end=\"\")\n","            response_excel = session.get(url, timeout=120) # 增加超時時間\n","            response_excel.raise_for_status() # 檢查 HTTP 錯誤\n","            excel_content = io.BytesIO(response_excel.content)\n","            print(\" 完成.\")\n","            _cell_notes.append(f\"文件 {file_source_name}: 下載成功。\")\n","\n","            # --- 1b. 解析 Excel (自動檢測表頭) ---\n","            print(\"      - 正在解析 (嘗試自動檢測表頭)...\", end=\"\")\n","            header_row = None; date_col_name = None; data_positions_long = None\n","\n","            # 優先嘗試常見的表頭行號\n","            possible_headers = [3, 4, 0]\n","            for h in possible_headers:\n","                try:\n","                    # 嘗試讀取少量行來判斷格式\n","                    df_peek = pd.read_excel(excel_content, header=h, nrows=5, engine='openpyxl')\n","                    excel_content.seek(0) # 重置指針\n","\n","                    # 檢查是否存在必要的列名 (或類似名稱)\n","                    cols_lower = [str(c).lower() for c in df_peek.columns]\n","                    time_series_col = None\n","                    value_col = None\n","                    date_col_candidate = None\n","\n","                    # 查找 Time Series 列\n","                    if 'time series' in cols_lower: time_series_col = df_peek.columns[cols_lower.index('time series')]\n","                    # 查找 Value 列\n","                    if 'value (millions)' in cols_lower: value_col = df_peek.columns[cols_lower.index('value (millions)')]\n","                    elif 'value' in cols_lower: value_col = df_peek.columns[cols_lower.index('value')]\n","\n","                    # 查找日期列 (優先 'effective date', 其次第一列)\n","                    if 'effective date' in cols_lower: date_col_candidate = df_peek.columns[cols_lower.index('effective date')]\n","                    elif len(df_peek.columns) > 0: date_col_candidate = df_peek.columns[0] # 假設第一列是日期\n","\n","                    # 如果找到了必要的列，則認為此 header 有效\n","                    if time_series_col and value_col and date_col_candidate:\n","                        header_row = h\n","                        date_col_name = date_col_candidate\n","                        # 使用檢測到的列名讀取完整文件\n","                        data_positions_long = pd.read_excel(excel_content, header=header_row,\n","                                                            index_col=date_col_name, parse_dates=True,\n","                                                            engine='openpyxl')\n","                        print(f\" (檢測到有效表頭在第 {header_row+1} 行, 日期列: '{date_col_name}')\")\n","                        _cell_notes.append(f\"文件 {file_source_name}: 成功檢測到表頭行 {header_row}。\")\n","                        break # 找到有效的表頭，跳出循環\n","                except Exception as peek_err:\n","                    # print(f\" (嘗試 header={h} 失敗: {peek_err})\", end=\"\") # Debugging\n","                    excel_content.seek(0) # 出錯也要重置指針\n","                    continue # 繼續嘗試下一個 header\n","\n","            if data_positions_long is None:\n","                warn_msg = f\"文件 {file_source_name}: 無法自動檢測有效的表頭行或日期/數值列。跳過此文件。\"\n","                _cell_warnings.append(warn_msg)\n","                print(f\"\\n      - 錯誤：{warn_msg}\")\n","                failed_files.append(f\"{file_source_name} (解析失敗)\")\n","                continue # 處理下一個文件\n","\n","            # --- 1c. 清理長格式數據 ---\n","            print(\"      - 正在清理長格式數據...\", end=\"\")\n","            # 確保索引是 DatetimeIndex 並標準化\n","            if not isinstance(data_positions_long.index, pd.DatetimeIndex):\n","                 data_positions_long.index = pd.to_datetime(data_positions_long.index, errors='coerce')\n","                 data_positions_long.dropna(subset=[data_positions_long.index.name], inplace=True) # 移除轉換失敗的行\n","            data_positions_long.index = data_positions_long.index.normalize()\n","\n","            # 找到實際的 Time Series 和 Value 列名 (大小寫可能不同)\n","            actual_ts_col = None; actual_val_col = None\n","            cols_lower_full = [str(c).lower() for c in data_positions_long.columns]\n","            if 'time series' in cols_lower_full: actual_ts_col = data_positions_long.columns[cols_lower_full.index('time series')]\n","            if 'value (millions)' in cols_lower_full: actual_val_col = data_positions_long.columns[cols_lower_full.index('value (millions)')]\n","            elif 'value' in cols_lower_full: actual_val_col = data_positions_long.columns[cols_lower_full.index('value')]\n","\n","            if not actual_ts_col or not actual_val_col:\n","                warn_msg = f\"文件 {file_source_name}: 清理後缺少 'Time Series' 或 'Value' 欄位。跳過。\"\n","                _cell_warnings.append(warn_msg)\n","                print(f\" 錯誤：{warn_msg}\")\n","                failed_files.append(f\"{file_source_name} (欄位缺失)\")\n","                continue\n","\n","            # 轉換數值列\n","            data_positions_long[actual_val_col] = pd.to_numeric(data_positions_long[actual_val_col], errors='coerce')\n","            # 移除數值無效或 Time Series 為空的行\n","            initial_rows = len(data_positions_long)\n","            data_positions_long.dropna(subset=[actual_val_col, actual_ts_col], inplace=True)\n","            rows_dropped = initial_rows - len(data_positions_long)\n","            print(f\" 完成 (移除 {rows_dropped} 行無效數據)。\")\n","\n","            if data_positions_long.empty:\n","                warn_msg = f\"文件 {file_source_name}: 清理後無有效數據。跳過。\"\n","                _cell_warnings.append(warn_msg)\n","                print(f\"      - 警告：{warn_msg}\")\n","                failed_files.append(f\"{file_source_name} (無有效數據)\")\n","                continue\n","\n","            # --- 1d. 轉換為寬格式 ---\n","            print(\"      - 正在轉換為寬格式...\", end=\"\")\n","            try:\n","                # 重置索引以將日期變為列，方便後續 pivot\n","                data_positions_long.reset_index(inplace=True)\n","                date_col_actual = data_positions_long.columns[0] # 獲取重置後的日期列名\n","\n","                # 處理可能的重複項 (同一天同一序列可能有多行)\n","                data_positions_long = data_positions_long.groupby(\n","                    [date_col_actual, actual_ts_col]\n","                )[actual_val_col].mean().reset_index()\n","\n","                # Pivot\n","                data_positions_wide = pd.pivot_table(\n","                    data_positions_long,\n","                    index=date_col_actual,\n","                    columns=actual_ts_col,\n","                    values=actual_val_col,\n","                    aggfunc='mean' # 理論上已處理重複，但保留以防萬一\n","                )\n","                print(f\" 成功 ({len(data_positions_wide)} 行 x {len(data_positions_wide.columns)} 欄)。\")\n","            except Exception as e_pivot:\n","                warn_msg = f\"文件 {file_source_name}: 轉換寬格式失敗: {e_pivot}。跳過。\"\n","                _cell_warnings.append(warn_msg)\n","                print(f\" 錯誤：{warn_msg}\")\n","                _cell_traceback = _cell_traceback or traceback.format_exc()\n","                failed_files.append(f\"{file_source_name} (Pivot失敗)\")\n","                continue\n","\n","            # --- 1e. 加總持有量 ---\n","            if not data_positions_wide.empty:\n","                target_cols = []; source_type = \"未知\"\n","                if 'SBN' in url:\n","                     source_type = \"SBN\"\n","                     target_cols = [c for c in data_positions_wide.columns if isinstance(c, str) and c.startswith('PDPOSGSC-')]\n","                elif 'SBP2013' in url:\n","                     source_type = \"SBP2013\"; target_cols = sbp2013_cols\n","                elif 'SBP2001' in url:\n","                     source_type = \"SBP2001\"; target_cols = sbp2001_cols\n","\n","                if not target_cols:\n","                     warn_msg = f\"文件 {file_source_name}: 未找到用於加總的目標欄位規則 ({source_type})。跳過加總。\"\n","                     _cell_warnings.append(warn_msg)\n","                     print(f\"      - 警告：{warn_msg}\")\n","                     failed_files.append(f\"{file_source_name} (無加總規則)\")\n","                     continue\n","\n","                cols_to_sum_actual = [c for c in target_cols if c in data_positions_wide.columns]\n","\n","                if not cols_to_sum_actual:\n","                     warn_msg = f\"文件 {file_source_name}: 未找到任何預期的目標欄位 ({source_type})。跳過加總。\"\n","                     _cell_warnings.append(warn_msg)\n","                     print(f\"      - 錯誤：{warn_msg}\")\n","                     failed_files.append(f\"{file_source_name} (無目標欄位)\")\n","                     continue\n","\n","                if len(cols_to_sum_actual) < len(target_cols):\n","                     missing_cols = set(target_cols) - set(cols_to_sum_actual)\n","                     warn_msg = f\"文件 {file_source_name}: 部分目標欄位未找到: {missing_cols}\"\n","                     _cell_warnings.append(warn_msg)\n","                     print(f\"      - 警告：{warn_msg}\")\n","\n","                print(f\"      - 正在加總 {len(cols_to_sum_actual)} 個欄位 ({source_type}, 單位: 百萬美元)...\", end=\"\")\n","                try:\n","                    # 確保參與加總的列是數值類型\n","                    for col in cols_to_sum_actual:\n","                        data_positions_wide[col] = pd.to_numeric(data_positions_wide[col], errors='coerce')\n","\n","                    # 加總，忽略 NaN (sum 默認 skipna=True)\n","                    daily_total_millions = data_positions_wide[cols_to_sum_actual].sum(axis=1, skipna=True)\n","\n","                    # 清理：移除 NaN 和 0 值\n","                    original_count_before_drop = len(daily_total_millions)\n","                    daily_total_millions = daily_total_millions.dropna()\n","                    daily_total_millions = daily_total_millions[daily_total_millions != 0]\n","                    dropped_count = original_count_before_drop - len(daily_total_millions)\n","\n","                    if not daily_total_millions.empty:\n","                         all_positions_data.append(daily_total_millions)\n","                         positions_fetch_success = True # 標記至少有一個文件成功\n","                         file_processed_successfully = True\n","                         processed_files_count += 1\n","                         print(f\" 完成 ({len(daily_total_millions)} 筆有效數據, 移除 {dropped_count} 筆 NaN/零值).\")\n","                         _cell_notes.append(f\"文件 {file_source_name}: 成功加總並清理，獲得 {len(daily_total_millions)} 筆數據。\")\n","                    else:\n","                         warn_msg = f\"文件 {file_source_name}: 加總後未能計算出有效的非零數據。跳過。\"\n","                         _cell_warnings.append(warn_msg)\n","                         print(f\" 警告：{warn_msg}\")\n","                         failed_files.append(f\"{file_source_name} (加總後無數據)\")\n","                except Exception as e_sum:\n","                    warn_msg = f\"文件 {file_source_name}: 加總欄位時出錯: {e_sum}。跳過。\"\n","                    _cell_warnings.append(warn_msg)\n","                    print(f\" 錯誤：{warn_msg}\")\n","                    _cell_traceback = _cell_traceback or traceback.format_exc()\n","                    failed_files.append(f\"{file_source_name} (加總失敗)\")\n","                    continue\n","\n","        except requests.exceptions.RequestException as e_req:\n","            warn_msg = f\"文件 {file_source_name}: 下載失敗: {e_req}。跳過。\"\n","            _cell_warnings.append(warn_msg)\n","            print(f\"\\n      - 錯誤：{warn_msg}\")\n","            failed_files.append(f\"{file_source_name} (下載失敗)\")\n","        except Exception as e_file: # 捕獲處理單個文件的其他錯誤\n","            warn_msg = f\"文件 {file_source_name}: 處理時發生未預期錯誤: {e_file}。跳過。\"\n","            _cell_warnings.append(warn_msg)\n","            print(f\"\\n      - 錯誤：{warn_msg}\")\n","            _cell_traceback = _cell_traceback or traceback.format_exc() # 只記錄第一個 traceback\n","            failed_files.append(f\"{file_source_name} (未知錯誤)\")\n","\n","    print(\"\\n  - 步驟 1: 文件處理循環結束。\")\n","    logger.info(f\"文件處理循環結束。成功處理 {processed_files_count}/{len(ny_fed_urls)} 個文件。\")\n","\n","    # --- 2. 合併所有文件的持有量數據 ---\n","    print(\"  - 步驟 2: 合併所有成功處理的文件數據...\")\n","    logger.info(\"步驟 2: 合併數據...\")\n","    if all_positions_data:\n","        try:\n","            combined_positions = pd.concat(all_positions_data)\n","            combined_positions = combined_positions.sort_index()\n","            # 處理重疊日期，保留最後（通常是最新）的值\n","            final_series = combined_positions.groupby(level=0).last()\n","            final_series.name = 'Total_Gross_Positions_Millions' # 命名 Series\n","            # 再次確保沒有 NaN 或 0\n","            final_series = final_series.dropna()\n","            final_series = final_series[final_series != 0]\n","\n","            if not final_series.empty:\n","                nyfed_positions_series = final_series # 賦值給全局變數\n","                _cell_outputs['output_series_shape'] = nyfed_positions_series.shape\n","                _cell_outputs['output_series_start'] = nyfed_positions_series.index.min().strftime('%Y-%m-%d')\n","                _cell_outputs['output_series_end'] = nyfed_positions_series.index.max().strftime('%Y-%m-%d')\n","                _cell_outputs['output_series_valid_points'] = int(nyfed_positions_series.count())\n","                _cell_notes.append(f\"成功合併 {processed_files_count} 個文件的持有量數據，最終得到 {len(nyfed_positions_series)} 筆有效數據。\")\n","                print(f\"    > 合併完成，最終序列包含 {len(nyfed_positions_series)} 筆數據 \"\n","                      f\"(從 {nyfed_positions_series.index.min().date()} 到 {nyfed_positions_series.index.max().date()})。\")\n","                logger.info(f\"數據合併完成，最終序列長度: {len(nyfed_positions_series)}\")\n","            else:\n","                warn_msg = \"警告：合併所有文件數據後，最終序列為空或全為零值。\"\n","                _cell_warnings.append(warn_msg)\n","                print(f\"    > {warn_msg}\")\n","                nyfed_positions_series = pd.Series(dtype='float64') # 創建空 Series\n","                positions_fetch_success = False # 標記為未成功獲取有效數據\n","        except Exception as e_concat:\n","            _cell_status = \"失敗\"\n","            _cell_error = f\"合併持有量數據時出錯: {e_concat}\"\n","            _cell_traceback = _cell_traceback or traceback.format_exc()\n","            logger.error(_cell_error, exc_info=True)\n","            nyfed_positions_series = pd.Series(dtype='float64') # 確保是空 Series\n","            positions_fetch_success = False\n","    else: # 如果 all_positions_data 列表為空\n","        warn_msg = \"錯誤：未能成功處理任何 NY Fed 持有量數據文件。\"\n","        _cell_warnings.append(warn_msg)\n","        print(f\"    > {warn_msg}\")\n","        nyfed_positions_series = pd.Series(dtype='float64') # 創建空 Series\n","        positions_fetch_success = False\n","\n","    _cell_outputs['processed_files_count'] = processed_files_count\n","    _cell_outputs['failed_files_list'] = failed_files\n","    _cell_outputs['final_series_is_valid'] = positions_fetch_success and nyfed_positions_series is not None and not nyfed_positions_series.empty\n","\n","    # --- 標記 Cell 6 執行狀態 ---\n","    if _cell_status == \"處理中\": # 如果前面沒有設置為失敗\n","        if not positions_fetch_success or nyfed_positions_series is None or nyfed_positions_series.empty:\n","             _cell_status = \"成功 (有警告)\" # 即使過程沒報錯，但沒拿到數據也算警告\n","             _cell_warnings.append(\"最終未能獲取有效的 NY Fed 持有量數據。\")\n","        elif _cell_warnings:\n","             _cell_status = \"成功 (有警告)\"\n","        else:\n","             _cell_status = \"成功\"\n","    logger.info(f\"{_cell_identifier} - NY Fed 數據處理完成，狀態: {_cell_status}\")\n","\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError, ConnectionError, RuntimeError) as e:\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗。\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    # 打印報告\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.0) **執行總結報告**\")\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    outputs_display['output_series_exists'] = '是' if nyfed_positions_series is not None else '否'\n","    if nyfed_positions_series is not None:\n","        outputs_display['output_series_type'] = str(type(nyfed_positions_series))\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del ny_fed_urls, sbp2013_cols, sbp2001_cols, all_positions_data\n","    except NameError: pass\n","    try: del positions_fetch_success, processed_files_count, failed_files, session\n","    except NameError: pass\n","    try: del i, url, file_source_name, file_processed_successfully, response_excel, excel_content\n","    except NameError: pass\n","    try: del header_row, date_col_name, data_positions_long, possible_headers, h, df_peek\n","    except NameError: pass\n","    try: del cols_lower, time_series_col, value_col, date_col_candidate, actual_ts_col, actual_val_col\n","    except NameError: pass\n","    try: del initial_rows, rows_dropped, data_positions_wide, date_col_actual, target_cols\n","    except NameError: pass\n","    try: del source_type, cols_to_sum_actual, missing_cols, col, daily_total_millions\n","    except NameError: pass\n","    try: del original_count_before_drop, dropped_count, combined_positions, final_series\n","    except NameError: pass\n","    try: del warn_msg, msg, outputs_display # 清理新增的變數\n","    except NameError: pass\n","    # nyfed_positions_series 需要保留為全局\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 6: 抓取並處理 NY Fed 持有量\n","# 功能: 下載、解析、加總並合併 NY Fed 一級交易商持有量數據。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1']\n","# 輸入: ['global:PROJECT_CONFIG', 'global:libs_loaded']\n","# 輸出: ['global:nyfed_positions_series']\n","# =================================================="],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x-p-Fa6eSGEX","executionInfo":{"status":"ok","timestamp":1746593426048,"user_tz":-480,"elapsed":7576,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"83e33078-03f0-409a-e378-1068fb150784"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:18,337 - __main__ - INFO - Cell 6: 抓取並處理 NY Fed 持有量 - 開始執行...\n","2025-05-07 04:50:18,341 - __main__ - INFO - 步驟 1: 開始循環處理 NY Fed 文件...\n","2025-05-07 04:50:18,345 - __main__ - INFO - 處理文件 1/6: https://markets.newyorkfed.org/api/pd/get/SBN2024/timeseries/PDPOSGSC-L2_PDPOSGSC-G2L3_PDPOSGSC-G3L6_PDPOSGSC-G6L7_PDPOSGSC-G7L11_PDPOSGSC-G11L21_PDPOSGSC-G21.xlsx\n"]},{"output_type":"stream","name":"stdout","text":["NY Fed 數據處理所需函式庫 (pandas, numpy, requests, openpyxl, io) 看似可用。\n","\n","--- Cell 6: 抓取並處理 NY Fed 持有量 (v1.0) 開始執行 ---\n","*** 警告：此步驟將合併定義可能不同的 SBN(Gross?) 和 SBP(Net?) 數據！解釋需謹慎！ ***\n","  - 步驟 0: 依賴檢查通過。準備處理 6 個 NY Fed 文件。\n","  - 步驟 1: 開始循環處理 NY Fed 文件...\n","\n","    處理文件 1/6 (SBN2024)...\n","      - 正在下載... 完成.\n","      - 正在解析 (嘗試自動檢測表頭)..."]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:19,715 - __main__ - INFO - 處理文件 2/6: https://markets.newyorkfed.org/api/pd/get/SBN2022/timeseries/PDPOSGSC-L2_PDPOSGSC-G2L3_PDPOSGSC-G3L6_PDPOSGSC-G6L7_PDPOSGSC-G7L11_PDPOSGSC-G11L21_PDPOSGSC-G21.xlsx\n"]},{"output_type":"stream","name":"stdout","text":[" (檢測到有效表頭在第 1 行, 日期列: 'As Of Date')\n","      - 正在清理長格式數據... 完成 (移除 0 行無效數據)。\n","      - 正在轉換為寬格式... 成功 (43 行 x 7 欄)。\n","      - 正在加總 7 個欄位 (SBN, 單位: 百萬美元)... 完成 (43 筆有效數據, 移除 0 筆 NaN/零值).\n","\n","    處理文件 2/6 (SBN2022)...\n","      - 正在下載... 完成.\n","      - 正在解析 (嘗試自動檢測表頭)..."]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:20,958 - __main__ - INFO - 處理文件 3/6: https://markets.newyorkfed.org/api/pd/get/SBN2015/timeseries/PDPOSGSC-L2_PDPOSGSC-G2L3_PDPOSGSC-G3L6_PDPOSGSC-G6L7_PDPOSGSC-G7L11_PDPOSGSC-G11.xlsx\n"]},{"output_type":"stream","name":"stdout","text":[" (檢測到有效表頭在第 1 行, 日期列: 'As Of Date')\n","      - 正在清理長格式數據... 完成 (移除 0 行無效數據)。\n","      - 正在轉換為寬格式... 成功 (130 行 x 7 欄)。\n","      - 正在加總 7 個欄位 (SBN, 單位: 百萬美元)... 完成 (130 筆有效數據, 移除 0 筆 NaN/零值).\n","\n","    處理文件 3/6 (SBN2015)...\n","      - 正在下載... 完成.\n","      - 正在解析 (嘗試自動檢測表頭)..."]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:22,906 - __main__ - INFO - 處理文件 4/6: https://markets.newyorkfed.org/api/pd/get/SBN2013/timeseries/PDPOSGSC-L2_PDPOSGSC-G2L3_PDPOSGSC-G3L6_PDPOSGSC-G6L7_PDPOSGSC-G7L11_PDPOSGSC-G11.xlsx\n"]},{"output_type":"stream","name":"stdout","text":[" (檢測到有效表頭在第 1 行, 日期列: 'As Of Date')\n","      - 正在清理長格式數據... 完成 (移除 0 行無效數據)。\n","      - 正在轉換為寬格式... 成功 (365 行 x 6 欄)。\n","      - 正在加總 6 個欄位 (SBN, 單位: 百萬美元)... 完成 (365 筆有效數據, 移除 0 筆 NaN/零值).\n","\n","    處理文件 4/6 (SBN2013)...\n","      - 正在下載..."]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:23,654 - __main__ - INFO - 處理文件 5/6: https://markets.newyorkfed.org/api/pd/get/SBP2013/timeseries/PDPUSGCS3LNOP_PDPUSGCS36NOP_PDPUSGCS611NOP_PDPUSGCSM11NOP.xlsx\n"]},{"output_type":"stream","name":"stdout","text":[" 完成.\n","      - 正在解析 (嘗試自動檢測表頭)... (檢測到有效表頭在第 1 行, 日期列: 'As Of Date')\n","      - 正在清理長格式數據... 完成 (移除 0 行無效數據)。\n","      - 正在轉換為寬格式... 成功 (92 行 x 6 欄)。\n","      - 正在加總 6 個欄位 (SBN, 單位: 百萬美元)... 完成 (92 筆有效數據, 移除 0 筆 NaN/零值).\n","\n","    處理文件 5/6 (SBP2013)...\n","      - 正在下載... 完成.\n","      - 正在解析 (嘗試自動檢測表頭)..."]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:24,931 - __main__ - INFO - 處理文件 6/6: https://markets.newyorkfed.org/api/pd/get/SBP2001/timeseries/PDPUSGCS5LNOP_PDPUSGCS5MNOP.xlsx\n"]},{"output_type":"stream","name":"stdout","text":[" (檢測到有效表頭在第 1 行, 日期列: 'As Of Date')\n","      - 正在清理長格式數據... 完成 (移除 0 行無效數據)。\n","      - 正在轉換為寬格式... 成功 (613 行 x 4 欄)。\n","      - 正在加總 4 個欄位 (SBP2013, 單位: 百萬美元)... 完成 (613 筆有效數據, 移除 0 筆 NaN/零值).\n","\n","    處理文件 6/6 (SBP2001)...\n","      - 正在下載... 完成.\n","      - 正在解析 (嘗試自動檢測表頭)... (檢測到有效表頭在第 1 行, 日期列: 'As Of Date')\n","      - 正在清理長格式數據... 完成 (移除 0 行無效數據)。\n","      - 正在轉換為寬格式..."]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:25,486 - __main__ - INFO - 文件處理循環結束。成功處理 6/6 個文件。\n","2025-05-07 04:50:25,488 - __main__ - INFO - 步驟 2: 合併數據...\n","2025-05-07 04:50:25,498 - __main__ - INFO - 數據合併完成，最終序列長度: 1422\n","2025-05-07 04:50:25,501 - __main__ - INFO - Cell 6: 抓取並處理 NY Fed 持有量 - NY Fed 數據處理完成，狀態: 成功 (有警告)\n"]},{"output_type":"stream","name":"stdout","text":[" 成功 (179 行 x 2 欄)。\n","      - 正在加總 2 個欄位 (SBP2001, 單位: 百萬美元)... 完成 (179 筆有效數據, 移除 0 筆 NaN/零值).\n","\n","  - 步驟 1: 文件處理循環結束。\n","  - 步驟 2: 合併所有成功處理的文件數據...\n","    > 合併完成，最終序列包含 1422 筆數據 (從 1998-01-28 到 2025-04-23)。\n","\n","================================================================================\n","儲存格: Cell 6: 抓取並處理 NY Fed 持有量 (v1.0) **執行總結報告**\n","**狀態:** ⚠️ 成功 (有警告)\n","**執行時間:** 7.19 秒\n","**完成時間:** 2025-05-07 12:50:25 CST+0800\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'ny_fed_urls_count': 6,\n","  'sbp2013_cols_config': [ 'PDPUSGCS3LNOP',\n","                           'PDPUSGCS36NOP',\n","                           'PDPUSGCS611NOP',\n","                           'PDPUSGCSM11NOP'],\n","  'sbp2001_cols_config': ['PDPUSGCS5LNOP', 'PDPUSGCS5MNOP']}\n","\n","**📝 執行註記:**\n","- 準備處理 6 個 NY Fed Excel 文件。\n","- 文件 SBN2024: 下載成功。\n","- 文件 SBN2024: 成功檢測到表頭行 0。\n","- 文件 SBN2024: 成功加總並清理，獲得 43 筆數據。\n","- 文件 SBN2022: 下載成功。\n","- 文件 SBN2022: 成功檢測到表頭行 0。\n","- 文件 SBN2022: 成功加總並清理，獲得 130 筆數據。\n","- 文件 SBN2015: 下載成功。\n","- 文件 SBN2015: 成功檢測到表頭行 0。\n","- 文件 SBN2015: 成功加總並清理，獲得 365 筆數據。\n","- 文件 SBN2013: 下載成功。\n","- 文件 SBN2013: 成功檢測到表頭行 0。\n","- 文件 SBN2013: 成功加總並清理，獲得 92 筆數據。\n","- 文件 SBP2013: 下載成功。\n","- 文件 SBP2013: 成功檢測到表頭行 0。\n","- 文件 SBP2013: 成功加總並清理，獲得 613 筆數據。\n","- 文件 SBP2001: 下載成功。\n","- 文件 SBP2001: 成功檢測到表頭行 0。\n","- 文件 SBP2001: 成功加總並清理，獲得 179 筆數據。\n","- 成功合併 6 個文件的持有量數據，最終得到 1422 筆有效數據。\n","\n","**⚠️ 警告訊息:**\n","- 合併了定義可能不同的 SBN(Gross?) 和 SBP(Net?) 數據，解釋需謹慎。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'output_series_shape': (1422,),\n","  'output_series_start': '1998-01-28',\n","  'output_series_end': '2025-04-23',\n","  'output_series_valid_points': 1422,\n","  'processed_files_count': 6,\n","  'failed_files_list': [],\n","  'final_series_is_valid': True,\n","  'output_series_exists': '是',\n","  'output_series_type': \"<class 'pandas.core.series.Series'>\"}\n","================================================================================\n","\n"]}]},{"cell_type":"code","source":["\n","# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.0 (Cell 7 - 合併所有數據源)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 7: 合併所有數據源\n","# --------------------------------------------------\n","# 功能: 將來自 FRED (Cell 4), Yahoo Finance (Cell 5), 和 NY Fed (Cell 6)\n","#       的數據合併到一個主 DataFrame。處理欄位重命名和缺失值填充 (特別是 NY Fed 持有量)。\n","#       最後根據驗證後的日期範圍進行過濾。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 3', 'Cell 4', 'Cell 5', 'Cell 6']\n","# 輸入: ['global:fred_data_df', 'global:yahoo_data_df', 'global:nyfed_positions_series',\n","#        'global:validated_start_dt', 'global:validated_end_dt', 'global:libs_loaded']\n","# 輸出: ['global:merged_data_df'] (包含所有合併數據的 DataFrame)\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1, 3, 4, 5, 6 是否成功執行，確保\n","#   `fred_data_df`, `yahoo_data_df`, `nyfed_positions_series`,\n","#   `validated_start_dt`, `validated_end_dt` 可用，且 `pandas` 庫已載入。\n","# * **初始化合併基礎**: 以 `fred_data_df` 作為合併的基礎 DataFrame。\n","# * **合併 Yahoo Finance 數據**:\n","#   * 使用左合併 (`how='left'`) 將 `yahoo_data_df` (包含 MOVE 和可選的 ETF)\n","#     合併到基礎 DataFrame。\n","# * **合併 NY Fed 持有量數據**:\n","#   * 使用左合併 (`how='left'`) 將 `nyfed_positions_series` (轉換為 DataFrame)\n","#     合併進來。\n","#   * **向前填充 (ffill)**: 對合併後的 'Total_Gross_Positions_Millions' 列\n","#     執行向前填充，以處理其每週更新的特性。\n","# * **欄位處理**:\n","#   * 重命名 'RRP' 列 (如果存在) 為 'RRP_Amount_Billions'。\n","#   * 確保所有預期會用到的欄位都存在，如果某數據源抓取失敗，對應欄位應為 NaN。\n","#     (例如 'Volatility_Index', 'Total_Gross_Positions_Millions', ETF 欄位)。\n","# * **最終過濾**: 使用 Cell 3 驗證的 `validated_start_dt` 和 `validated_end_dt`\n","#   對合併後的 DataFrame 進行最終的日期範圍過濾。\n","# * **設定輸出**: 將最終合併和過濾後的 DataFrame 賦值給全局變數 `merged_data_df`。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將所有數據源的整合集中在此儲存格，為後續計算準備統一的數據基礎。\n","# * 使用 `pd.merge` 或 `DataFrame.join` (這裡選擇 merge) 進行合併，\n","#   確保索引 (業務日) 對齊。\n","# * 關鍵步驟是處理 NY Fed 持有量的週頻數據，透過 `ffill` 將其擴展到業務日。\n","# * 確保即使部分數據源抓取失敗，主 DataFrame 結構依然完整（對應列為 NaN）。\n","#\n","# ## 重要假設：\n","# * Cell 1, 3, 4, 5, 6 已成功執行。\n","# * `pandas` 函式庫已成功載入。\n","# * `fred_data_df`, `yahoo_data_df`, `nyfed_positions_series` 包含符合預期的數據\n","#   （即使可能為空或包含 NaN）。\n","#\n","# ## 主要輸出/狀態變更：\n","# * `global:merged_data_df` (pd.DataFrame): 包含所有來源數據、經過處理和日期過濾\n","#   的最終 DataFrame。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 7) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 檢查執行報告，確認合併後的 DataFrame 是否符合預期（行數、欄位等）。\n","# * 注意 'Total_Gross_Positions_Millions' 是經過向前填充的。\n","# * **後續步驟:** 執行 **Cell 8: 計算衍生指標與壓力指數**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime # 雖然 Cell 1 已導入，為清晰起見再次導入\n","\n","# --- 第三方庫導入 ---\n","# 假設 Cell 1 已確保這些庫可用，但為防萬一再次檢查\n","try:\n","    import pandas as pd\n","    import numpy as np # 需要 numpy 來處理 NaN\n","    print(\"數據合併所需函式庫 (pandas, numpy) 看似可用。\")\n","except ImportError as e:\n","    print(f\"警告：導入數據合併所需函式庫失敗({e})。\")\n","    pd = None\n","    np = None\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 7: 合併所有數據源\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {}\n","_cell_generated_files = []\n","\n","# --- 全局變數定義 (此 Cell 的主要輸出) ---\n","global merged_data_df\n","merged_data_df = None # 初始化為 None\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.0) 開始執行 ---\")\n","\n","    # 檢查必要的函式庫\n","    if not pd or not np or 'libs_loaded' not in globals():\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：缺少 pandas, numpy 函式庫或 Cell 1 未成功執行。\"; raise ImportError(_cell_error)\n","    if not libs_loaded.get('pandas'):\n","         _cell_status = \"失敗\"; _cell_error = f\"依賴錯誤：Cell 1 未能成功載入 pandas。\"; raise ImportError(_cell_error)\n","\n","    # 檢查來自先前 Cell 的必要全局變數\n","    if 'fred_data_df' not in globals() or not isinstance(fred_data_df, pd.DataFrame):\n","         # 允許 fred_data_df 為空 DataFrame，但不允許不存在或類型錯誤\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 4 的有效 fred_data_df DataFrame。\"; raise NameError(_cell_error)\n","    if 'yahoo_data_df' not in globals() or not isinstance(yahoo_data_df, pd.DataFrame):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 5 的有效 yahoo_data_df DataFrame。\"; raise NameError(_cell_error)\n","    if 'nyfed_positions_series' not in globals() or not isinstance(nyfed_positions_series, pd.Series):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 6 的有效 nyfed_positions_series Series。\"; raise NameError(_cell_error)\n","    if 'validated_start_dt' not in globals() or not isinstance(validated_start_dt, pd.Timestamp):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 3 的有效 validated_start_dt。\"; raise NameError(_cell_error)\n","    if 'validated_end_dt' not in globals() or not isinstance(validated_end_dt, pd.Timestamp):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 3 的有效 validated_end_dt。\"; raise NameError(_cell_error)\n","\n","    start_dt = validated_start_dt\n","    end_dt = validated_end_dt\n","    _cell_inputs['fred_data_shape'] = fred_data_df.shape if fred_data_df is not None else 'N/A'\n","    _cell_inputs['yahoo_data_shape'] = yahoo_data_df.shape if yahoo_data_df is not None else 'N/A'\n","    _cell_inputs['nyfed_series_length'] = len(nyfed_positions_series) if nyfed_positions_series is not None else 'N/A'\n","    _cell_inputs['start_date'] = start_dt.strftime('%Y-%m-%d')\n","    _cell_inputs['end_date'] = end_dt.strftime('%Y-%m-%d')\n","    _cell_notes.append(\"讀取到來自 Cell 4, 5, 6 的數據和 Cell 3 的日期。\")\n","    print(f\"  - 步驟 0: 依賴檢查通過。\")\n","\n","    # --- 1. 初始化合併基礎 ---\n","    print(\"  - 步驟 1: 以 FRED 數據作為合併基礎...\")\n","    logger.info(\"步驟 1: 以 FRED 數據作為合併基礎...\")\n","    # 即使 fred_data_df 為空，也創建副本以保持流程一致性\n","    data_merged_temp = fred_data_df.copy() if fred_data_df is not None else pd.DataFrame()\n","    _cell_notes.append(f\"合併基礎 DataFrame 行數: {len(data_merged_temp)}\")\n","\n","    # --- 2. 合併 Yahoo Finance 數據 ---\n","    print(\"  - 步驟 2: 合併 Yahoo Finance 數據 (MOVE, ETF)...\")\n","    logger.info(\"步驟 2: 合併 Yahoo Finance 數據...\")\n","    if yahoo_data_df is not None and not yahoo_data_df.empty:\n","        try:\n","            # 使用左合併，保留 data_merged_temp 的所有行 (業務日索引)\n","            # suffixes=('', '_yahoo') 可以處理潛在的同名列，但這裡預期不會有\n","            data_merged_temp = pd.merge(data_merged_temp, yahoo_data_df,\n","                                        left_index=True, right_index=True, how='left')\n","            _cell_notes.append(\"Yahoo Finance 數據合併完成。\")\n","            print(\"    > Yahoo Finance 數據合併完成。\")\n","        except Exception as e_merge_yahoo:\n","            warn_msg = f\"合併 Yahoo Finance 數據時出錯: {e_merge_yahoo}。跳過 Yahoo 數據。\"\n","            _cell_warnings.append(warn_msg)\n","            print(f\"    > 警告：{warn_msg}\")\n","            logger.warning(warn_msg, exc_info=True)\n","            # 確保相關列存在，即使合併失敗\n","            if 'MOVE_Close' not in data_merged_temp: data_merged_temp['MOVE_Close'] = np.nan\n","            # 檢查是否有 ETF 列需要添加 NaN\n","            etf_ticker_check = PROJECT_CONFIG.get('lt_bond_etf_ticker', '').strip().upper()\n","            if etf_ticker_check:\n","                 etf_col_check = f'ETF_{etf_ticker_check}_Price'\n","                 if etf_col_check not in data_merged_temp: data_merged_temp[etf_col_check] = np.nan\n","    else:\n","        _cell_notes.append(\"無有效的 Yahoo Finance 數據可合併。\")\n","        print(\"    > 無有效的 Yahoo Finance 數據可合併。\")\n","        # 確保相關列存在\n","        if 'MOVE_Close' not in data_merged_temp: data_merged_temp['MOVE_Close'] = np.nan\n","        etf_ticker_check = PROJECT_CONFIG.get('lt_bond_etf_ticker', '').strip().upper()\n","        if etf_ticker_check:\n","             etf_col_check = f'ETF_{etf_ticker_check}_Price'\n","             if etf_col_check not in data_merged_temp: data_merged_temp[etf_col_check] = np.nan\n","\n","\n","    # --- 3. 合併 NY Fed 持有量數據並填充 ---\n","    print(\"  - 步驟 3: 合併 NY Fed 持有量數據並向前填充...\")\n","    logger.info(\"步驟 3: 合併 NY Fed 持有量數據...\")\n","    if nyfed_positions_series is not None and not nyfed_positions_series.empty:\n","        try:\n","            # 將 Series 轉換為 DataFrame 以便合併\n","            nyfed_df = nyfed_positions_series.to_frame()\n","            # 使用左合併\n","            data_merged_temp = pd.merge(data_merged_temp, nyfed_df,\n","                                        left_index=True, right_index=True, how='left')\n","            # 向前填充 NY Fed 持有量數據\n","            if 'Total_Gross_Positions_Millions' in data_merged_temp:\n","                initial_nulls = data_merged_temp['Total_Gross_Positions_Millions'].isnull().sum()\n","                data_merged_temp['Total_Gross_Positions_Millions'] = data_merged_temp['Total_Gross_Positions_Millions'].ffill()\n","                filled_nulls = initial_nulls - data_merged_temp['Total_Gross_Positions_Millions'].isnull().sum()\n","                _cell_notes.append(f\"NY Fed 持有量數據合併並向前填充完成 (填充了 {filled_nulls} 個 NaN)。\")\n","                print(f\"    > NY Fed 持有量數據合併並向前填充完成 (填充了 {filled_nulls} 個 NaN)。\")\n","            else:\n","                _cell_warnings.append(\"合併 NY Fed 數據後未找到 'Total_Gross_Positions_Millions' 欄位。\")\n","                print(\"    > 警告：合併 NY Fed 數據後未找到 'Total_Gross_Positions_Millions' 欄位。\")\n","                data_merged_temp['Total_Gross_Positions_Millions'] = np.nan # 確保列存在\n","\n","        except Exception as e_merge_nyfed:\n","            warn_msg = f\"合併或填充 NY Fed 持有量數據時出錯: {e_merge_nyfed}。跳過 NY Fed 數據。\"\n","            _cell_warnings.append(warn_msg)\n","            print(f\"    > 警告：{warn_msg}\")\n","            logger.warning(warn_msg, exc_info=True)\n","            # 確保列存在\n","            if 'Total_Gross_Positions_Millions' not in data_merged_temp:\n","                data_merged_temp['Total_Gross_Positions_Millions'] = np.nan\n","    else:\n","        _cell_notes.append(\"無有效的 NY Fed 持有量數據可合併。\")\n","        print(\"    > 無有效的 NY Fed 持有量數據可合併。\")\n","        # 確保列存在\n","        if 'Total_Gross_Positions_Millions' not in data_merged_temp:\n","            data_merged_temp['Total_Gross_Positions_Millions'] = np.nan\n","\n","    # --- 4. 欄位處理 (重命名等) ---\n","    print(\"  - 步驟 4: 處理欄位名稱...\")\n","    logger.info(\"步驟 4: 處理欄位名稱...\")\n","    # 重命名 RRP 列 (如果存在)\n","    if 'RRP' in data_merged_temp.columns:\n","         data_merged_temp.rename(columns={'RRP': 'RRP_Amount_Billions'}, inplace=True)\n","         _cell_notes.append(\"已重命名 RRP -> RRP_Amount_Billions\")\n","         print(\"    > 已重命名 RRP -> RRP_Amount_Billions\")\n","    elif 'RRP_Amount_Billions' not in data_merged_temp.columns: # 如果 RRP 和新名稱都不存在\n","         data_merged_temp['RRP_Amount_Billions'] = np.nan # 確保列存在\n","         _cell_notes.append(\"RRP 數據缺失，已創建 RRP_Amount_Billions (NaN) 列。\")\n","         print(\"    > RRP 數據缺失，已創建 RRP_Amount_Billions (NaN) 列。\")\n","\n","    # 重命名 Yahoo Finance 的 MOVE 列\n","    if 'MOVE_Close' in data_merged_temp.columns:\n","        data_merged_temp.rename(columns={'MOVE_Close': 'Volatility_Index'}, inplace=True)\n","        _cell_notes.append(\"已重命名 MOVE_Close -> Volatility_Index\")\n","        print(\"    > 已重命名 MOVE_Close -> Volatility_Index\")\n","    elif 'Volatility_Index' not in data_merged_temp.columns: # 如果 MOVE 和新名稱都不存在\n","        data_merged_temp['Volatility_Index'] = np.nan\n","        _cell_notes.append(\"MOVE 數據缺失，已創建 Volatility_Index (NaN) 列。\")\n","        print(\"    > MOVE 數據缺失，已創建 Volatility_Index (NaN) 列。\")\n","\n","\n","    # 添加 SRF 列 (目前通常為 0，預留)\n","    if 'SRF_Amount_Billions' not in data_merged_temp.columns:\n","        data_merged_temp['SRF_Amount_Billions'] = 0.0\n","        _cell_notes.append(\"已添加 SRF_Amount_Billions 列並設為 0.0。\")\n","        print(\"    > 已添加 SRF_Amount_Billions 列並設為 0.0。\")\n","\n","\n","    # --- 5. 最終日期過濾 ---\n","    print(\"  - 步驟 5: 根據驗證後的日期範圍過濾數據...\")\n","    logger.info(\"步驟 5: 根據驗證後的日期範圍過濾數據...\")\n","    initial_rows_before_filter = len(data_merged_temp)\n","    merged_data_df_filtered = data_merged_temp[\n","        (data_merged_temp.index >= start_dt) & (data_merged_temp.index <= end_dt)\n","    ].copy() # 使用 .copy() 避免 SettingWithCopyWarning\n","    rows_after_filter = len(merged_data_df_filtered)\n","    rows_removed = initial_rows_before_filter - rows_after_filter\n","    _cell_notes.append(f\"根據日期範圍過濾完成，保留 {rows_after_filter} 行 (移除了 {rows_removed} 行)。\")\n","    print(f\"    > 日期過濾完成，最終 DataFrame 包含 {rows_after_filter} 行。\")\n","\n","    # --- 6. 設定輸出 ---\n","    if merged_data_df_filtered.empty:\n","        warn_msg = \"警告：最終合併和過濾後的 DataFrame 為空！\"\n","        _cell_warnings.append(warn_msg)\n","        print(f\"    > {warn_msg}\")\n","        logger.warning(warn_msg)\n","        merged_data_df = pd.DataFrame() # 確保輸出是空的 DataFrame\n","    else:\n","        merged_data_df = merged_data_df_filtered # 賦值給全局變數\n","        _cell_outputs['merged_dataframe_shape'] = merged_data_df.shape\n","        _cell_outputs['merged_dataframe_columns'] = merged_data_df.columns.tolist()\n","        _cell_outputs['merged_dataframe_valid_points'] = int(merged_data_df.count().sum())\n","        _cell_outputs['merged_start_date'] = merged_data_df.index.min().strftime('%Y-%m-%d')\n","        _cell_outputs['merged_end_date'] = merged_data_df.index.max().strftime('%Y-%m-%d')\n","        logger.info(f\"數據合併與過濾完成，最終 DataFrame 維度: {merged_data_df.shape}\")\n","\n","    # --- 標記 Cell 7 執行狀態 ---\n","    if _cell_status == \"處理中\": # 如果前面沒有設置為失敗\n","        _cell_status = \"成功\"\n","        if _cell_warnings: # 如果有警告\n","             _cell_status = \"成功 (有警告)\"\n","    logger.info(f\"{_cell_identifier} - 數據合併完成，狀態: {_cell_status}\")\n","\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError, KeyError) as e: # 添加 KeyError\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗。\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    # 打印報告\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.0) **執行總結報告**\")\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    outputs_display['output_dataframe_exists'] = '是' if merged_data_df is not None else '否'\n","    if merged_data_df is not None:\n","        outputs_display['output_dataframe_type'] = str(type(merged_data_df))\n","        # 顯示部分列名以供預覽\n","        outputs_display['output_dataframe_columns_preview'] = merged_data_df.columns[:10].tolist() # 最多顯示前 10 列\n","        if len(merged_data_df.columns) > 10: outputs_display['output_dataframe_columns_preview'].append('...')\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del start_dt, end_dt, data_merged_temp, nyfed_df, initial_nulls, filled_nulls\n","    except NameError: pass\n","    try: del merged_data_df_filtered, initial_rows_before_filter, rows_after_filter, rows_removed\n","    except NameError: pass\n","    try: del warn_msg, etf_ticker_check, etf_col_check, outputs_display\n","    except NameError: pass\n","    # merged_data_df 需要保留為全局\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 7: 合併所有數據源\n","# 功能: 合併來自 FRED, Yahoo Finance, NY Fed 的數據，處理缺失值並按日期過濾。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 3', 'Cell 4', 'Cell 5', 'Cell 6']\n","# 輸入: ['global:fred_data_df', 'global:yahoo_data_df', 'global:nyfed_positions_series', 'global:validated_start_dt', 'global:validated_end_dt', 'global:libs_loaded']\n","# 輸出: ['global:merged_data_df']\n","# =================================================="],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U81oBVGATLG1","executionInfo":{"status":"ok","timestamp":1746593426184,"user_tz":-480,"elapsed":133,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"36d8a247-ddfe-43bc-d78a-5ff460a9155a"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:25,629 - __main__ - INFO - Cell 7: 合併所有數據源 - 開始執行...\n","2025-05-07 04:50:25,634 - __main__ - INFO - 步驟 1: 以 FRED 數據作為合併基礎...\n","2025-05-07 04:50:25,635 - __main__ - INFO - 步驟 2: 合併 Yahoo Finance 數據...\n","2025-05-07 04:50:25,645 - __main__ - INFO - 步驟 3: 合併 NY Fed 持有量數據...\n","2025-05-07 04:50:25,649 - __main__ - INFO - 步驟 4: 處理欄位名稱...\n","2025-05-07 04:50:25,657 - __main__ - INFO - 步驟 5: 根據驗證後的日期範圍過濾數據...\n","2025-05-07 04:50:25,668 - __main__ - INFO - 數據合併與過濾完成，最終 DataFrame 維度: (1918, 10)\n","2025-05-07 04:50:25,671 - __main__ - INFO - Cell 7: 合併所有數據源 - 數據合併完成，狀態: 成功\n"]},{"output_type":"stream","name":"stdout","text":["數據合併所需函式庫 (pandas, numpy) 看似可用。\n","\n","--- Cell 7: 合併所有數據源 (v1.0) 開始執行 ---\n","  - 步驟 0: 依賴檢查通過。\n","  - 步驟 1: 以 FRED 數據作為合併基礎...\n","  - 步驟 2: 合併 Yahoo Finance 數據 (MOVE, ETF)...\n","    > Yahoo Finance 數據合併完成。\n","  - 步驟 3: 合併 NY Fed 持有量數據並向前填充...\n","    > NY Fed 持有量數據合併並向前填充完成 (填充了 1534 個 NaN)。\n","  - 步驟 4: 處理欄位名稱...\n","    > 已重命名 RRP -> RRP_Amount_Billions\n","    > 已重命名 MOVE_Close -> Volatility_Index\n","    > 已添加 SRF_Amount_Billions 列並設為 0.0。\n","  - 步驟 5: 根據驗證後的日期範圍過濾數據...\n","    > 日期過濾完成，最終 DataFrame 包含 1918 行。\n","\n","================================================================================\n","儲存格: Cell 7: 合併所有數據源 (v1.0) **執行總結報告**\n","**狀態:** ✅ 成功\n","**執行時間:** 0.05 秒\n","**完成時間:** 2025-05-07 12:50:25 CST+0800\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'fred_data_shape': (1918, 6),\n","  'yahoo_data_shape': (1918, 2),\n","  'nyfed_series_length': 1422,\n","  'start_date': '2018-01-01',\n","  'end_date': '2025-05-07'}\n","\n","**📝 執行註記:**\n","- 讀取到來自 Cell 4, 5, 6 的數據和 Cell 3 的日期。\n","- 合併基礎 DataFrame 行數: 1918\n","- Yahoo Finance 數據合併完成。\n","- NY Fed 持有量數據合併並向前填充完成 (填充了 1534 個 NaN)。\n","- 已重命名 RRP -> RRP_Amount_Billions\n","- 已重命名 MOVE_Close -> Volatility_Index\n","- 已添加 SRF_Amount_Billions 列並設為 0.0。\n","- 根據日期範圍過濾完成，保留 1918 行 (移除了 0 行)。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'merged_dataframe_shape': (1918, 10),\n","  'merged_dataframe_columns': [ 'SOFR',\n","                                'DGS10',\n","                                'DGS2',\n","                                'RRP_Amount_Billions',\n","                                'VIX',\n","                                'Reserves',\n","                                'Volatility_Index',\n","                                'ETF_TLT_Price',\n","                                'Total_Gross_Positions_Millions',\n","                                'SRF_Amount_Billions'],\n","  'merged_dataframe_valid_points': 18732,\n","  'merged_start_date': '2018-01-01',\n","  'merged_end_date': '2025-05-07',\n","  'output_dataframe_exists': '是',\n","  'output_dataframe_type': \"<class 'pandas.core.frame.DataFrame'>\",\n","  'output_dataframe_columns_preview': [ 'SOFR',\n","                                        'DGS10',\n","                                        'DGS2',\n","                                        'RRP_Amount_Billions',\n","                                        'VIX',\n","                                        'Reserves',\n","                                        'Volatility_Index',\n","                                        'ETF_TLT_Price',\n","                                        'Total_Gross_Positions_Millions',\n","                                        'SRF_Amount_Billions']}\n","================================================================================\n","\n"]}]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.0 (Cell 8 - 計算衍生指標與壓力指數)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 8: 計算衍生指標與壓力指數\n","# --------------------------------------------------\n","# 功能: 基於合併後的數據 DataFrame (`merged_data_df`)，計算衍生指標\n","#       (利差, SOFR偏差, 持有/準備金比率)，計算各成分的滾動百分位排名，\n","#       根據配置權重計算原始及平滑壓力指數，並可選計算 MACD 動能指標。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 7']\n","# 輸入: ['global:merged_data_df', 'global:PROJECT_CONFIG', 'global:libs_loaded']\n","# 輸出: ['global:final_df'] (包含所有計算結果的最終 DataFrame)\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1 和 Cell 7 是否成功執行，確保 `merged_data_df`\n","#   和 `PROJECT_CONFIG` 可用，且 `pandas`, `numpy` 庫已載入。\n","# * **數據準備**: 創建 `final_df` 作為 `merged_data_df` 的副本。確保必要的\n","#   數值欄位為數值類型 (雖然 Cell 7 可能已處理，再次檢查以確保穩健)。\n","# * **計算衍生指標**:\n","#   * 計算利差 (10Y - 2Y)。\n","#   * 計算 SOFR 的 60 日移動平均及其與當前 SOFR 的偏差。\n","#   * 計算持有量 / 準備金比率，處理分母為零的情況。\n","#   * 記錄各指標是否成功計算。\n","# * **計算壓力指數**:\n","#   * 從 `PROJECT_CONFIG` 獲取滾動窗口天數和最小期數。\n","#   * **滾動排名**: 對 SOFR 偏差、(反轉的) 利差、持有量、MOVE、VIX、\n","#     持有/準備金比率計算滾動百分位排名 (`.rolling().rank(pct=True)`)。\n","#   * **加權計算**: 從 `PROJECT_CONFIG` 獲取各成分權重。篩選可用成分，\n","#     正規化權重。根據權重和排名計算加權綜合得分 (0-1)。\n","#     特殊處理持有/準備金比率的條件權重。\n","#   * **指數轉換**: 將綜合得分映射到 1-100 範圍，得到原始壓力指數。\n","#   * **平滑處理 (可選)**: 根據 `PROJECT_CONFIG` 設定，對原始指數進行中心移動平均平滑。\n","#   * 記錄壓力指數是否成功計算。\n","# * **計算 MACD 動能 (可選)**:\n","#   * 檢查 `PROJECT_CONFIG` 是否啟用 MACD 計算。\n","#   * 若啟用且壓力指數計算成功，則計算 MACD 線、信號線和柱狀圖。\n","#   * 計算 MACD 柱狀圖的顏色，用於後續繪圖。\n","#   * 記錄 MACD 是否成功計算。\n","# * **設定輸出**: 將包含所有計算結果的 DataFrame 賦值給全局變數 `final_df`。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將所有核心計算邏輯集中在此儲存格。\n","# * 計算過程分步驟進行，先計算基礎衍生指標，再計算排名，最後合成指數。\n","# * 從 `PROJECT_CONFIG` 讀取計算參數（窗口、權重、閾值、MACD參數等），\n","#   增加靈活性。\n","# * 包含對數據有效性的檢查（例如，確保有足夠數據點計算移動平均或排名）。\n","# * 使用 `.clip(1, 100)` 確保壓力指數在合理範圍內。\n","# * MACD 計算和顏色分配邏輯與原始腳本保持一致。\n","#\n","# ## 重要假設：\n","# * Cell 1 和 Cell 7 已成功執行。\n","# * `pandas` 和 `numpy` 函式庫已成功載入。\n","# * `merged_data_df` 包含計算所需的欄位（即使部分可能為 NaN）。\n","# * `PROJECT_CONFIG` 包含計算所需的參數。\n","#\n","# ## 主要輸出/狀態變更：\n","# * `global:final_df` (pd.DataFrame): 包含原始數據、衍生指標、排名、\n","#   壓力指數、MACD 等所有計算結果的最終 DataFrame。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 8) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 此儲存格計算量較大，可能需要一些執行時間。\n","# * 檢查執行報告中的警告，確認是否有計算步驟因數據不足等原因跳過或失敗。\n","# * **後續步驟:** 執行 **Cell 9: 產生時間序列圖表**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime # 雖然 Cell 1 已導入，為清晰起見再次導入\n","\n","# --- 第三方庫導入 ---\n","# 假設 Cell 1 已確保這些庫可用，但為防萬一再次檢查\n","try:\n","    import pandas as pd\n","    import numpy as np\n","    print(\"計算所需函式庫 (pandas, numpy) 看似可用。\")\n","except ImportError as e:\n","    print(f\"警告：導入計算所需函式庫失敗({e})。\")\n","    pd = None\n","    np = None\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 8: 計算衍生指標與壓力指數\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {}\n","_cell_generated_files = []\n","\n","# --- 全局變數定義 (此 Cell 的主要輸出) ---\n","global final_df\n","final_df = None # 初始化為 None\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.0) 開始執行 ---\")\n","\n","    # 檢查必要的函式庫\n","    if not pd or not np or 'libs_loaded' not in globals():\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：缺少 pandas, numpy 函式庫或 Cell 1 未成功執行。\"; raise ImportError(_cell_error)\n","    if not libs_loaded.get('pandas') or not libs_loaded.get('numpy'):\n","         _cell_status = \"失敗\"; _cell_error = f\"依賴錯誤：Cell 1 未能成功載入 pandas 或 numpy。\"; raise ImportError(_cell_error)\n","\n","    # 檢查來自先前 Cell 的必要全局變數\n","    if 'merged_data_df' not in globals() or not isinstance(merged_data_df, pd.DataFrame):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 7 的有效 merged_data_df DataFrame。\"; raise NameError(_cell_error)\n","    if merged_data_df.empty:\n","        # 如果 merged_data_df 為空，無法繼續計算\n","        _cell_status = \"失敗\"; _cell_error = \"輸入錯誤：來自 Cell 7 的 merged_data_df 為空，無法進行計算。\"; raise ValueError(_cell_error)\n","    if 'PROJECT_CONFIG' not in globals() or not isinstance(PROJECT_CONFIG, dict):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 PROJECT_CONFIG。\"; raise NameError(_cell_error)\n","\n","    _cell_inputs['merged_data_shape'] = merged_data_df.shape\n","    _cell_inputs['project_config_keys'] = list(PROJECT_CONFIG.keys())\n","    _cell_notes.append(f\"讀取到 merged_data_df (維度: {merged_data_df.shape}) 和 PROJECT_CONFIG。\")\n","    print(f\"  - 步驟 0: 依賴檢查通過。輸入數據維度: {merged_data_df.shape}\")\n","\n","    # --- 1. 數據準備 ---\n","    print(\"  - 步驟 1: 準備數據並確保數值類型...\")\n","    logger.info(\"步驟 1: 準備數據...\")\n","    final_df = merged_data_df.copy() # 創建副本進行計算\n","\n","    # 確保計算所需的列為數值類型 (再次檢查，增加穩健性)\n","    cols_to_ensure_numeric = [\n","        'SOFR', 'DGS10', 'DGS2', 'Volatility_Index', 'VIX',\n","        'Total_Gross_Positions_Millions', 'Reserves', 'RRP_Amount_Billions'\n","    ]\n","    # 檢查 ETF 列是否存在並加入\n","    etf_ticker_calc = PROJECT_CONFIG.get('lt_bond_etf_ticker', '').strip().upper()\n","    etf_col_calc = f'ETF_{etf_ticker_calc}_Price' if etf_ticker_calc else None\n","    if etf_col_calc and etf_col_calc in final_df.columns:\n","        cols_to_ensure_numeric.append(etf_col_calc)\n","\n","    for col in cols_to_ensure_numeric:\n","        if col in final_df.columns:\n","            if pd.api.types.is_numeric_dtype(final_df[col]):\n","                 _cell_notes.append(f\"欄位 '{col}' 已是數值類型。\")\n","            else:\n","                 initial_dtype = final_df[col].dtype\n","                 final_df[col] = pd.to_numeric(final_df[col], errors='coerce')\n","                 _cell_notes.append(f\"欄位 '{col}' 已從 {initial_dtype} 轉換為數值類型。\")\n","        else:\n","            # 如果列不存在，創建 NaN 列 (雖然 Cell 7 應該已處理)\n","            final_df[col] = np.nan\n","            _cell_warnings.append(f\"計算所需欄位 '{col}' 不存在於 merged_data_df，已創建 NaN 列。\")\n","\n","    print(\"    > 數據類型檢查完成。\")\n","\n","    # --- 2. 計算基本衍生指標 ---\n","    print(\"  - 步驟 2: 計算基本衍生指標...\")\n","    logger.info(\"步驟 2: 計算基本衍生指標...\")\n","    # 初始化計算成功標誌\n","    sofr_ok = False; sofr_dev_ok = False; spread_calculated_ok = False\n","    gross_pos_ok = False; volatility_ok = False; vix_ok = False\n","    reserves_present = False; ratio_calculated_ok = False\n","\n","    # 檢查原始數據是否存在且有值\n","    sofr_ok = 'SOFR' in final_df and final_df['SOFR'].notna().any()\n","    gross_pos_ok = 'Total_Gross_Positions_Millions' in final_df and final_df['Total_Gross_Positions_Millions'].notna().any()\n","    volatility_ok = 'Volatility_Index' in final_df and final_df['Volatility_Index'].notna().any()\n","    vix_ok = 'VIX' in final_df and final_df['VIX'].notna().any()\n","    reserves_present = 'Reserves' in final_df and final_df['Reserves'].notna().any() # 僅檢查是否存在\n","\n","    # 計算利差 (10Y - 2Y)\n","    if 'DGS10' in final_df and 'DGS2' in final_df and \\\n","       final_df['DGS10'].notna().any() and final_df['DGS2'].notna().any():\n","        final_df['Spread_10Y2Y'] = final_df['DGS10'] - final_df['DGS2']\n","        spread_calculated_ok = final_df['Spread_10Y2Y'].notna().any()\n","        _cell_notes.append(\"利差 (Spread_10Y2Y) 計算完成。\")\n","        print(\"    > 利差 (Spread_10Y2Y) 計算完成。\")\n","    else:\n","        final_df['Spread_10Y2Y'] = np.nan\n","        spread_calculated_ok = False\n","        _cell_warnings.append(\"未能計算利差 (缺少 DGS10 或 DGS2 數據)。\")\n","        print(\"    > 警告：未能計算利差 (缺少 DGS10 或 DGS2 數據)。\")\n","\n","    # 計算 SOFR 與 60 日移動平均的偏差\n","    if sofr_ok:\n","        min_periods_ma = 30 # 移動平均所需的最少數據點\n","        if len(final_df['SOFR'].dropna()) >= min_periods_ma:\n","            final_df['SOFR_MA60'] = final_df['SOFR'].rolling(window=60, min_periods=min_periods_ma).mean()\n","            final_df['SOFR_Dev'] = final_df['SOFR'] - final_df['SOFR_MA60']\n","            sofr_dev_ok = final_df['SOFR_Dev'].notna().any()\n","            _cell_notes.append(\"SOFR 60日均線和偏差 (SOFR_MA60, SOFR_Dev) 計算完成。\")\n","            print(\"    > SOFR 60日均線和偏差 (SOFR_MA60, SOFR_Dev) 計算完成。\")\n","        else:\n","            final_df['SOFR_MA60'] = np.nan; final_df['SOFR_Dev'] = np.nan; sofr_dev_ok = False\n","            _cell_warnings.append(f\"SOFR 數據點 ({len(final_df['SOFR'].dropna())}) 不足 {min_periods_ma}，無法計算 60 日均線和偏差。\")\n","            print(f\"    > 警告：SOFR 數據點不足，無法計算 60 日均線和偏差。\")\n","    else:\n","        final_df['SOFR_MA60'] = np.nan; final_df['SOFR_Dev'] = np.nan; sofr_dev_ok = False\n","        _cell_warnings.append(\"缺少 SOFR 數據，無法計算均線和偏差。\")\n","        print(\"    > 警告：缺少 SOFR 數據，無法計算均線和偏差。\")\n","\n","    # 計算持有量/準備金比率\n","    if gross_pos_ok and reserves_present:\n","        # 處理準備金為 0 的情況，避免除以零\n","        reserves_safe = final_df['Reserves'].replace(0, np.nan)\n","        # 確保持有量是數值\n","        positions_numeric = pd.to_numeric(final_df['Total_Gross_Positions_Millions'], errors='coerce')\n","        final_df['Pos_Res_Ratio'] = positions_numeric / reserves_safe\n","        # 處理計算結果可能出現的無窮大值\n","        if np.isinf(final_df['Pos_Res_Ratio']).any():\n","             final_df['Pos_Res_Ratio'].replace([np.inf, -np.inf], np.nan, inplace=True)\n","        ratio_calculated_ok = final_df['Pos_Res_Ratio'].notna().any()\n","        if ratio_calculated_ok:\n","            _cell_notes.append(\"持有量/準備金比率 (Pos_Res_Ratio) 計算完成。\")\n","            print(\"    > 持有量/準備金比率 (Pos_Res_Ratio) 計算完成。\")\n","        else:\n","            final_df['Pos_Res_Ratio'] = np.nan # 如果計算後全為 NaN\n","            _cell_warnings.append(\"持有量/準備金比率計算後無有效值。\")\n","            print(\"    > 警告：持有量/準備金比率計算後無有效值。\")\n","    else:\n","        final_df['Pos_Res_Ratio'] = np.nan\n","        ratio_calculated_ok = False\n","        if not gross_pos_ok: _cell_warnings.append(\"缺少持有量數據，無法計算比率。\")\n","        if not reserves_present: _cell_warnings.append(\"缺少準備金數據，無法計算比率。\")\n","        print(\"    > 警告：缺少持有量或準備金數據，無法計算比率。\")\n","\n","    _cell_outputs['indicators_calculated'] = {\n","        'sofr_dev': sofr_dev_ok, 'spread': spread_calculated_ok, 'pos_res_ratio': ratio_calculated_ok\n","    }\n","\n","    # --- 3. 計算壓力指數 ---\n","    print(\"  - 步驟 3: 計算壓力指數...\")\n","    logger.info(\"步驟 3: 計算壓力指數...\")\n","    # 設定滾動窗口參數\n","    window = int(PROJECT_CONFIG.get('rolling_window_days', 252)); window = max(window, 5)\n","    min_periods_rank = int(window * 0.6); min_periods_rank = max(min_periods_rank, 3)\n","    _cell_inputs['stress_index_window'] = window\n","    _cell_inputs['stress_index_min_periods'] = min_periods_rank\n","    print(f\"    > 使用滾動窗口: {window} 天, 最小期數: {min_periods_rank} 天\")\n","\n","    # 初始化儲存排名的 DataFrame\n","    perc_ranks = pd.DataFrame(index=final_df.index)\n","    component_availability = {'sofr_dev': sofr_dev_ok, 'spread_inv': spread_calculated_ok,\n","                              'gross_pos': gross_pos_ok, 'move': volatility_ok, 'vix': vix_ok,\n","                              'pos_res_ratio': ratio_calculated_ok}\n","    column_mapping = {'sofr_dev': 'SOFR_Dev', 'spread_inv': 'Spread_10Y2Y',\n","                      'gross_pos': 'Total_Gross_Positions_Millions', 'move': 'Volatility_Index',\n","                      'vix': 'VIX', 'pos_res_ratio': 'Pos_Res_Ratio'}\n","\n","    # 計算各成分的滾動百分位排名 (0 到 1)\n","    print(\"      - 計算各成分滾動百分位排名...\")\n","    for name, is_available in component_availability.items():\n","        col = column_mapping.get(name)\n","        if is_available and col in final_df:\n","            series_to_rank = final_df[col]\n","            if series_to_rank.notna().sum() >= min_periods_rank: # 確保有足夠數據點\n","                rank_pct = series_to_rank.rolling(window=window, min_periods=min_periods_rank).rank(pct=True)\n","                if name == 'spread_inv': # 利差反轉\n","                    perc_ranks[name] = 1.0 - rank_pct\n","                    _cell_notes.append(f\"已計算成分 '{name}' (反轉利差) 的滾動排名。\")\n","                else:\n","                    perc_ranks[name] = rank_pct\n","                    _cell_notes.append(f\"已計算成分 '{name}' 的滾動排名。\")\n","                print(f\"        - 成分 '{name}' 排名計算完成。\")\n","            else:\n","                _cell_warnings.append(f\"成分 '{name}' 有效數據點不足 ({series_to_rank.notna().sum()}/{min_periods_rank})，無法計算排名。\")\n","                print(f\"        - 警告：成分 '{name}' 數據不足，無法計算排名。\")\n","                perc_ranks[name] = np.nan # 確保列存在\n","        else:\n","            _cell_notes.append(f\"成分 '{name}' 數據不可用，跳過排名計算。\")\n","            print(f\"        - 成分 '{name}' 數據不可用，跳過排名計算。\")\n","            perc_ranks[name] = np.nan # 確保列存在\n","\n","    # 加權計算壓力指數\n","    print(\"      - 根據權重計算壓力指數...\")\n","    weights = PROJECT_CONFIG.get('weights', {})\n","    threshold_ratio = PROJECT_CONFIG.get('threshold_ratio_color', 90) # 獲取比率閾值\n","    _cell_inputs['stress_index_weights'] = weights\n","    _cell_inputs['stress_index_ratio_threshold'] = threshold_ratio\n","\n","    # 篩選出實際可用於計算的成分及其權重\n","    active_components = {\n","        k: weights.get(k, 0) for k, is_available in component_availability.items()\n","        if is_available and k in perc_ranks.columns and perc_ranks[k].notna().any() and weights.get(k, 0) > 0\n","    }\n","    total_weight = sum(active_components.values())\n","\n","    stress_index_calculated = False\n","    if total_weight > 0:\n","        weights_normalized = {k: v / total_weight for k, v in active_components.items()}\n","        print(f\"        - 使用的指標與權重 (正規化後): {', '.join([f'{k}({w:.1%})' for k, w in weights_normalized.items()])}\")\n","        _cell_notes.append(f\"壓力指數使用成分及正規化權重: {weights_normalized}\")\n","\n","        # 特殊處理 Pos/Res Ratio 的條件權重\n","        ratio_high_condition = pd.Series(0.0, index=final_df.index) # 默認為 0\n","        if 'pos_res_ratio' in weights_normalized and ratio_calculated_ok:\n","             print(f\"          * 持有/準備金比率僅在 >= {threshold_ratio} 時貢獻權重。\")\n","             ratio_high_condition = (final_df['Pos_Res_Ratio'] >= threshold_ratio).astype(float).fillna(0.0) # NaN 也視為不滿足條件\n","\n","        # 計算加權綜合得分 (0-1)\n","        combined_score_01 = pd.Series(0.0, index=final_df.index)\n","        for name, weight in weights_normalized.items():\n","            rank_series = perc_ranks[name].fillna(0.5) # 用 0.5 填充排名中的 NaN\n","            if name == 'pos_res_ratio':\n","                combined_score_01 += rank_series * ratio_high_condition * weight\n","            else:\n","                combined_score_01 += rank_series * weight\n","\n","        # 映射到 0-100 (注意: 原始腳本是 1-100，這裡改為 0-100 更常見)\n","        final_df['Dealer_Stress_Index_Raw'] = (combined_score_01 * 100).clip(0, 100)\n","        print(f\"        - 原始壓力指數 (0-100) 計算完成 ({final_df['Dealer_Stress_Index_Raw'].notna().sum()} 點)。\")\n","        _cell_notes.append(\"原始壓力指數計算完成。\")\n","\n","        # 指數平滑 (可選)\n","        smoothing_window = int(PROJECT_CONFIG.get('smoothing_window_stress_index', 5))\n","        _cell_inputs['stress_index_smoothing_window'] = smoothing_window\n","        if smoothing_window > 1:\n","            min_periods_smooth = max(1, int(smoothing_window * 0.5))\n","            final_df['Dealer_Stress_Index'] = final_df['Dealer_Stress_Index_Raw'].rolling(\n","                window=smoothing_window, min_periods=min_periods_smooth, center=True\n","            ).mean().clip(0, 100) # 保持 0-100 範圍\n","            print(f\"        - 已執行指數平滑 (窗口: {smoothing_window} 天, 中心)。\")\n","            _cell_notes.append(f\"壓力指數已平滑 (窗口: {smoothing_window})。\")\n","        else:\n","            final_df['Dealer_Stress_Index'] = final_df['Dealer_Stress_Index_Raw']\n","            print(f\"        - 未執行指數平滑 (窗口 <= 1)。\")\n","            _cell_notes.append(\"未執行壓力指數平滑。\")\n","\n","        if final_df['Dealer_Stress_Index'].notna().any():\n","            stress_index_calculated = True\n","            _cell_outputs['stress_index_calculated'] = True\n","            _cell_outputs['stress_index_final_points'] = int(final_df['Dealer_Stress_Index'].count())\n","        else:\n","            _cell_warnings.append(\"壓力指數計算結果 (平滑後) 均為 NaN。\")\n","            print(\"        - 警告：壓力指數計算結果均為 NaN。\")\n","            _cell_outputs['stress_index_calculated'] = False\n","    else:\n","         _cell_warnings.append(\"無可用指標、權重為零或排名計算失敗，無法計算壓力指數。\")\n","         print(\"      - 警告：無可用指標或權重，無法計算壓力指數。\")\n","         final_df['Dealer_Stress_Index_Raw'] = np.nan\n","         final_df['Dealer_Stress_Index'] = np.nan\n","         _cell_outputs['stress_index_calculated'] = False\n","\n","    # --- 4. 計算 MACD 動能 (可選) ---\n","    print(\"  - 步驟 4: 計算 MACD 動能指標 (可選)...\")\n","    logger.info(\"步驟 4: 計算 MACD 動能指標...\")\n","    enable_macd = PROJECT_CONFIG.get('enable_macd_momentum_plot', False)\n","    macd_params = PROJECT_CONFIG.get('macd_params', {})\n","    macd_colors = PROJECT_CONFIG.get('macd_colors', {})\n","    _cell_inputs['enable_macd'] = enable_macd\n","    _cell_inputs['macd_params'] = macd_params\n","    _cell_inputs['macd_colors'] = macd_colors\n","\n","    final_df['Stress_Index_MACD_Hist'] = np.nan # 初始化列\n","    final_df['Stress_Index_MACD_Color'] = 'grey' # 初始化顏色列\n","    macd_calculated_ok = False\n","\n","    if enable_macd and stress_index_calculated:\n","        try:\n","            macd_fast = int(macd_params.get('fast', 12)); macd_fast = max(2, macd_fast)\n","            macd_slow = int(macd_params.get('slow', 26)); macd_slow = max(macd_fast + 1, macd_slow)\n","            macd_signal = int(macd_params.get('signal', 9)); macd_signal = max(2, macd_signal)\n","            color_blue = macd_colors.get('blue', \"#6495ED\")\n","            color_green = macd_colors.get('green', \"#3CB371\")\n","            color_red = macd_colors.get('red', \"#B22222\")\n","            print(f\"    > 使用 MACD 參數: ({macd_fast}, {macd_slow}, {macd_signal})\")\n","\n","            base_series = final_df['Dealer_Stress_Index'].dropna()\n","            if len(base_series) > macd_slow:\n","                ema_fast = base_series.ewm(span=macd_fast, adjust=False).mean()\n","                ema_slow = base_series.ewm(span=macd_slow, adjust=False).mean()\n","                macd_line = ema_fast - ema_slow\n","                signal_line = macd_line.ewm(span=macd_signal, adjust=False).mean()\n","                histogram = macd_line - signal_line\n","                final_df['Stress_Index_MACD_Hist'] = histogram.reindex(final_df.index)\n","\n","                if final_df['Stress_Index_MACD_Hist'].notna().any():\n","                     macd_calculated_ok = True\n","                     print(f\"      - MACD Histogram 計算完成 ({final_df['Stress_Index_MACD_Hist'].count()} 點)\")\n","                     _cell_notes.append(\"MACD Histogram 計算完成。\")\n","\n","                     # 計算顏色\n","                     hist_series = final_df['Stress_Index_MACD_Hist']\n","                     hist_diff = hist_series.diff()\n","                     conditions = [\n","                         (hist_diff > 0) & (hist_series >= 0), # 上升且為正 -> 藍色\n","                         (hist_diff > 0) & (hist_series < 0),  # 上升且為負 -> 綠色\n","                         (hist_diff <= 0)                      # 下降 (不論正負) -> 紅色\n","                     ]\n","                     colors = [color_blue, color_green, color_red]\n","                     final_df['Stress_Index_MACD_Color'] = np.select(conditions, colors, default='grey')\n","\n","                     first_valid_index = hist_series.first_valid_index()\n","                     if first_valid_index is not None:\n","                         first_val = hist_series[first_valid_index]\n","                         final_df.loc[first_valid_index, 'Stress_Index_MACD_Color'] = color_blue if first_val >= 0 else color_green\n","                     print(\"      - MACD 顏色計算完成。\")\n","                     _cell_notes.append(\"MACD 顏色計算完成。\")\n","                else:\n","                     _cell_warnings.append(\"MACD Histogram 計算結果均為 NaN。\")\n","                     print(\"      - 警告：MACD Histogram 計算結果均為 NaN。\")\n","            else:\n","                 _cell_warnings.append(f\"壓力指數數據點 ({len(base_series)}) 不足以計算 MACD (需要至少 {macd_slow+1} 點)。\")\n","                 print(f\"    > 警告：數據不足，無法計算 MACD。\")\n","\n","        except Exception as e_macd:\n","            _cell_warnings.append(f\"計算 MACD 時出錯: {e_macd}\")\n","            print(f\"    > 警告：計算 MACD 時出錯: {e_macd}\")\n","            logger.warning(\"計算 MACD 時出錯\", exc_info=True)\n","    elif enable_macd:\n","        _cell_notes.append(\"MACD 已啟用，但壓力指數未成功計算，跳過 MACD 計算。\")\n","        print(\"    > MACD 已啟用，但壓力指數未成功計算，跳過。\")\n","    else:\n","        _cell_notes.append(\"MACD 未啟用，跳過計算。\")\n","        print(\"    > MACD 未啟用，跳過計算。\")\n","\n","    _cell_outputs['macd_calculated'] = macd_calculated_ok\n","    _cell_outputs['macd_final_points'] = int(final_df['Stress_Index_MACD_Hist'].count()) if macd_calculated_ok else 0\n","\n","    # --- 5. 標記 Cell 8 執行狀態 ---\n","    if _cell_status == \"處理中\": # 如果前面沒有設置為失敗\n","        _cell_status = \"成功\"\n","        if not stress_index_calculated: # 如果核心的壓力指數沒算出來，算警告\n","             _cell_warnings.append(\"核心指標壓力指數未能成功計算。\")\n","             _cell_status = \"成功 (有警告)\"\n","        elif _cell_warnings: # 如果有其他警告\n","             _cell_status = \"成功 (有警告)\"\n","    logger.info(f\"{_cell_identifier} - 指標計算完成，狀態: {_cell_status}\")\n","\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError, KeyError) as e:\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗。\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    # 打印報告\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.0) **執行總結報告**\")\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    outputs_display['output_dataframe_exists'] = '是' if final_df is not None else '否'\n","    if final_df is not None:\n","        outputs_display['output_dataframe_type'] = str(type(final_df))\n","        outputs_display['output_dataframe_shape'] = final_df.shape\n","        # 顯示部分列名以供預覽\n","        outputs_display['output_dataframe_columns_preview'] = final_df.columns[-10:].tolist() # 顯示最後計算的 10 列\n","        if len(final_df.columns) > 10: outputs_display['output_dataframe_columns_preview'].insert(0,'...')\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del cols_to_ensure_numeric, etf_ticker_calc, etf_col_calc, col, initial_dtype\n","    except NameError: pass\n","    try: del sofr_ok, sofr_dev_ok, spread_calculated_ok, gross_pos_ok, volatility_ok\n","    except NameError: pass\n","    try: del vix_ok, reserves_present, ratio_calculated_ok, min_periods_ma, reserves_safe\n","    except NameError: pass\n","    try: del positions_numeric, window, min_periods_rank, perc_ranks, component_availability\n","    except NameError: pass\n","    try: del column_mapping, name, is_available, series_to_rank, rank_pct, weights\n","    except NameError: pass\n","    try: del threshold_ratio, active_components, total_weight, weights_normalized\n","    except NameError: pass\n","    try: del ratio_high_condition, combined_score_01, rank_series, stress_index_calculated\n","    except NameError: pass\n","    try: del smoothing_window, min_periods_smooth, enable_macd, macd_params, macd_colors\n","    except NameError: pass\n","    try: del macd_calculated_ok, macd_fast, macd_slow, macd_signal, color_blue, color_green\n","    except NameError: pass\n","    try: del color_red, base_series, ema_fast, ema_slow, macd_line, signal_line, histogram\n","    except NameError: pass\n","    try: del hist_series, hist_diff, conditions, colors, first_valid_index, first_val\n","    except NameError: pass\n","    try: del outputs_display # 清理新增的變數\n","    except NameError: pass\n","    # final_df 需要保留為全局\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 8: 計算衍生指標與壓力指數\n","# 功能: 計算衍生指標、滾動排名、壓力指數和可選的 MACD 指標。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 7']\n","# 輸入: ['global:merged_data_df', 'global:PROJECT_CONFIG', 'global:libs_loaded']\n","# 輸出: ['global:final_df']\n","# ==================================================\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sHzkIiX7w0Hk","executionInfo":{"status":"ok","timestamp":1746593426960,"user_tz":-480,"elapsed":769,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"633f8f0f-4d04-4cbb-c021-4c5554a0aba5"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:26,303 - __main__ - INFO - Cell 8: 計算衍生指標與壓力指數 - 開始執行...\n","2025-05-07 04:50:26,306 - __main__ - INFO - 步驟 1: 準備數據...\n","2025-05-07 04:50:26,308 - __main__ - INFO - 步驟 2: 計算基本衍生指標...\n","2025-05-07 04:50:26,332 - __main__ - INFO - 步驟 3: 計算壓力指數...\n","2025-05-07 04:50:26,430 - __main__ - INFO - 步驟 4: 計算 MACD 動能指標...\n","2025-05-07 04:50:26,437 - __main__ - INFO - Cell 8: 計算衍生指標與壓力指數 - 指標計算完成，狀態: 成功\n"]},{"output_type":"stream","name":"stdout","text":["計算所需函式庫 (pandas, numpy) 看似可用。\n","\n","--- Cell 8: 計算衍生指標與壓力指數 (v1.0) 開始執行 ---\n","  - 步驟 0: 依賴檢查通過。輸入數據維度: (1918, 10)\n","  - 步驟 1: 準備數據並確保數值類型...\n","    > 數據類型檢查完成。\n","  - 步驟 2: 計算基本衍生指標...\n","    > 利差 (Spread_10Y2Y) 計算完成。\n","    > SOFR 60日均線和偏差 (SOFR_MA60, SOFR_Dev) 計算完成。\n","    > 持有量/準備金比率 (Pos_Res_Ratio) 計算完成。\n","  - 步驟 3: 計算壓力指數...\n","    > 使用滾動窗口: 252 天, 最小期數: 151 天\n","      - 計算各成分滾動百分位排名...\n","        - 成分 'sofr_dev' 排名計算完成。\n","        - 成分 'spread_inv' 排名計算完成。\n","        - 成分 'gross_pos' 排名計算完成。\n","        - 成分 'move' 排名計算完成。\n","        - 成分 'vix' 排名計算完成。\n","        - 成分 'pos_res_ratio' 排名計算完成。\n","      - 根據權重計算壓力指數...\n","        - 使用的指標與權重 (正規化後): sofr_dev(35.0%), spread_inv(10.0%), gross_pos(5.0%), move(25.0%), vix(15.0%), pos_res_ratio(10.0%)\n","          * 持有/準備金比率僅在 >= 90 時貢獻權重。\n","        - 原始壓力指數 (0-100) 計算完成 (1918 點)。\n","        - 已執行指數平滑 (窗口: 5 天, 中心)。\n","  - 步驟 4: 計算 MACD 動能指標 (可選)...\n","    > 使用 MACD 參數: (12, 26, 9)\n","      - MACD Histogram 計算完成 (1918 點)\n","      - MACD 顏色計算完成。\n","\n","================================================================================\n","儲存格: Cell 8: 計算衍生指標與壓力指數 (v1.0) **執行總結報告**\n","**狀態:** ✅ 成功\n","**執行時間:** 0.16 秒\n","**完成時間:** 2025-05-07 12:50:26 CST+0800\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'merged_data_shape': (1918, 10),\n","  'project_config_keys': [ 'project_name',\n","                           'version',\n","                           'fred_api_key',\n","                           'timezone',\n","                           'log_level',\n","                           'default_start_date',\n","                           'fallback_start_date',\n","                           'trend_plot_days',\n","                           'enable_lt_bond_etf_plot',\n","                           'lt_bond_etf_ticker',\n","                           'ny_fed_positions_urls',\n","                           'sbp2013_cols_to_sum',\n","                           'sbp2001_cols_to_sum',\n","                           'rolling_window_days',\n","                           'weights',\n","                           'smoothing_window_stress_index',\n","                           'threshold_high_stress_color',\n","                           'threshold_ratio_color',\n","                           'enable_macd_momentum_plot',\n","                           'macd_params',\n","                           'macd_colors',\n","                           '_tz_info',\n","                           '_tz_name'],\n","  'stress_index_window': 252,\n","  'stress_index_min_periods': 151,\n","  'stress_index_weights': { 'sofr_dev': 0.35,\n","                            'spread_inv': 0.1,\n","                            'gross_pos': 0.05,\n","                            'move': 0.25,\n","                            'vix': 0.15,\n","                            'pos_res_ratio': 0.1},\n","  'stress_index_ratio_threshold': 90,\n","  'stress_index_smoothing_window': 5,\n","  'enable_macd': True,\n","  'macd_params': {'fast': 12, 'slow': 26, 'signal': 9},\n","  'macd_colors': { 'blue': '#6495ED',\n","                   'green': '#3CB371',\n","                   'red': '#B22222'}}\n","\n","**📝 執行註記:**\n","- 讀取到 merged_data_df (維度: (1918, 10)) 和 PROJECT_CONFIG。\n","- 欄位 'SOFR' 已是數值類型。\n","- 欄位 'DGS10' 已是數值類型。\n","- 欄位 'DGS2' 已是數值類型。\n","- 欄位 'Volatility_Index' 已是數值類型。\n","- 欄位 'VIX' 已是數值類型。\n","- 欄位 'Total_Gross_Positions_Millions' 已是數值類型。\n","- 欄位 'Reserves' 已是數值類型。\n","- 欄位 'RRP_Amount_Billions' 已是數值類型。\n","- 欄位 'ETF_TLT_Price' 已是數值類型。\n","- 利差 (Spread_10Y2Y) 計算完成。\n","- SOFR 60日均線和偏差 (SOFR_MA60, SOFR_Dev) 計算完成。\n","- 持有量/準備金比率 (Pos_Res_Ratio) 計算完成。\n","- 已計算成分 'sofr_dev' 的滾動排名。\n","- 已計算成分 'spread_inv' (反轉利差) 的滾動排名。\n","- 已計算成分 'gross_pos' 的滾動排名。\n","- 已計算成分 'move' 的滾動排名。\n","- 已計算成分 'vix' 的滾動排名。\n","- 已計算成分 'pos_res_ratio' 的滾動排名。\n","- 壓力指數使用成分及正規化權重: {'sofr_dev': 0.35, 'spread_inv': 0.1, 'gross_pos': 0.05, 'move': 0.25, 'vix': 0.15, 'pos_res_ratio': 0.1}\n","- 原始壓力指數計算完成。\n","- 壓力指數已平滑 (窗口: 5)。\n","- MACD Histogram 計算完成。\n","- MACD 顏色計算完成。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'indicators_calculated': { 'sofr_dev': np.True_,\n","                             'spread': np.True_,\n","                             'pos_res_ratio': np.True_},\n","  'stress_index_calculated': True,\n","  'stress_index_final_points': 1918,\n","  'macd_calculated': True,\n","  'macd_final_points': 1918,\n","  'output_dataframe_exists': '是',\n","  'output_dataframe_type': \"<class 'pandas.core.frame.DataFrame'>\",\n","  'output_dataframe_shape': (1918, 18),\n","  'output_dataframe_columns_preview': [ '...',\n","                                        'Total_Gross_Positions_Millions',\n","                                        'SRF_Amount_Billions',\n","                                        'Spread_10Y2Y',\n","                                        'SOFR_MA60',\n","                                        'SOFR_Dev',\n","                                        'Pos_Res_Ratio',\n","                                        'Dealer_Stress_Index_Raw',\n","                                        'Dealer_Stress_Index',\n","                                        'Stress_Index_MACD_Hist',\n","                                        'Stress_Index_MACD_Color']}\n","================================================================================\n","\n"]}]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.0 (Cell 9 - 產生時間序列圖表)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 9: 產生時間序列圖表\n","# --------------------------------------------------\n","# 功能: 調用 Cell 2 中定義的 `plot_results` 函式，繪製包含多個指標\n","#       (SOFR, Spread, MOVE, VIX, 持有量, 準備金, 比率, 壓力指數, MACD, ETF)\n","#       的時間序列圖表。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 2', 'Cell 3', 'Cell 8']\n","# 輸入: ['global:final_df', 'global:PROJECT_CONFIG', 'global:validated_start_dt',\n","#        'global:validated_end_dt', 'global:libs_loaded']\n","# 輸出: (在儲存格輸出區域顯示 Matplotlib 圖表)\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1, 2, 3, 8 是否成功執行，確保 `final_df`,\n","#   `PROJECT_CONFIG`, `validated_start_dt`, `validated_end_dt` 可用，\n","#   且繪圖相關函式庫 (matplotlib, pandas, numpy) 和 `plot_results` 函式已定義。\n","# * **準備參數**:\n","#   * 從 `PROJECT_CONFIG` 提取繪圖所需的參數 (平滑窗口, 閾值, 顏色, ETF Ticker等)。\n","#   * **檢查數據可用性**: 根據 `final_df` 中實際存在的數據欄位和非空值情況，\n","#     確定哪些圖表可以繪製 (設置 `*_ok` 標誌)。例如，檢查 'SOFR' 列是否存在且有數據，\n","#     才設置 `sofr_ok = True`。\n","# * **調用繪圖函式**:\n","#   * 調用 Cell 2 中定義的 `plot_results` 函式。\n","#   * 將 `final_df`、繪圖標誌字典、相關參數和日期範圍傳遞給函式。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將主要的圖表生成步驟放在此儲存格。\n","# * 核心邏輯是調用已定義好的 `plot_results` 函式。\n","# * 在調用前仔細檢查每個子圖所需的數據是否真的存在於 `final_df` 中，\n","#   避免因缺少數據而導致繪圖函式內部出錯。\n","# * 從 `PROJECT_CONFIG` 集中獲取繪圖參數。\n","#\n","# ## 重要假設：\n","# * Cell 1, 2, 3, 8 已成功執行。\n","# * `final_df` DataFrame 已成功生成並包含計算結果。\n","# * `plot_results` 函式已在 Cell 2 中成功定義。\n","# * Matplotlib 函式庫已成功載入。\n","#\n","# ## 主要輸出/狀態變更：\n","# * 在儲存格輸出區域顯示包含多個子圖的 Matplotlib 圖表。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 9) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 檢查輸出區域是否成功顯示了預期的圖表。\n","# * 如果圖表未顯示或缺少某些子圖，請檢查 Cell 8 的執行報告，確認相關數據是否\n","#   成功計算，以及本儲存格的警告訊息。\n","# * **後續步驟:** 執行 **Cell 10: 產生趨勢圖與儀表板**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime # 雖然 Cell 1 已導入，為清晰起見再次導入\n","\n","# --- 第三方庫導入 ---\n","# 假設 Cell 1 已確保這些庫可用，但為防萬一再次檢查\n","try:\n","    import pandas as pd\n","    import numpy as np\n","    import matplotlib.pyplot as plt # 主要用於可能的 plt.show() 或錯誤處理\n","    print(\"繪圖所需函式庫 (pandas, numpy, matplotlib) 看似可用。\")\n","except ImportError as e:\n","    print(f\"警告：導入繪圖所需函式庫失敗({e})。\")\n","    pd = None\n","    np = None\n","    plt = None\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 9: 產生時間序列圖表\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {'plots_generated': False} # 記錄是否成功調用繪圖\n","_cell_generated_files = [] # 如果 plot_results 保存文件，可以在那裡添加\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.0) 開始執行 ---\")\n","\n","    # 檢查必要的函式庫\n","    if not pd or not np or not plt or 'libs_loaded' not in globals():\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：缺少 pandas, numpy, matplotlib 函式庫或 Cell 1 未成功執行。\"; raise ImportError(_cell_error)\n","    if not libs_loaded.get('pandas') or not libs_loaded.get('numpy') or not libs_loaded.get('matplotlib'):\n","         _cell_status = \"失敗\"; _cell_error = f\"依賴錯誤：Cell 1 未能成功載入 pandas, numpy 或 matplotlib。\"; raise ImportError(_cell_error)\n","\n","    # 檢查來自先前 Cell 的必要全局變數和函式\n","    if 'final_df' not in globals() or not isinstance(final_df, pd.DataFrame):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 8 的有效 final_df DataFrame。\"; raise NameError(_cell_error)\n","    if final_df.empty:\n","        _cell_status = \"失敗\"; _cell_error = \"輸入錯誤：來自 Cell 8 的 final_df 為空，無法繪圖。\"; raise ValueError(_cell_error)\n","    if 'PROJECT_CONFIG' not in globals() or not isinstance(PROJECT_CONFIG, dict):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 PROJECT_CONFIG。\"; raise NameError(_cell_error)\n","    if 'validated_start_dt' not in globals() or not isinstance(validated_start_dt, pd.Timestamp):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 3 的有效 validated_start_dt。\"; raise NameError(_cell_error)\n","    if 'validated_end_dt' not in globals() or not isinstance(validated_end_dt, pd.Timestamp):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 3 的有效 validated_end_dt。\"; raise NameError(_cell_error)\n","    if 'plot_results' not in globals() or not callable(plot_results):\n","         _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 2 的 plot_results 函式。\"; raise NameError(_cell_error)\n","\n","    _cell_inputs['final_df_shape'] = final_df.shape\n","    _cell_inputs['start_date'] = validated_start_dt.strftime('%Y-%m-%d')\n","    _cell_inputs['end_date'] = validated_end_dt.strftime('%Y-%m-%d')\n","    _cell_notes.append(f\"讀取到 final_df (維度: {final_df.shape}) 和繪圖函式。\")\n","    print(f\"  - 步驟 0: 依賴檢查通過。\")\n","\n","    # --- 1. 準備繪圖參數和標誌 ---\n","    print(\"  - 步驟 1: 準備繪圖參數和檢查數據可用性...\")\n","    logger.info(\"步驟 1: 準備繪圖參數...\")\n","\n","    # 從 PROJECT_CONFIG 獲取參數\n","    smoothing_window = PROJECT_CONFIG.get('smoothing_window_stress_index', 5)\n","    threshold_stress = PROJECT_CONFIG.get('threshold_high_stress_color', 55)\n","    threshold_ratio = PROJECT_CONFIG.get('threshold_ratio_color', 90)\n","    enable_macd = PROJECT_CONFIG.get('enable_macd_momentum_plot', False)\n","    macd_p = PROJECT_CONFIG.get('macd_params', {})\n","    macd_c = PROJECT_CONFIG.get('macd_colors', {})\n","    enable_etf = PROJECT_CONFIG.get('enable_lt_bond_etf_plot', False)\n","    etf_ticker = PROJECT_CONFIG.get('lt_bond_etf_ticker', '').strip().upper()\n","\n","    _cell_inputs['smoothing_window'] = smoothing_window\n","    _cell_inputs['threshold_stress'] = threshold_stress\n","    _cell_inputs['threshold_ratio'] = threshold_ratio\n","    _cell_inputs['enable_macd'] = enable_macd\n","    _cell_inputs['enable_etf'] = enable_etf\n","    _cell_inputs['etf_ticker'] = etf_ticker\n","\n","    # 檢查各繪圖所需數據的實際可用性\n","    plots_available = {}\n","    plots_available['SOFR'] = 'SOFR' in final_df and final_df['SOFR'].notna().any()\n","    plots_available['Spread'] = 'Spread_10Y2Y' in final_df and final_df['Spread_10Y2Y'].notna().any()\n","    plots_available['Volatility'] = 'Volatility_Index' in final_df and final_df['Volatility_Index'].notna().any()\n","    plots_available['VIX'] = 'VIX' in final_df and final_df['VIX'].notna().any()\n","    plots_available['GrossPos'] = 'Total_Gross_Positions_Millions' in final_df and final_df['Total_Gross_Positions_Millions'].notna().any()\n","    plots_available['StressIndex'] = 'Dealer_Stress_Index' in final_df and final_df['Dealer_Stress_Index'].notna().any()\n","\n","    reserves_ok = 'Reserves' in final_df and final_df['Reserves'].notna().any()\n","    ratio_ok = 'Pos_Res_Ratio' in final_df and final_df['Pos_Res_Ratio'].notna().any()\n","    macd_ok = enable_macd and 'Stress_Index_MACD_Hist' in final_df and final_df['Stress_Index_MACD_Hist'].notna().any()\n","\n","    etf_col_name_plot = f'ETF_{etf_ticker}_Price' if etf_ticker else None\n","    etf_ok = enable_etf and etf_col_name_plot and etf_col_name_plot in final_df and final_df[etf_col_name_plot].notna().any()\n","\n","    _cell_outputs['plots_availability'] = plots_available\n","    _cell_outputs['reserves_plot_possible'] = reserves_ok\n","    _cell_outputs['ratio_plot_possible'] = ratio_ok\n","    _cell_outputs['macd_plot_possible'] = macd_ok\n","    _cell_outputs['etf_plot_possible'] = etf_ok\n","\n","    print(\"    > 數據可用性檢查完成:\")\n","    for k, v in plots_available.items(): print(f\"      - {k}: {'可繪製' if v else '數據不足'}\")\n","    print(f\"      - Reserves: {'可繪製' if reserves_ok else '數據不足'}\")\n","    print(f\"      - Ratio: {'可繪製' if ratio_ok else '數據不足'}\")\n","    print(f\"      - MACD: {'可繪製' if macd_ok else ('未啟用' if not enable_macd else '數據不足')}\")\n","    print(f\"      - ETF ({etf_ticker}): {'可繪製' if etf_ok else ('未啟用/Ticker無效' if not enable_etf or not etf_ticker else '數據不足')}\")\n","\n","    # --- 2. 調用繪圖函式 ---\n","    print(\"\\n  - 步驟 2: 調用 plot_results 函式生成圖表...\")\n","    logger.info(\"步驟 2: 調用 plot_results 函式...\")\n","\n","    # 準備波動率指數名稱和來源 (雖然 Cell 5 應該有，但以防萬一)\n","    # 這裡可以考慮從 EXECUTION_TRACKER 讀取 Cell 5 的輸出，但為簡化直接用預設值\n","    vol_name = \"^MOVE\" if plots_available['Volatility'] else \"MOVE\"\n","    vol_source = \"Yahoo Finance\" if plots_available['Volatility'] else \"N/A\"\n","\n","    # 檢查是否有任何圖表可以繪製\n","    can_plot_anything = any(plots_available.values()) or reserves_ok or ratio_ok or macd_ok or etf_ok\n","    if can_plot_anything:\n","        try:\n","            plot_results(\n","                final_df=final_df,\n","                plots_to_draw_flags=plots_available,\n","                vol_index_fetched_name=vol_name,\n","                vol_data_source=vol_source,\n","                smoothing_window_stress_index=smoothing_window,\n","                threshold_high_stress_color=threshold_stress,\n","                start_dt=validated_start_dt, # 傳遞 datetime 物件\n","                end_dt=validated_end_dt,     # 傳遞 datetime 物件\n","                reserves_plot_ok=reserves_ok,\n","                ratio_plot_ok=ratio_ok,\n","                threshold_ratio_color=threshold_ratio,\n","                enable_macd_momentum_plot=enable_macd, # 傳遞啟用標誌\n","                macd_fast_period=macd_p.get('fast', 12),\n","                macd_slow_period=macd_p.get('slow', 26),\n","                macd_signal_period=macd_p.get('signal', 9),\n","                macd_color_blue=macd_c.get('blue', \"#6495ED\"),\n","                macd_color_green=macd_c.get('green', \"#3CB371\"),\n","                macd_color_red=macd_c.get('red', \"#B22222\"),\n","                lt_bond_etf_plot_ok=etf_ok, # 傳遞實際是否可繪製的標誌\n","                lt_bond_etf_ticker_used=etf_ticker if etf_ok else None\n","            )\n","            _cell_outputs['plots_generated'] = True\n","            _cell_notes.append(\"已成功調用 plot_results 函式。圖表應顯示在下方。\")\n","            print(\"    > plot_results 函式調用完成。\")\n","        except Exception as e_plot:\n","            _cell_status = \"失敗\"\n","            _cell_error = f\"調用 plot_results 函式時發生錯誤: {e_plot}\"\n","            _cell_traceback = traceback.format_exc()\n","            logger.error(f\"{_cell_identifier} - 調用繪圖函式失敗\", exc_info=True)\n","            print(f\"    > 錯誤：調用繪圖函式失敗: {e_plot}\")\n","            _cell_outputs['plots_generated'] = False\n","            # 嘗試關閉可能未正常關閉的圖形\n","            try: plt.close('all')\n","            except: pass\n","    else:\n","        _cell_warnings.append(\"沒有任何可繪製的時間序列數據。\")\n","        print(\"    > 警告：沒有任何可繪製的時間序列數據，跳過繪圖。\")\n","        _cell_outputs['plots_generated'] = False\n","\n","\n","    # --- 標記 Cell 9 執行狀態 ---\n","    if _cell_status == \"處理中\": # 如果前面沒有設置為失敗\n","        _cell_status = \"成功\"\n","        if not _cell_outputs['plots_generated'] and can_plot_anything: # 如果有數據但繪圖失敗\n","             _cell_status = \"失敗\" # 應該在 except 中處理了，但雙重保險\n","        elif not can_plot_anything: # 如果本來就沒數據畫\n","             _cell_status = \"成功 (無圖可繪)\"\n","        elif _cell_warnings: # 如果有警告\n","             _cell_status = \"成功 (有警告)\"\n","    logger.info(f\"{_cell_identifier} - 繪圖完成，狀態: {_cell_status}\")\n","\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError, KeyError) as e:\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗。\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"無圖可繪\" in _cell_status: _final_status_icon = \"📊\" # 特殊圖標表示無圖\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    # 打印報告\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.0) **執行總結報告**\")\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    if _cell_status != \"失敗\":\n","        outputs_display['info'] = \"時間序列圖表應已顯示在上方輸出區域。\"\n","        if not outputs_display.get('plots_generated', False):\n","             outputs_display['info'] += \" (但實際繪圖可能因數據不足或錯誤而跳過)\"\n","    else:\n","        outputs_display['info'] = \"因執行失敗，未生成圖表。\"\n","\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del smoothing_window, threshold_stress, threshold_ratio, enable_macd, macd_p\n","    except NameError: pass\n","    try: del macd_c, enable_etf, etf_ticker, plots_available, reserves_ok, ratio_ok\n","    except NameError: pass\n","    try: del macd_ok, etf_col_name_plot, etf_ok, vol_name, vol_source, can_plot_anything\n","    except NameError: pass\n","    try: del outputs_display # 清理新增的變數\n","    except NameError: pass\n","    # 全局變數保留\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 9: 產生時間序列圖表\n","# 功能: 調用繪圖函式生成包含多個指標的時間序列圖表。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 2', 'Cell 3', 'Cell 8']\n","# 輸入: ['global:final_df', 'global:PROJECT_CONFIG', 'global:validated_start_dt', 'global:validated_end_dt', 'global:libs_loaded']\n","# 輸出: (顯示 Matplotlib 圖表)\n","# ==================================================\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"J72iqNAMyUCP","executionInfo":{"status":"ok","timestamp":1746593443681,"user_tz":-480,"elapsed":16719,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"16b2a814-28c2-49ff-a6a3-06f0ee483a83"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:26,634 - __main__ - INFO - Cell 9: 產生時間序列圖表 - 開始執行...\n","2025-05-07 04:50:26,635 - __main__ - INFO - 步驟 1: 準備繪圖參數...\n","2025-05-07 04:50:26,643 - __main__ - INFO - 步驟 2: 調用 plot_results 函式...\n"]},{"output_type":"stream","name":"stdout","text":["繪圖所需函式庫 (pandas, numpy, matplotlib) 看似可用。\n","\n","--- Cell 9: 產生時間序列圖表 (v1.0) 開始執行 ---\n","  - 步驟 0: 依賴檢查通過。\n","  - 步驟 1: 準備繪圖參數和檢查數據可用性...\n","    > 數據可用性檢查完成:\n","      - SOFR: 可繪製\n","      - Spread: 可繪製\n","      - Volatility: 可繪製\n","      - VIX: 可繪製\n","      - GrossPos: 可繪製\n","      - StressIndex: 可繪製\n","      - Reserves: 可繪製\n","      - Ratio: 可繪製\n","      - MACD: 可繪製\n","      - ETF (TLT): 可繪製\n","\n","  - 步驟 2: 調用 plot_results 函式生成圖表...\n","\n","--- [plot_results] 正在生成時間序列圖 (5x2 佈局, 輸出: show) ---\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1400x2000 with 10 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:42,347 - __main__ - INFO - Cell 9: 產生時間序列圖表 - 繪圖完成，狀態: 成功\n"]},{"output_type":"stream","name":"stdout","text":["  [plot_results] 圖表已顯示。\n","    > plot_results 函式調用完成。\n","\n","================================================================================\n","儲存格: Cell 9: 產生時間序列圖表 (v1.0) **執行總結報告**\n","**狀態:** ✅ 成功\n","**執行時間:** 15.76 秒\n","**完成時間:** 2025-05-07 12:50:42 CST+0800\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'final_df_shape': (1918, 18),\n","  'start_date': '2018-01-01',\n","  'end_date': '2025-05-07',\n","  'smoothing_window': 5,\n","  'threshold_stress': 55,\n","  'threshold_ratio': 90,\n","  'enable_macd': True,\n","  'enable_etf': True,\n","  'etf_ticker': 'TLT'}\n","\n","**📝 執行註記:**\n","- 讀取到 final_df (維度: (1918, 18)) 和繪圖函式。\n","- 已成功調用 plot_results 函式。圖表應顯示在下方。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'plots_generated': True,\n","  'plots_availability': { 'SOFR': np.True_,\n","                          'Spread': np.True_,\n","                          'Volatility': np.True_,\n","                          'VIX': np.True_,\n","                          'GrossPos': np.True_,\n","                          'StressIndex': np.True_},\n","  'reserves_plot_possible': np.True_,\n","  'ratio_plot_possible': np.True_,\n","  'macd_plot_possible': np.True_,\n","  'etf_plot_possible': np.True_,\n","  'info': '時間序列圖表應已顯示在上方輸出區域。'}\n","================================================================================\n","\n"]}]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.0 (Cell 10 - 產生趨勢圖與儀表板)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 10: 產生趨勢圖與儀表板\n","# --------------------------------------------------\n","# 功能: 顯示最終 DataFrame (`final_df`) 的尾部數據預覽。\n","#       調用 Cell 2 定義的函式，繪製主觀壓力儀表板和近期壓力指數趨勢圖。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 2', 'Cell 8']\n","# 輸入: ['global:final_df', 'global:PROJECT_CONFIG', 'global:libs_loaded']\n","# 輸出: (在儲存格輸出區域顯示數據表格和 Matplotlib 圖表)\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1, 2, 8 是否成功執行，確保 `final_df`,\n","#   `PROJECT_CONFIG` 可用，且繪圖相關函式庫 (matplotlib, pandas, numpy)\n","#   和 `plot_gemini_gauge_mpl`, `plot_trend_colored` 函式已定義。\n","#   檢查 `IPython.display` 是否可用於美化表格。\n","# * **數據預覽**:\n","#   * 從 `final_df` 中選取需要預覽的欄位。\n","#   * 移除全為 NaN 的行，選取最後 5 行數據。\n","#   * 定義各欄位的顯示格式。\n","#   * 使用 `IPython.display` (若可用) 或 `print` 顯示格式化的數據表格。\n","# * **繪製儀表板**:\n","#   * 從 `final_df` 獲取最新的有效壓力指數值。\n","#   * 根據壓力值和預設閾值 (60, 80) 判斷壓力等級描述 (英文) 和顏色分類。\n","#   * 調用 Cell 2 的 `plot_gemini_gauge_mpl` 函式繪製儀表板。\n","#   * 包含錯誤處理，若無法獲取最新壓力值則不繪製。\n","# * **繪製趨勢圖**:\n","#   * 從 `PROJECT_CONFIG` 獲取要顯示的趨勢天數 (`trend_plot_days`)。\n","#   * 獲取壓力指數的時間序列數據。\n","#   * 調用 Cell 2 的 `plot_trend_colored` 函式繪製帶顏色編碼的趨勢圖。\n","#   * 包含錯誤處理，若數據不足則不繪製。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將數據預覽、儀表板和趨勢圖這三個相關的輸出步驟組合在此儲存格。\n","# * 重用 Cell 2 中定義的繪圖函式。\n","# * 從 `PROJECT_CONFIG` 讀取趨勢圖的天數設定。\n","# * 包含對數據有效性的檢查，確保在有數據時才進行繪圖。\n","#\n","# ## 重要假設：\n","# * Cell 1, 2, 8 已成功執行。\n","# * `final_df` DataFrame 已成功生成並包含計算結果，特別是 'Dealer_Stress_Index' 列。\n","# * `plot_gemini_gauge_mpl` 和 `plot_trend_colored` 函式已在 Cell 2 中成功定義。\n","# * Matplotlib 和 IPython (可選，用於表格) 函式庫已成功載入。\n","#\n","# ## 主要輸出/狀態變更：\n","# * 在儲存格輸出區域顯示數據預覽表格、壓力儀表板圖和壓力趨勢圖。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 10) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 檢查輸出區域是否成功顯示了預期的表格和圖表。\n","# * 如果缺少圖表，請檢查 Cell 8 的執行報告確認壓力指數是否成功計算。\n","# * **後續步驟:** 執行 **Cell 11: 顯示文字分析結果**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime\n","\n","# --- 第三方庫導入 ---\n","# 假設 Cell 1 已確保這些庫可用，但為防萬一再次檢查\n","try:\n","    import pandas as pd\n","    import numpy as np\n","    import matplotlib.pyplot as plt # 主要用於可能的 plt.show() 或錯誤處理\n","    # 嘗試導入 IPython 用於美化表格\n","    from IPython.display import display, HTML\n","    _IPYTHON_AVAILABLE = True\n","    print(\"數據預覽與繪圖所需函式庫 (pandas, numpy, matplotlib, IPython) 看似可用。\")\n","except ImportError:\n","    _IPYTHON_AVAILABLE = False\n","    # 檢查核心庫是否至少存在\n","    try:\n","        import pandas as pd\n","        import numpy as np\n","        import matplotlib.pyplot as plt\n","        print(\"警告：無法導入 IPython.display，表格將以純文字顯示。\")\n","        print(\"核心繪圖庫 (pandas, numpy, matplotlib) 看似可用。\")\n","    except ImportError as e:\n","        print(f\"錯誤：導入核心繪圖所需函式庫失敗({e})。\")\n","        pd = None\n","        np = None\n","        plt = None\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 10: 產生趨勢圖與儀表板\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {'preview_displayed': False, 'gauge_displayed': False, 'trend_displayed': False}\n","_cell_generated_files = []\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.0) 開始執行 ---\")\n","\n","    # 檢查必要的函式庫\n","    if not pd or not np or not plt or 'libs_loaded' not in globals():\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：缺少 pandas, numpy, matplotlib 函式庫或 Cell 1 未成功執行。\"; raise ImportError(_cell_error)\n","    if not libs_loaded.get('pandas') or not libs_loaded.get('numpy') or not libs_loaded.get('matplotlib'):\n","         _cell_status = \"失敗\"; _cell_error = f\"依賴錯誤：Cell 1 未能成功載入 pandas, numpy 或 matplotlib。\"; raise ImportError(_cell_error)\n","\n","    # 檢查來自先前 Cell 的必要全局變數和函式\n","    if 'final_df' not in globals() or not isinstance(final_df, pd.DataFrame):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 8 的有效 final_df DataFrame。\"; raise NameError(_cell_error)\n","    if final_df.empty:\n","        # 如果 final_df 為空，無法繼續\n","        _cell_status = \"跳過\"; _cell_notes.append(\"輸入 DataFrame (final_df) 為空，跳過此儲存格。\"); raise ValueError(\"輸入 DataFrame 為空\")\n","    if 'PROJECT_CONFIG' not in globals() or not isinstance(PROJECT_CONFIG, dict):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 PROJECT_CONFIG。\"; raise NameError(_cell_error)\n","    if 'plot_gemini_gauge_mpl' not in globals() or not callable(plot_gemini_gauge_mpl):\n","         _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 2 的 plot_gemini_gauge_mpl 函式。\"; raise NameError(_cell_error)\n","    if 'plot_trend_colored' not in globals() or not callable(plot_trend_colored):\n","         _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 2 的 plot_trend_colored 函式。\"; raise NameError(_cell_error)\n","\n","    _cell_inputs['final_df_shape'] = final_df.shape\n","    _cell_inputs['project_config_keys_subset'] = ['trend_plot_days'] # 記錄用到的配置\n","    _cell_notes.append(f\"讀取到 final_df (維度: {final_df.shape}) 和繪圖函式。\")\n","    print(f\"  - 步驟 0: 依賴檢查通過。\")\n","\n","    # --- 1. 數據預覽 ---\n","    print(\"\\n--- 數據預覽 (最近 5 筆有效數據) ---\")\n","    logger.info(\"步驟 1: 顯示數據預覽...\")\n","    try:\n","        # 選擇要預覽的列 (與原腳本 Section 12 類似)\n","        cols_to_preview = []\n","        preview_cols_map = {\n","            'SOFR': 'SOFR', 'Spread': 'Spread_10Y2Y', 'MOVE': 'Volatility_Index', 'VIX': 'VIX',\n","            'GrossPos': 'Total_Gross_Positions_Millions', 'Reserves': 'Reserves', 'Ratio': 'Pos_Res_Ratio',\n","            'StressIndex': 'Dealer_Stress_Index', 'StressIndexRaw': 'Dealer_Stress_Index_Raw',\n","            'MACD_Hist': 'Stress_Index_MACD_Hist'\n","        }\n","        # 檢查 ETF 列\n","        etf_ticker_preview = PROJECT_CONFIG.get('lt_bond_etf_ticker', '').strip().upper()\n","        etf_col_preview = f'ETF_{etf_ticker_preview}_Price' if etf_ticker_preview else None\n","        if etf_col_preview: preview_cols_map['LT_Bond_ETF'] = etf_col_preview\n","\n","        for key, col_name in preview_cols_map.items():\n","            if col_name and col_name in final_df.columns and final_df[col_name].notna().any():\n","                cols_to_preview.append(col_name)\n","\n","        if cols_to_preview:\n","            preview_df = final_df[cols_to_preview].dropna(how='all').tail()\n","\n","            if not preview_df.empty:\n","                formatters = {}\n","                if 'Spread_10Y2Y' in preview_df.columns: formatters['Spread_10Y2Y'] = lambda x: f\"{x*100:.1f} bps\" if pd.notna(x) else \"NaN\"\n","                if 'Total_Gross_Positions_Millions' in preview_df.columns: formatters['Total_Gross_Positions_Millions'] = lambda x: f\"${x:,.0f} Mn\" if pd.notna(x) else \"NaN\"\n","                if 'Reserves' in preview_df.columns: formatters['Reserves'] = lambda x: f\"${x:,.0f} Mn\" if pd.notna(x) else \"NaN\"\n","                if 'Dealer_Stress_Index' in preview_df.columns: formatters['Dealer_Stress_Index'] = '{:.2f}'.format\n","                if 'Dealer_Stress_Index_Raw' in preview_df.columns: formatters['Dealer_Stress_Index_Raw'] = '{:.2f}'.format\n","                if 'Volatility_Index' in preview_df.columns: formatters['Volatility_Index'] = '{:.2f}'.format\n","                if 'VIX' in preview_df.columns: formatters['VIX'] = '{:.2f}'.format\n","                if 'SOFR' in preview_df.columns: formatters['SOFR'] = lambda x: f\"{x:.3f}%\" if pd.notna(x) else \"NaN\"\n","                if 'Pos_Res_Ratio' in preview_df.columns: formatters['Pos_Res_Ratio'] = '{:.2f}'.format\n","                if 'Stress_Index_MACD_Hist' in preview_df.columns: formatters['Stress_Index_MACD_Hist'] = '{:.3f}'.format\n","                if etf_col_preview and etf_col_preview in preview_df.columns: formatters[etf_col_preview] = '{:.2f}'.format\n","\n","                if _IPYTHON_AVAILABLE:\n","                    display(HTML(preview_df.style.format(formatters, na_rep='NaN')\n","                                 .set_table_styles([{'selector': 'th', 'props': [('text-align', 'left')]},\n","                                                    {'selector': 'td', 'props': [('text-align', 'right')]}])\n","                                 .to_html()))\n","                    _cell_notes.append(\"已使用 IPython 顯示格式化數據預覽。\")\n","                else:\n","                    print(preview_df.to_string(formatters=formatters))\n","                    _cell_notes.append(\"已使用純文字顯示數據預覽。\")\n","                _cell_outputs['preview_displayed'] = True\n","            else:\n","                print(\"無數據可供預覽 (過濾後為空)。\")\n","                _cell_notes.append(\"無數據可供預覽。\")\n","        else:\n","            print(\"沒有可供預覽的數據欄位。\")\n","            _cell_notes.append(\"無可預覽欄位。\")\n","    except Exception as e_preview:\n","        _cell_warnings.append(f\"顯示數據預覽時出錯: {e_preview}\")\n","        print(f\"警告：顯示數據預覽時出錯: {e_preview}\")\n","        logger.warning(\"顯示數據預覽時出錯\", exc_info=True)\n","\n","    # --- 2. 繪製壓力儀表板 ---\n","    print(\"\\n--- Gemini 主觀壓力儀表板 ---\")\n","    logger.info(\"步驟 2: 繪製壓力儀表板...\")\n","    latest_stress_value = np.nan\n","    level_desc_en = \"Cannot Evaluate\"\n","    color_cat = \"Unknown\"\n","    gauge_drawn = False\n","\n","    if 'Dealer_Stress_Index' in final_df and final_df['Dealer_Stress_Index'].notna().any():\n","        try:\n","            latest_stress_series = final_df['Dealer_Stress_Index'].dropna()\n","            if not latest_stress_series.empty:\n","                latest_stress_value = latest_stress_series.iloc[-1]\n","                latest_date_gauge = latest_stress_series.index[-1].strftime('%Y-%m-%d')\n","                smoothing_status_subj = f\"(指數已 {PROJECT_CONFIG.get('smoothing_window_stress_index', 0)}日 中心平滑)\" if PROJECT_CONFIG.get('smoothing_window_stress_index', 0) > 1 else \"(指數未平滑)\"\n","                print(f\"使用最新壓力指數 ({latest_date_gauge}): {latest_stress_value:.2f} {smoothing_status_subj}\")\n","\n","                if latest_stress_value < 60:\n","                    color_cat = \"Green\"\n","                    if latest_stress_value < 30: level_desc_en = \"Normal - Low Side\"\n","                    elif latest_stress_value < 50: level_desc_en = \"Normal\"\n","                    else: level_desc_en = \"Normal - High Side / Approaching Yellow\"\n","                elif 60 <= latest_stress_value < 80:\n","                    color_cat = \"Yellow\"; level_desc_en = \"High Stress\"\n","                else: # >= 80\n","                    color_cat = \"Red\"; level_desc_en = \"Extreme Stress / Significant Risk\"\n","\n","                # 調用繪圖函式\n","                plot_gemini_gauge_mpl(latest_stress_value, level_desc_en, color_cat)\n","                gauge_drawn = True\n","                _cell_notes.append(f\"壓力儀表板已生成 (值: {latest_stress_value:.2f}, 等級: {level_desc_en})。\")\n","            else:\n","                print(\"壓力指數數據有效但為空，無法生成儀表板。\")\n","                _cell_notes.append(\"壓力指數數據有效但為空，無法生成儀表板。\")\n","        except Exception as e_gauge:\n","            _cell_warnings.append(f\"繪製壓力儀表板時出錯: {e_gauge}\")\n","            print(f\"警告：繪製壓力儀表板時出錯: {e_gauge}\")\n","            logger.warning(\"繪製壓力儀表板時出錯\", exc_info=True)\n","    else:\n","        print(\"缺少有效的壓力指數數據 ('Dealer_Stress_Index')，無法生成儀表板。\")\n","        _cell_notes.append(\"缺少壓力指數數據，無法生成儀表板。\")\n","    _cell_outputs['gauge_displayed'] = gauge_drawn\n","    _cell_outputs['latest_stress_value'] = float(latest_stress_value) if pd.notna(latest_stress_value) else None\n","    _cell_outputs['stress_level_en'] = level_desc_en\n","\n","    # --- 3. 繪製近期趨勢圖 ---\n","    logger.info(\"步驟 3: 繪製近期趨勢圖...\")\n","    trend_drawn = False\n","    if 'Dealer_Stress_Index' in final_df and final_df['Dealer_Stress_Index'].notna().any():\n","        try:\n","            days_lookback = int(PROJECT_CONFIG.get('trend_plot_days', 60))\n","            days_lookback = max(2, days_lookback) # 確保至少 2 天\n","            _cell_inputs['trend_plot_days'] = days_lookback\n","            stress_series = final_df['Dealer_Stress_Index'] # 傳遞包含 NaN 的 Series，函式內部會 dropna\n","\n","            plot_trend_colored(stress_series, days_lookback)\n","            trend_drawn = True\n","            _cell_notes.append(f\"近期 ({days_lookback}天) 壓力趨勢圖已生成。\")\n","        except Exception as e_trend:\n","            _cell_warnings.append(f\"繪製趨勢圖時出錯: {e_trend}\")\n","            print(f\"警告：繪製趨勢圖時出錯: {e_trend}\")\n","            logger.warning(\"繪製趨勢圖時出錯\", exc_info=True)\n","    else:\n","        print(\"缺少有效的壓力指數數據 ('Dealer_Stress_Index')，無法生成趨勢圖。\")\n","        _cell_notes.append(\"缺少壓力指數數據，無法生成趨勢圖。\")\n","    _cell_outputs['trend_displayed'] = trend_drawn\n","\n","    # --- 標記 Cell 10 執行狀態 ---\n","    if _cell_status == \"處理中\": # 如果前面沒有設置為失敗\n","        _cell_status = \"成功\"\n","        if not gauge_drawn or not trend_drawn: # 如果有圖沒畫出來算警告\n","            _cell_status = \"成功 (部分輸出缺失)\"\n","            _cell_warnings.append(\"儀表板或趨勢圖未能成功顯示。\")\n","        elif _cell_warnings: # 如果有其他警告\n","             _cell_status = \"成功 (有警告)\"\n","    logger.info(f\"{_cell_identifier} - 預覽與繪圖完成，狀態: {_cell_status}\")\n","\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError, KeyError) as e:\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗。\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"部分輸出缺失\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    # 打印報告\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.0) **執行總結報告**\")\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    if _cell_status != \"失敗\" and _cell_status != \"跳過\":\n","        outputs_display['info'] = \"數據預覽、儀表板和趨勢圖應已顯示在上方輸出區域。\"\n","    elif _cell_status == \"跳過\":\n","         outputs_display['info'] = \"因輸入數據為空，跳過執行。\"\n","    else:\n","        outputs_display['info'] = \"因執行失敗，未生成輸出。\"\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del cols_to_preview, preview_cols_map, etf_ticker_preview, etf_col_preview\n","    except NameError: pass\n","    try: del key, col_name, preview_df, formatters, latest_stress_value, level_desc_en\n","    except NameError: pass\n","    try: del color_cat, gauge_drawn, latest_stress_series, latest_date_gauge, smoothing_status_subj\n","    except NameError: pass\n","    try: del trend_drawn, days_lookback, stress_series, outputs_display\n","    except NameError: pass\n","    # 全局變數保留\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 10: 產生趨勢圖與儀表板\n","# 功能: 顯示數據預覽，繪製壓力儀表板和近期趨勢圖。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 2', 'Cell 8']\n","# 輸入: ['global:final_df', 'global:PROJECT_CONFIG', 'global:libs_loaded']\n","# 輸出: (顯示數據表格和 Matplotlib 圖表)\n","# ==================================================\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"qUz_vQ1j3W3t","executionInfo":{"status":"ok","timestamp":1746593486137,"user_tz":-480,"elapsed":322,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"433502ab-6dd8-4ae0-b63f-5f90326e6733"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:51:25,341 - __main__ - INFO - Cell 10: 產生趨勢圖與儀表板 - 開始執行...\n","2025-05-07 04:51:25,342 - __main__ - INFO - 步驟 1: 顯示數據預覽...\n"]},{"output_type":"stream","name":"stdout","text":["數據預覽與繪圖所需函式庫 (pandas, numpy, matplotlib, IPython) 看似可用。\n","\n","--- Cell 10: 產生趨勢圖與儀表板 (v1.0) 開始執行 ---\n","  - 步驟 0: 依賴檢查通過。\n","\n","--- 數據預覽 (最近 5 筆有效數據) ---\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<style type=\"text/css\">\n","#T_c9d23 th {\n","  text-align: left;\n","}\n","#T_c9d23 td {\n","  text-align: right;\n","}\n","</style>\n","<table id=\"T_c9d23\">\n","  <thead>\n","    <tr>\n","      <th class=\"blank level0\" >&nbsp;</th>\n","      <th id=\"T_c9d23_level0_col0\" class=\"col_heading level0 col0\" >SOFR</th>\n","      <th id=\"T_c9d23_level0_col1\" class=\"col_heading level0 col1\" >Spread_10Y2Y</th>\n","      <th id=\"T_c9d23_level0_col2\" class=\"col_heading level0 col2\" >Volatility_Index</th>\n","      <th id=\"T_c9d23_level0_col3\" class=\"col_heading level0 col3\" >VIX</th>\n","      <th id=\"T_c9d23_level0_col4\" class=\"col_heading level0 col4\" >Total_Gross_Positions_Millions</th>\n","      <th id=\"T_c9d23_level0_col5\" class=\"col_heading level0 col5\" >Reserves</th>\n","      <th id=\"T_c9d23_level0_col6\" class=\"col_heading level0 col6\" >Pos_Res_Ratio</th>\n","      <th id=\"T_c9d23_level0_col7\" class=\"col_heading level0 col7\" >Dealer_Stress_Index</th>\n","      <th id=\"T_c9d23_level0_col8\" class=\"col_heading level0 col8\" >Dealer_Stress_Index_Raw</th>\n","      <th id=\"T_c9d23_level0_col9\" class=\"col_heading level0 col9\" >Stress_Index_MACD_Hist</th>\n","      <th id=\"T_c9d23_level0_col10\" class=\"col_heading level0 col10\" >ETF_TLT_Price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th id=\"T_c9d23_level0_row0\" class=\"row_heading level0 row0\" >2025-05-01 00:00:00</th>\n","      <td id=\"T_c9d23_row0_col0\" class=\"data row0 col0\" >4.390%</td>\n","      <td id=\"T_c9d23_row0_col1\" class=\"data row0 col1\" >55.0 bps</td>\n","      <td id=\"T_c9d23_row0_col2\" class=\"data row0 col2\" >107.33</td>\n","      <td id=\"T_c9d23_row0_col3\" class=\"data row0 col3\" >24.60</td>\n","      <td id=\"T_c9d23_row0_col4\" class=\"data row0 col4\" >$298,455 Mn</td>\n","      <td id=\"T_c9d23_row0_col5\" class=\"data row0 col5\" >$3,219 Mn</td>\n","      <td id=\"T_c9d23_row0_col6\" class=\"data row0 col6\" >92.71</td>\n","      <td id=\"T_c9d23_row0_col7\" class=\"data row0 col7\" >76.05</td>\n","      <td id=\"T_c9d23_row0_col8\" class=\"data row0 col8\" >79.88</td>\n","      <td id=\"T_c9d23_row0_col9\" class=\"data row0 col9\" >0.929</td>\n","      <td id=\"T_c9d23_row0_col10\" class=\"data row0 col10\" >88.69</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_c9d23_level0_row1\" class=\"row_heading level0 row1\" >2025-05-02 00:00:00</th>\n","      <td id=\"T_c9d23_row1_col0\" class=\"data row1 col0\" >4.360%</td>\n","      <td id=\"T_c9d23_row1_col1\" class=\"data row1 col1\" >50.0 bps</td>\n","      <td id=\"T_c9d23_row1_col2\" class=\"data row1 col2\" >101.40</td>\n","      <td id=\"T_c9d23_row1_col3\" class=\"data row1 col3\" >22.68</td>\n","      <td id=\"T_c9d23_row1_col4\" class=\"data row1 col4\" >$298,455 Mn</td>\n","      <td id=\"T_c9d23_row1_col5\" class=\"data row1 col5\" >$3,219 Mn</td>\n","      <td id=\"T_c9d23_row1_col6\" class=\"data row1 col6\" >92.71</td>\n","      <td id=\"T_c9d23_row1_col7\" class=\"data row1 col7\" >73.22</td>\n","      <td id=\"T_c9d23_row1_col8\" class=\"data row1 col8\" >73.14</td>\n","      <td id=\"T_c9d23_row1_col9\" class=\"data row1 col9\" >0.658</td>\n","      <td id=\"T_c9d23_row1_col10\" class=\"data row1 col10\" >87.73</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_c9d23_level0_row2\" class=\"row_heading level0 row2\" >2025-05-05 00:00:00</th>\n","      <td id=\"T_c9d23_row2_col0\" class=\"data row2 col0\" >4.330%</td>\n","      <td id=\"T_c9d23_row2_col1\" class=\"data row2 col1\" >53.0 bps</td>\n","      <td id=\"T_c9d23_row2_col2\" class=\"data row2 col2\" >104.45</td>\n","      <td id=\"T_c9d23_row2_col3\" class=\"data row2 col3\" >23.64</td>\n","      <td id=\"T_c9d23_row2_col4\" class=\"data row2 col4\" >$298,455 Mn</td>\n","      <td id=\"T_c9d23_row2_col5\" class=\"data row2 col5\" >$3,219 Mn</td>\n","      <td id=\"T_c9d23_row2_col6\" class=\"data row2 col6\" >92.71</td>\n","      <td id=\"T_c9d23_row2_col7\" class=\"data row2 col7\" >69.79</td>\n","      <td id=\"T_c9d23_row2_col8\" class=\"data row2 col8\" >64.83</td>\n","      <td id=\"T_c9d23_row2_col9\" class=\"data row2 col9\" >0.203</td>\n","      <td id=\"T_c9d23_row2_col10\" class=\"data row2 col10\" >87.24</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_c9d23_level0_row3\" class=\"row_heading level0 row3\" >2025-05-06 00:00:00</th>\n","      <td id=\"T_c9d23_row3_col0\" class=\"data row3 col0\" >4.330%</td>\n","      <td id=\"T_c9d23_row3_col1\" class=\"data row3 col1\" >53.0 bps</td>\n","      <td id=\"T_c9d23_row3_col2\" class=\"data row3 col2\" >106.18</td>\n","      <td id=\"T_c9d23_row3_col3\" class=\"data row3 col3\" >23.64</td>\n","      <td id=\"T_c9d23_row3_col4\" class=\"data row3 col4\" >$298,455 Mn</td>\n","      <td id=\"T_c9d23_row3_col5\" class=\"data row3 col5\" >$3,219 Mn</td>\n","      <td id=\"T_c9d23_row3_col6\" class=\"data row3 col6\" >92.71</td>\n","      <td id=\"T_c9d23_row3_col7\" class=\"data row3 col7\" >67.27</td>\n","      <td id=\"T_c9d23_row3_col8\" class=\"data row3 col8\" >65.63</td>\n","      <td id=\"T_c9d23_row3_col9\" class=\"data row3 col9\" >-0.285</td>\n","      <td id=\"T_c9d23_row3_col10\" class=\"data row3 col10\" >87.53</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_c9d23_level0_row4\" class=\"row_heading level0 row4\" >2025-05-07 00:00:00</th>\n","      <td id=\"T_c9d23_row4_col0\" class=\"data row4 col0\" >4.330%</td>\n","      <td id=\"T_c9d23_row4_col1\" class=\"data row4 col1\" >53.0 bps</td>\n","      <td id=\"T_c9d23_row4_col2\" class=\"data row4 col2\" >106.18</td>\n","      <td id=\"T_c9d23_row4_col3\" class=\"data row4 col3\" >23.64</td>\n","      <td id=\"T_c9d23_row4_col4\" class=\"data row4 col4\" >$298,455 Mn</td>\n","      <td id=\"T_c9d23_row4_col5\" class=\"data row4 col5\" >$3,219 Mn</td>\n","      <td id=\"T_c9d23_row4_col6\" class=\"data row4 col6\" >92.71</td>\n","      <td id=\"T_c9d23_row4_col7\" class=\"data row4 col7\" >65.31</td>\n","      <td id=\"T_c9d23_row4_col8\" class=\"data row4 col8\" >65.47</td>\n","      <td id=\"T_c9d23_row4_col9\" class=\"data row4 col9\" >-0.731</td>\n","      <td id=\"T_c9d23_row4_col10\" class=\"data row4 col10\" >87.53</td>\n","    </tr>\n","  </tbody>\n","</table>\n"]},"metadata":{}},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:51:25,354 - __main__ - INFO - 步驟 2: 繪製壓力儀表板...\n"]},{"output_type":"stream","name":"stdout","text":["\n","--- Gemini 主觀壓力儀表板 ---\n","使用最新壓力指數 (2025-05-07): 65.31 (指數已 5日 中心平滑)\n","\n","--- [plot_gemini_gauge_mpl] 正在生成壓力儀表板 (輸出: show) ---\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:51:25,482 - __main__ - INFO - 步驟 3: 繪製近期趨勢圖...\n"]},{"output_type":"stream","name":"stdout","text":["  [plot_gemini_gauge_mpl] 儀表板已顯示。\n","\n","--- [plot_trend_colored] 過去 60 天壓力指數趨勢圖 (輸出: show) ---\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x400 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:51:25,636 - __main__ - INFO - Cell 10: 產生趨勢圖與儀表板 - 預覽與繪圖完成，狀態: 成功\n"]},{"output_type":"stream","name":"stdout","text":["  [plot_trend_colored] 趨勢圖已顯示。\n","\n","================================================================================\n","儲存格: Cell 10: 產生趨勢圖與儀表板 (v1.0) **執行總結報告**\n","**狀態:** ✅ 成功\n","**執行時間:** 0.30 秒\n","**完成時間:** 2025-05-07 12:51:25 CST+0800\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'final_df_shape': (1918, 18),\n","  'project_config_keys_subset': ['trend_plot_days'],\n","  'trend_plot_days': 60}\n","\n","**📝 執行註記:**\n","- 讀取到 final_df (維度: (1918, 18)) 和繪圖函式。\n","- 已使用 IPython 顯示格式化數據預覽。\n","- 壓力儀表板已生成 (值: 65.31, 等級: High Stress)。\n","- 近期 (60天) 壓力趨勢圖已生成。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'preview_displayed': True,\n","  'gauge_displayed': True,\n","  'trend_displayed': True,\n","  'latest_stress_value': 65.31024694014152,\n","  'stress_level_en': 'High Stress',\n","  'info': '數據預覽、儀表板和趨勢圖應已顯示在上方輸出區域。'}\n","================================================================================\n","\n"]}]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.0 (Cell 11 - 顯示文字分析結果)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 11: 顯示文字分析結果\n","# --------------------------------------------------\n","# 功能: 根據 Cell 8 計算的最新壓力指數值，顯示格式化的文字分析報告，\n","#       包括歷史事件對比提醒和市場壓力情境分析。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 8']\n","# 輸入: ['global:final_df', 'global:libs_loaded']\n","# 輸出: (在儲存格輸出區域顯示文字或 Markdown 格式的分析報告)\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1 和 Cell 8 是否成功執行，確保 `final_df` 可用，\n","#   且 `pandas`, `numpy` 庫已載入。嘗試導入 `IPython.display` 以支援 Markdown。\n","# * **獲取最新壓力指數**:\n","#   * 從 `final_df['Dealer_Stress_Index']` 中提取最新的非 NaN 值。\n","#   * 處理無法獲取有效值的邊界情況。\n","# * **產生歷史對比提醒**:\n","#   * 定義歷史事件及其參考壓力峰值。\n","#   * 將當前壓力指數與歷史峰值進行比較。\n","#   * 根據比較結果生成對應的提醒文字。\n","# * **產生市場情境分析**:\n","#   * 包含預先定義好的關於壓力指數上升/下降情境下的市場影響和一般性考量文字。\n","# * **格式化輸出**:\n","#   * 將歷史對比和情境分析組合成一個完整的報告字串。\n","#   * **條件化 Markdown**: 如果 `IPython.display.Markdown` 可用，則使用它來顯示\n","#     格式化的報告；否則，移除 Markdown 語法並打印純文字版本。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將文字分析的生成和顯示集中在此儲存格。\n","# * 分析內容基於最新的量化結果 (壓力指數)。\n","# * 歷史比較提供相對定位，情境分析提供一般性框架。\n","# * 使用 Markdown 增強可讀性，並提供純文字回退機制。\n","# * **免責聲明**: 強調分析內容僅供參考，不構成投資建議。\n","#\n","# ## 重要假設：\n","# * Cell 1 和 Cell 8 已成功執行。\n","# * `final_df` DataFrame 包含 'Dealer_Stress_Index' 列。\n","# * `pandas` 和 `numpy` 函式庫已成功載入。\n","#\n","# ## 主要輸出/狀態變更：\n","# * 在儲存格輸出區域顯示文字分析報告 (Markdown 或純文字)。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 11) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 仔細閱讀輸出的分析內容和免責聲明。\n","# * **後續步驟:** (可選) 執行 **Cell Z: 執行流程匯總報告** 來查看所有儲存格的狀態。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime\n","\n","# --- 第三方庫導入 ---\n","# 假設 Cell 1 已確保這些庫可用，但為防萬一再次檢查\n","try:\n","    import pandas as pd\n","    import numpy as np\n","    # 嘗試導入 IPython 用於 Markdown 顯示\n","    from IPython.display import display, Markdown\n","    _IPYTHON_AVAILABLE_MD = True\n","    print(\"文字分析所需函式庫 (pandas, numpy, IPython) 看似可用。\")\n","except ImportError:\n","    _IPYTHON_AVAILABLE_MD = False\n","    # 檢查核心庫是否至少存在\n","    try:\n","        import pandas as pd\n","        import numpy as np\n","        print(\"警告：無法導入 IPython.display，分析報告將以純文字顯示。\")\n","        print(\"核心庫 (pandas, numpy) 看似可用。\")\n","    except ImportError as e:\n","        print(f\"錯誤：導入核心所需函式庫失敗({e})。\")\n","        pd = None\n","        np = None\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 11: 顯示文字分析結果\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {'analysis_generated': False}\n","_cell_generated_files = []\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.0) 開始執行 ---\")\n","\n","    # 檢查必要的函式庫\n","    if not pd or not np or 'libs_loaded' not in globals():\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：缺少 pandas, numpy 函式庫或 Cell 1 未成功執行。\"; raise ImportError(_cell_error)\n","    if not libs_loaded.get('pandas') or not libs_loaded.get('numpy'):\n","         _cell_status = \"失敗\"; _cell_error = f\"依賴錯誤：Cell 1 未能成功載入 pandas 或 numpy。\"; raise ImportError(_cell_error)\n","\n","    # 檢查來自 Cell 8 的 final_df\n","    if 'final_df' not in globals() or not isinstance(final_df, pd.DataFrame):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到來自 Cell 8 的有效 final_df DataFrame。\"; raise NameError(_cell_error)\n","    if final_df.empty:\n","        _cell_status = \"跳過\"; _cell_notes.append(\"輸入 DataFrame (final_df) 為空，無法生成文字分析。\"); raise ValueError(\"輸入 DataFrame 為空\")\n","    if 'Dealer_Stress_Index' not in final_df.columns:\n","        _cell_status = \"失敗\"; _cell_error = \"輸入錯誤：final_df 中缺少 'Dealer_Stress_Index' 欄位。\"; raise KeyError(_cell_error)\n","\n","    _cell_inputs['final_df_shape'] = final_df.shape\n","    _cell_inputs['stress_index_column_present'] = True\n","    _cell_notes.append(f\"讀取到 final_df (維度: {final_df.shape})。\")\n","    print(f\"  - 步驟 0: 依賴檢查通過。\")\n","\n","    # --- 1. 獲取最新壓力指數值 ---\n","    print(\"  - 步驟 1: 獲取最新壓力指數值...\")\n","    logger.info(\"步驟 1: 獲取最新壓力指數值...\")\n","    latest_stress_value = np.nan\n","    latest_stress_date = \"N/A\"\n","    stress_index_series = final_df['Dealer_Stress_Index'].dropna()\n","\n","    if not stress_index_series.empty:\n","        latest_stress_value = stress_index_series.iloc[-1]\n","        latest_stress_date = stress_index_series.index[-1].strftime('%Y-%m-%d')\n","        _cell_inputs['latest_stress_value'] = latest_stress_value\n","        _cell_inputs['latest_stress_date'] = latest_stress_date\n","        _cell_notes.append(f\"獲取到最新壓力指數值: {latest_stress_value:.2f} (日期: {latest_stress_date})\")\n","        print(f\"    > 最新壓力指數 ({latest_stress_date}): {latest_stress_value:.2f}\")\n","    else:\n","        _cell_warnings.append(\"無法從 final_df 中獲取有效的最新壓力指數值。\")\n","        print(\"    > 警告：無法獲取有效的最新壓力指數值。\")\n","        # 雖然可以繼續顯示通用文本，但歷史比較將不可用\n","\n","    # --- 2. 產生歷史對比提醒 ---\n","    print(\"  - 步驟 2: 產生歷史對比提醒...\")\n","    logger.info(\"步驟 2: 產生歷史對比提醒...\")\n","    history_comparison_lines = []\n","    history_comparison_lines.append(\"**與歷史事件壓力參考點比較:**\")\n","\n","    if pd.notna(latest_stress_value):\n","        historical_peaks = {\n","            \"雷曼兄弟時期 (Lehman Era ~2008)\": 95, # 假設值\n","            \"新冠疫情衝擊 (COVID Crash 2020)\": 80, # 假設值\n","            \"回購利率飆升 (Repo Spike 2019)\": 65, # 假設值\n","            \"歐洲主權債務危機 (Euro Crisis ~2011)\": 70 # 假設值\n","        }\n","        _cell_inputs['historical_peaks_reference'] = historical_peaks\n","        high_stress_reminder_shown = False\n","        moderate_stress_reminder_shown = False\n","        comparison_made = False\n","\n","        for event, peak_value in historical_peaks.items():\n","            comparison_made = True\n","            comparison_text = \"\"\n","            reminder = \"\"\n","            if latest_stress_value >= peak_value * 0.95:\n","                comparison_text = f\"已達到或超過 **{event}** 的參考水平 (約 {peak_value})\"\n","                reminder = (f\"**警示：** 目前壓力水平極高，堪比歷史上的重大危機時期。\"\n","                            f\"需極度關注市場流動性、交易對手風險及潜在的系統性問題。\")\n","                if not high_stress_reminder_shown: high_stress_reminder_shown = True\n","                else: reminder = \"\"\n","            elif latest_stress_value >= peak_value * 0.8:\n","                comparison_text = f\"已接近 **{event}** 的參考水平 (約 {peak_value})\"\n","                reminder = (f\"**注意：** 壓力水平顯著升高，已進入歷史上相對緊張的區間。\"\n","                            f\"建議加強風險管理，評估資產曝險。\")\n","                if not high_stress_reminder_shown and not moderate_stress_reminder_shown:\n","                    moderate_stress_reminder_shown = True\n","                else: reminder = \"\"\n","            elif latest_stress_value >= peak_value * 0.6:\n","                comparison_text = f\"高於 **{event}** 時期的一半，但仍有距離 (參考約 {peak_value})\"\n","            else:\n","                comparison_text = f\"顯著低於 **{event}** 的參考水平 (約 {peak_value})\"\n","\n","            history_comparison_lines.append(f\"* {comparison_text}\")\n","            if reminder:\n","                 history_comparison_lines.append(f\"    * {reminder}\") # Markdown 列表下的縮進列表\n","\n","        if not comparison_made:\n","            history_comparison_lines.append(\"* 未設定歷史比較點。\")\n","        _cell_notes.append(\"已生成歷史對比提醒文字。\")\n","    else:\n","        history_comparison_lines.append(\"* 無法獲取當前壓力指數，無法進行歷史比較。\")\n","        _cell_notes.append(\"因無最新壓力指數，未生成歷史對比。\")\n","\n","    # --- 3. 產生市場情境分析文字 ---\n","    print(\"  - 步驟 3: 產生市場情境分析文字...\")\n","    logger.info(\"步驟 3: 產生市場情境分析文字...\")\n","    scenario_analysis_text = f\"\"\"\n","---\n","\n","**情境分析：若壓力指數持續上升**\n","\n","* **一般市場影響：**\n","    * **債券市場：** 通常伴隨避險情緒升溫，可能導致投資者湧向美國公債等避險資產，壓低公債殖利率（尤其是長天期），債券價格上漲。但若壓力來源於通膨失控或貨幣政策驟緊，殖利率可能反而上升。信用利差（公司債與公債的利差）可能擴大，反映風險趨避。\n","    * **股票市場：** 波動性（如VIX）通常會顯著升高。投資者風險偏好下降，可能導致股市普遍下跌，尤其是對利率敏感的成長股、小型股及週期性板塊可能承壓較大。防禦性板塊（如公用事業、必需消費品）可能相對抗跌。\n","    * **資金流動：** 可能出現「現金為王」或流向避險貨幣（如美元、日圓）的現象。\n","* **一般性策略考量（非建議）：**\n","    * **風險評估：** 重新評估投資組合的風險敞口，特別是對利率、信用風險和市場波動的敏感度。\n","    * **現金水平：** 考慮是否需要維持較高的現金或現金等價物水平，以應對潛在的市場波動或捕捉機會。\n","    * **資產質量：** 關注資產負債表穩健、現金流充裕的高質量公司或債券發行人。\n","    * **分散配置：** 檢查投資組合的分散程度，確保不過度集中於特定資產類別或板塊。\n","\n","---\n","\n","**情境分析：若壓力指數持續下降**\n","\n","* **一般市場影響：**\n","    * **債券市場：** 避險情緒降溫，資金可能流出公債，導致殖利率上升（價格下跌）。信用利差可能收窄，反映市場對企業信用的信心增強。\n","    * **股票市場：** 波動性可能降低。投資者風險偏好提升，可能帶動股市上漲，成長股、小型股及週期性板塊可能表現較好。先前受壓抑的板塊可能出現反彈。\n","    * **資金流動：** 資金可能從避險資產流向風險資產。\n","* **一般性策略考量（非建議）：**\n","    * **機會評估：** 在風險偏好回升的環境下，評估增持風險資產（如股票）或信用債的機會。\n","    * **板塊輪動：** 關注市場風格是否轉向更有利於成長股或週期股。\n","    * **再平衡：** 根據市場變化和自身目標，考慮對投資組合進行再平衡。\n","    * **通膨預期：** 即使壓力下降，仍需關注通膨數據及其對利率前景的影響。\n","\"\"\"\n","    _cell_notes.append(\"已生成市場情境分析文字。\")\n","\n","    # --- 4. 組合並顯示報告 ---\n","    print(\"  - 步驟 4: 組合並顯示最終分析報告...\")\n","    logger.info(\"步驟 4: 組合並顯示最終分析報告...\")\n","\n","    # 組合報告內容\n","    final_report_lines = [\"\\n--- Gemini 歷史對比與提醒 ---\"]\n","    if pd.notna(latest_stress_value):\n","        final_report_lines.append(f\"**當前 ({latest_stress_date}) 壓力指數:** {latest_stress_value:.2f}\\n\")\n","    else:\n","        final_report_lines.append(\"**當前壓力指數:** 無法獲取有效值\\n\")\n","    final_report_lines.extend(history_comparison_lines)\n","    final_report_lines.append(\"\\n--- Gemini 市場壓力情境分析與一般性考量 ---\")\n","    final_report_lines.append(\"\\n**>>> 重要免責聲明 <<<**\")\n","    final_report_lines.append(\n","        \"以下內容基於壓力指數的假設性變動，提供一般性的市場觀察和原則性考量，\\n\"\n","        \"**不構成任何形式的投資建議**。市場實際表現受多重複雜因素影響，\\n\"\n","        \"任何投資決策請務必諮詢合格的專業財務顧問，並進行獨立判斷。\"\n","    )\n","    final_report_lines.append(scenario_analysis_text)\n","    final_report_lines.append(\n","        \"\\n---\\n\\n**再次強調：以上分析僅為一般性原則探討，不能替代專業投資建議。市場變化莫測，請謹慎決策。**\"\n","    )\n","\n","    final_report_str = \"\\n\".join(final_report_lines)\n","\n","    # 根據環境選擇輸出方式\n","    if _IPYTHON_AVAILABLE_MD:\n","        display(Markdown(final_report_str))\n","        _cell_notes.append(\"已使用 Markdown 顯示文字分析報告。\")\n","    else:\n","        # 純文字回退：移除 Markdown 語法\n","        plain_text_report = final_report_str.replace('**', '').replace('* ', '- ').replace('    * ', '  > ')\n","        print(plain_text_report)\n","        _cell_notes.append(\"已使用純文字顯示文字分析報告。\")\n","\n","    _cell_outputs['analysis_generated'] = True\n","    _cell_outputs['report_format'] = 'Markdown' if _IPYTHON_AVAILABLE_MD else 'Plain Text'\n","\n","    # --- 標記 Cell 11 執行狀態 ---\n","    if _cell_status == \"處理中\": # 如果前面沒有設置為失敗\n","        _cell_status = \"成功\"\n","        if _cell_warnings: # 如果有警告\n","             _cell_status = \"成功 (有警告)\"\n","    logger.info(f\"{_cell_identifier} - 文字分析顯示完成，狀態: {_cell_status}\")\n","\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError, KeyError) as e:\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗。\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    # 打印報告\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.0) **執行總結報告**\")\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情:**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更:**\")\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    if _cell_status != \"失敗\" and _cell_status != \"跳過\":\n","        outputs_display['info'] = \"文字分析報告應已顯示在上方輸出區域。\"\n","    elif _cell_status == \"跳過\":\n","         outputs_display['info'] = \"因輸入數據為空，跳過執行。\"\n","    else:\n","        outputs_display['info'] = \"因執行失敗，未生成文字分析報告。\"\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del latest_stress_value, latest_stress_date, stress_index_series, history_comparison_lines\n","    except NameError: pass\n","    try: del historical_peaks, high_stress_reminder_shown, moderate_stress_reminder_shown\n","    except NameError: pass\n","    try: del comparison_made, event, peak_value, comparison_text, reminder, scenario_analysis_text\n","    except NameError: pass\n","    try: del final_report_lines, final_report_str, plain_text_report, outputs_display\n","    except NameError: pass\n","    # 全局變數保留\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 11: 顯示文字分析結果\n","# 功能: 根據最新壓力指數顯示歷史對比和市場情境分析文字。\n","# 版本: 1.0\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1', 'Cell 8']\n","# 輸入: ['global:final_df', 'global:libs_loaded']\n","# 輸出: (顯示文字分析報告)\n","# ==================================================\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"0B95vCXA3_k8","executionInfo":{"status":"ok","timestamp":1746593443798,"user_tz":-480,"elapsed":77,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"3f62333f-ad7e-442b-ac2d-4986366219f6"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:43,281 - __main__ - INFO - Cell 11: 顯示文字分析結果 - 開始執行...\n","2025-05-07 04:50:43,282 - __main__ - INFO - 步驟 1: 獲取最新壓力指數值...\n","2025-05-07 04:50:43,286 - __main__ - INFO - 步驟 2: 產生歷史對比提醒...\n","2025-05-07 04:50:43,287 - __main__ - INFO - 步驟 3: 產生市場情境分析文字...\n","2025-05-07 04:50:43,290 - __main__ - INFO - 步驟 4: 組合並顯示最終分析報告...\n"]},{"output_type":"stream","name":"stdout","text":["文字分析所需函式庫 (pandas, numpy, IPython) 看似可用。\n","\n","--- Cell 11: 顯示文字分析結果 (v1.0) 開始執行 ---\n","  - 步驟 0: 依賴檢查通過。\n","  - 步驟 1: 獲取最新壓力指數值...\n","    > 最新壓力指數 (2025-05-07): 65.31\n","  - 步驟 2: 產生歷史對比提醒...\n","  - 步驟 3: 產生市場情境分析文字...\n","  - 步驟 4: 組合並顯示最終分析報告...\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Markdown object>"],"text/markdown":"\n--- Gemini 歷史對比與提醒 ---\n**當前 (2025-05-07) 壓力指數:** 65.31\n\n**與歷史事件壓力參考點比較:**\n* 高於 **雷曼兄弟時期 (Lehman Era ~2008)** 時期的一半，但仍有距離 (參考約 95)\n* 已接近 **新冠疫情衝擊 (COVID Crash 2020)** 的參考水平 (約 80)\n    * **注意：** 壓力水平顯著升高，已進入歷史上相對緊張的區間。建議加強風險管理，評估資產曝險。\n* 已達到或超過 **回購利率飆升 (Repo Spike 2019)** 的參考水平 (約 65)\n    * **警示：** 目前壓力水平極高，堪比歷史上的重大危機時期。需極度關注市場流動性、交易對手風險及潜在的系統性問題。\n* 已接近 **歐洲主權債務危機 (Euro Crisis ~2011)** 的參考水平 (約 70)\n\n--- Gemini 市場壓力情境分析與一般性考量 ---\n\n**>>> 重要免責聲明 <<<**\n以下內容基於壓力指數的假設性變動，提供一般性的市場觀察和原則性考量，\n**不構成任何形式的投資建議**。市場實際表現受多重複雜因素影響，\n任何投資決策請務必諮詢合格的專業財務顧問，並進行獨立判斷。\n\n---\n\n**情境分析：若壓力指數持續上升**\n\n* **一般市場影響：**\n    * **債券市場：** 通常伴隨避險情緒升溫，可能導致投資者湧向美國公債等避險資產，壓低公債殖利率（尤其是長天期），債券價格上漲。但若壓力來源於通膨失控或貨幣政策驟緊，殖利率可能反而上升。信用利差（公司債與公債的利差）可能擴大，反映風險趨避。\n    * **股票市場：** 波動性（如VIX）通常會顯著升高。投資者風險偏好下降，可能導致股市普遍下跌，尤其是對利率敏感的成長股、小型股及週期性板塊可能承壓較大。防禦性板塊（如公用事業、必需消費品）可能相對抗跌。\n    * **資金流動：** 可能出現「現金為王」或流向避險貨幣（如美元、日圓）的現象。\n* **一般性策略考量（非建議）：**\n    * **風險評估：** 重新評估投資組合的風險敞口，特別是對利率、信用風險和市場波動的敏感度。\n    * **現金水平：** 考慮是否需要維持較高的現金或現金等價物水平，以應對潛在的市場波動或捕捉機會。\n    * **資產質量：** 關注資產負債表穩健、現金流充裕的高質量公司或債券發行人。\n    * **分散配置：** 檢查投資組合的分散程度，確保不過度集中於特定資產類別或板塊。\n\n---\n\n**情境分析：若壓力指數持續下降**\n\n* **一般市場影響：**\n    * **債券市場：** 避險情緒降溫，資金可能流出公債，導致殖利率上升（價格下跌）。信用利差可能收窄，反映市場對企業信用的信心增強。\n    * **股票市場：** 波動性可能降低。投資者風險偏好提升，可能帶動股市上漲，成長股、小型股及週期性板塊可能表現較好。先前受壓抑的板塊可能出現反彈。\n    * **資金流動：** 資金可能從避險資產流向風險資產。\n* **一般性策略考量（非建議）：**\n    * **機會評估：** 在風險偏好回升的環境下，評估增持風險資產（如股票）或信用債的機會。\n    * **板塊輪動：** 關注市場風格是否轉向更有利於成長股或週期股。\n    * **再平衡：** 根據市場變化和自身目標，考慮對投資組合進行再平衡。\n    * **通膨預期：** 即使壓力下降，仍需關注通膨數據及其對利率前景的影響。\n\n\n---\n\n**再次強調：以上分析僅為一般性原則探討，不能替代專業投資建議。市場變化莫測，請謹慎決策。**"},"metadata":{}},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:43,296 - __main__ - INFO - Cell 11: 顯示文字分析結果 - 文字分析顯示完成，狀態: 成功\n"]},{"output_type":"stream","name":"stdout","text":["\n","================================================================================\n","儲存格: Cell 11: 顯示文字分析結果 (v1.0) **執行總結報告**\n","**狀態:** ✅ 成功\n","**執行時間:** 0.02 秒\n","**完成時間:** 2025-05-07 12:50:43 CST+0800\n","\n","**⚙️ 輸入參數詳情:**\n","{ 'final_df_shape': (1918, 18),\n","  'stress_index_column_present': True,\n","  'latest_stress_value': np.float64(65.31024694014152),\n","  'latest_stress_date': '2025-05-07',\n","  'historical_peaks_reference': { '雷曼兄弟時期 (Lehman Era ~2008)': 95,\n","                                  '新冠疫情衝擊 (COVID Crash 2020)': 80,\n","                                  '回購利率飆升 (Repo Spike 2019)': 65,\n","                                  '歐洲主權債務危機 (Euro Crisis ~2011)': 70}}\n","\n","**📝 執行註記:**\n","- 讀取到 final_df (維度: (1918, 18))。\n","- 獲取到最新壓力指數值: 65.31 (日期: 2025-05-07)\n","- 已生成歷史對比提醒文字。\n","- 已生成市場情境分析文字。\n","- 已使用 Markdown 顯示文字分析報告。\n","\n","**📊 主要輸出 / 狀態變更:**\n","{ 'analysis_generated': True,\n","  'report_format': 'Markdown',\n","  'info': '文字分析報告應已顯示在上方輸出區域。'}\n","================================================================================\n","\n"]}]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.1 (Cell Z - 修正 NameError)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell Z: 執行流程匯總報告\n","# --------------------------------------------------\n","# 功能: 讀取全局執行追蹤器 EXECUTION_TRACKER，生成並顯示所有已執行儲存格\n","#       (Cell >= 1) 的狀態摘要表格。\n","# 版本: 1.1 (修正 NameError)\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1'...'Cell 11'] (隱式依賴 EXECUTION_TRACKER)\n","# 輸入: ['global:EXECUTION_TRACKER', 'global:libs_loaded'] (檢查 pandas/ipython)\n","# 輸出: (在儲存格輸出區域顯示摘要表格和詳細信息)\n","#       (更新 EXECUTION_TRACKER - 可選，記錄此報告 Cell 自身狀態)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1 是否成功執行並設定了 `EXECUTION_TRACKER`，\n","#   並檢查 `pandas` 和 `IPython.display` 是否可用於生成格式化表格。\n","# * **讀取追蹤數據**: 從全局 `EXECUTION_TRACKER` 字典獲取所有儲存格的執行記錄。\n","# * **處理數據**:\n","#   * 將追蹤記錄轉換為列表。\n","#   * 過濾掉無效記錄（非字典）。\n","#   * **(若 Pandas 可用)** 將有效記錄轉換為 Pandas DataFrame。\n","#   * 計算警告數量和錯誤摘要等輔助欄位。\n","# * **格式化顯示**:\n","#   * **(若 Pandas 和 IPython 可用)**:\n","#     * 選擇要在摘要表中顯示的欄位。\n","#     * 重命名欄位為中文。\n","#     * 定義樣式函數，根據執行狀態（成功、警告、失敗）對表格行進行顏色高亮。\n","#     * 使用 Pandas Styler 應用樣式並顯示格式化的 HTML 表格。\n","#     * 遍歷 DataFrame，顯示詳細的警告和錯誤信息（包括 Traceback）。\n","#     * 計算並顯示最終的統計總結（成功/警告/失敗數量）。\n","#   * **(若 Pandas 或 IPython 不可用)**:\n","#     * 使用 `pprint` 或簡單的循環打印原始追蹤數據或基本摘要。\n","# * **自身報告 (可選但建議)**: 此 Cell 自身也有一個簡化的 `finally` 塊，\n","#   報告其生成匯總報告的執行狀態。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 提供一個集中的視圖來監控整個筆記本的執行流程。\n","# * 利用 Pandas 和 IPython (如果可用) 提供美觀、易讀的摘要表格。\n","# * 提供純文字回退機制，確保在缺少可選庫時仍能提供基本信息。\n","# * 錯誤處理確保即使追蹤器數據格式略有問題，也能盡可能生成報告。\n","# * **修正**: 修正了 finally 區塊中記錄 Cell Z 自身狀態時引用錯誤變數的問題。\n","#\n","# ## 重要假設：\n","# * Cell 1 已成功執行並初始化了 `EXECUTION_TRACKER` 字典。\n","# * 先前的儲存格 (Cell 1-11) 在執行時已按照規範更新了 `EXECUTION_TRACKER`。\n","# * 為了獲得最佳視覺效果，建議安裝 `pandas` 和 `ipython`。\n","#\n","# ## 主要輸出/狀態變更：\n","# * 在儲存格輸出區域顯示：\n","#   * (若可用) 格式化的執行狀態摘要表格。\n","#   * (若可用) 詳細的警告和錯誤信息。\n","#   * (若可用) 最終統計總結。\n","#   * (若不可用) 原始追蹤數據或簡化摘要。\n","# * `global:EXECUTION_TRACKER`: (可選) 更新此儲存格 (Cell Z) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 此儲存格應在所有主要工作流程儲存格執行完畢後運行。\n","# * 根據摘要結果，可以快速定位執行失敗或出現警告的儲存格進行檢查。\n","# * **後續步驟:** 分析結束。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime, timezone, timedelta # 確保 datetime 可用\n","\n","# --- 第三方庫導入 (嘗試導入) ---\n","_PANDAS_AVAILABLE_Z = False\n","_IPYTHON_AVAILABLE_Z = False\n","try:\n","    # 檢查是否在 Cell 1 成功載入\n","    if 'libs_loaded' in globals() and libs_loaded.get('pandas'):\n","        import pandas as pd\n","        _PANDAS_AVAILABLE_Z = True\n","    else:\n","        pd = None # 確保 pd 為 None\n","\n","    # 檢查 IPython 是否可用 (主要用於 display 和 HTML)\n","    if 'libs_loaded' in globals() and libs_loaded.get('ipywidgets'): # ipywidgets 通常伴隨 IPython\n","         from IPython.display import display, HTML\n","         _IPYTHON_AVAILABLE_Z = True\n","    else:\n","         # 定義備用的 display 和 HTML 函數\n","         def display(x): print(x)\n","         def HTML(x): return str(x) # 返回字串\n","         print(\"提示: IPython 未安裝或未在 Cell 1 成功加載，將使用純文本格式顯示追蹤摘要。\")\n","\n","    if _PANDAS_AVAILABLE_Z and _IPYTHON_AVAILABLE_Z:\n","         print(\"Pandas 和 IPython 可用，將生成格式化摘要。\")\n","    elif _PANDAS_AVAILABLE_Z:\n","         print(\"Pandas 可用，但 IPython 不可用，摘要表格將以純文字 DataFrame 形式顯示。\")\n","    else:\n","         print(\"提示: Pandas 庫不可用，將使用純文本格式顯示追蹤摘要。\")\n","\n","except ImportError:\n","     # 這個 except 塊理論上不應該觸發，因為 Cell 1 會處理導入\n","     print(\"警告：嘗試再次導入 Pandas 或 IPython 時失敗。\")\n","     pd = None\n","     def display(x): print(x)\n","     def HTML(x): return str(x)\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell Z: 執行流程匯總報告\"\n","\n","# --- 儲存格狀態 (用於此儲存格自身的 finally 報告) ---\n","_cell_start_time_z = time.time()\n","_cell_status_z = \"處理中\"\n","_cell_error_z = None\n","_cell_traceback_z = None\n","_cell_notes_z = [] # 此 Cell 的執行註記\n","_cell_inputs_z = {'source_cells': [f'Cell {i}' for i in range(1, 12)]} # Cell Z 的輸入是前面所有 Cell 的結果 (隱式)\n","_cell_outputs_z = {'report_generated': False} # Cell Z 的輸出是報告本身\n","_cell_generated_files_z = [] # Cell Z 通常不生成文件\n","\n","try:\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.1) 開始執行 ---\") # 更新版本號\n","    print(\"=\"*80)\n","    print(\"                  執行流程匯總報告\")\n","    print(\"=\"*80 + \"\\n\")\n","    _cell_notes_z.append(\"開始生成執行狀態摘要。\")\n","\n","    # --- 1. 檢查必需的全局變數 ---\n","    logger.info(\"步驟 1: 檢查 EXECUTION_TRACKER...\")\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        _cell_status_z = \"失敗\"\n","        _cell_error_z = \"依賴錯誤：找不到全局執行追蹤器 EXECUTION_TRACKER 或其類型錯誤。\"\n","        logger.error(_cell_error_z)\n","        raise NameError(_cell_error_z)\n","\n","    tracker_data = EXECUTION_TRACKER\n","    if not tracker_data:\n","        print(\"ℹ️ 執行追蹤器為空，尚無儲存格執行記錄。\")\n","        _cell_status_z = \"成功 (無記錄)\"\n","        _cell_notes_z.append(\"追蹤器為空，無需生成摘要。\")\n","    elif not _PANDAS_AVAILABLE_Z:\n","        # Pandas 不可用，使用 pprint 打印原始數據\n","        warning_msg = \"⚠️ 警告: Pandas 庫不可用，將以原始格式顯示追蹤數據。\"\n","        print(warning_msg)\n","        logger.warning(warning_msg)\n","        _cell_notes_z.append(\"Pandas 不可用，使用 pprint 顯示原始數據。\")\n","        print(\"\\n**原始追蹤器數據:**\")\n","        pprint.pprint(tracker_data, indent=2, width=80)\n","        _cell_status_z = \"成功 (純文本)\"\n","    else:\n","        # Pandas 可用，生成摘要表\n","        logger.info(\"步驟 2: 使用 Pandas 生成執行摘要表...\")\n","        _cell_notes_z.append(\"使用 Pandas 生成摘要表。\")\n","        try:\n","            # --- 2a. 將追蹤器數據轉換為 DataFrame ---\n","            records = list(tracker_data.values())\n","            valid_records = [r for r in records if isinstance(r, dict) and 'cell_id' in r] # 確保是字典且有 cell_id\n","            ignored_count = len(records) - len(valid_records)\n","            if ignored_count > 0:\n","                warn_msg = f\"發現 {ignored_count} 條無效/缺少 'cell_id' 的追蹤記錄已被忽略。\"\n","                logger.warning(warn_msg); _cell_warnings.append(warn_msg); _cell_notes_z.append(warn_msg) # Cell Z 本身的警告\n","\n","            if not valid_records:\n","                 info_msg = \"ℹ️ 未找到有效的儲存格執行記錄。\"\n","                 print(info_msg); logger.info(info_msg); _cell_status_z = \"成功 (無有效記錄)\"; _cell_notes_z.append(info_msg)\n","            else:\n","                # 定義基礎列\n","                columns_in_summary = ['cell_id', 'status_icon', 'status_text', 'timestamp', 'duration_sec', 'warnings', 'error']\n","                processed_data = []\n","                for r in valid_records:\n","                    record_data = {col: r.get(col) for col in columns_in_summary} # 使用 get 避免 KeyError\n","                    record_data['num_warnings'] = len(record_data.get('warnings', []))\n","                    error_val = record_data.get('error')\n","                    record_data['error_summary'] = str(error_val) if error_val is not None else None\n","                    processed_data.append(record_data)\n","\n","                if not processed_data:\n","                     info_msg = \"ℹ️ 處理後無有效數據可生成摘要。\"\n","                     print(info_msg); logger.info(info_msg); _cell_status_z = \"成功 (無有效數據)\"; _cell_notes_z.append(info_msg)\n","                else:\n","                    df_summary = pd.DataFrame(processed_data)\n","                    logger.info(f\"成功創建包含 {len(df_summary)} 行的摘要 DataFrame。\")\n","                    _cell_notes_z.append(f\"創建了 {len(df_summary)} 行的摘要 DataFrame。\")\n","\n","                    # --- 2b. 格式化並顯示摘要表 ---\n","                    display_columns = ['cell_id', 'status_icon', 'status_text', 'timestamp', 'duration_sec', 'num_warnings', 'error_summary']\n","                    for col in display_columns: # 確保列存在\n","                        if col not in df_summary.columns: df_summary[col] = None\n","                    df_display = df_summary[display_columns].copy()\n","                    df_display.rename(columns={\n","                        'cell_id': '儲存格 ID', 'status_icon': '狀態', 'status_text': '狀態說明',\n","                        'timestamp': '完成時間', 'duration_sec': '耗時(秒)',\n","                        'num_warnings': '警告數', 'error_summary': '錯誤摘要'\n","                    }, inplace=True)\n","\n","                    def highlight_status(row): # 高亮樣式函數\n","                        style = [''] * len(row)\n","                        status_icon = row.get('狀態', '')\n","                        error_summary = row.get('錯誤摘要', None)\n","                        is_error = (status_icon == '❌' or (error_summary is not None and str(error_summary).strip() != ''))\n","                        is_warning = (status_icon == '⚠️' and not is_error)\n","                        if is_error: style = ['background-color: #F8D7DA; color: #721C24; font-weight: bold;'] * len(row)\n","                        elif is_warning: style = ['background-color: #FFF3CD; color: #856404;'] * len(row)\n","                        return style\n","\n","                    print(\"\\n**📊 儲存格執行狀態摘要 (包含 Cell 1 初始化):**\\n\")\n","                    if _IPYTHON_AVAILABLE_Z:\n","                        try:\n","                            styled_df = df_display.style.apply(highlight_status, axis=1)\\\n","                                              .set_properties(**{'text-align': 'left', 'vertical-align': 'top'})\\\n","                                              .set_table_styles([dict(selector='th', props=[('text-align', 'left')])])\\\n","                                              .format({'耗時(秒)': \"{:.2f}\", '警告數': \"{:d}\"})\n","                            display(styled_df)\n","                            _cell_notes_z.append(\"已使用 IPython 顯示樣式化摘要表。\")\n","                        except Exception as style_err:\n","                             logger.error(f\"應用樣式或顯示 DataFrame 時出錯: {style_err}\", exc_info=True)\n","                             _cell_warnings.append(f\"警告: 應用樣式時出錯: {style_err}，回退到純文本顯示。\") # Cell Z 警告\n","                             print(\"(應用樣式時出錯，回退到純文本顯示)\")\n","                             print(df_display.to_string(index=False))\n","                    else: # IPython 不可用時，打印普通 DataFrame\n","                        print(df_display.to_string(index=False))\n","                        _cell_notes_z.append(\"IPython 不可用，已顯示純文本摘要表。\")\n","\n","                    # --- 2c. 顯示詳細警告和錯誤 ---\n","                    warnings_found = df_summary[df_summary['num_warnings'] > 0]\n","                    errors_found = df_summary[df_summary['error'].notna()]\n","                    # 詳細警告不過濾 Cell 1\n","                    if not warnings_found.empty:\n","                        print(\"\\n\" + \"-\"*30 + \" **⚠️ 詳細警告訊息** \" + \"-\"*30)\n","                        _cell_notes_z.append(f\"發現 {len(warnings_found)} 個儲存格有詳細警告。\")\n","                        for index, row in warnings_found.iterrows():\n","                            print(f\"\\n**[{row['cell_id']}]** ({row['num_warnings']} 條警告):\")\n","                            original_record = tracker_data.get(row['cell_id'])\n","                            original_warnings = original_record.get('warnings', []) if original_record else []\n","                            if original_warnings: [print(f\"- {warning}\") for warning in original_warnings]\n","                            else: print(\"- (無警告內容記錄)\")\n","                    else: _cell_notes_z.append(\"未發現儲存格的詳細警告。\")\n","\n","                    if not errors_found.empty:\n","                        print(\"\\n\" + \"-\"*30 + \" **❌ 詳細錯誤訊息與追蹤** \" + \"-\"*30)\n","                        _cell_notes_z.append(f\"發現 {len(errors_found)} 個儲存格有錯誤。\")\n","                        for index, row in errors_found.iterrows():\n","                            print(f\"\\n**[{row['cell_id']}]**\")\n","                            print(f\"錯誤摘要: {row['error_summary']}\")\n","                            original_record = tracker_data.get(row['cell_id'])\n","                            traceback_info = original_record.get('traceback') if original_record else None\n","                            if traceback_info:\n","                                print(\"-\" * 10 + \" Traceback \" + \"-\" * 10)\n","                                if _IPYTHON_AVAILABLE_Z:\n","                                    try: display(HTML(f\"<pre style='white-space: pre-wrap; word-wrap: break-word; background-color: #f8f8f8; border: 1px solid #ddd; padding: 5px;'>{traceback_info}</pre>\"))\n","                                    except Exception as display_err: print(f\"(顯示 Traceback 出錯: {display_err})\"); print(traceback_info)\n","                                else: print(traceback_info)\n","                            else: print(\"(無詳細追蹤記錄)\")\n","                    else: _cell_notes_z.append(\"未發現儲存格的錯誤記錄。\")\n","\n","                    # --- 2d. 總結統計 ---\n","                    num_total_tracked = len(df_summary)\n","                    init_record_df = df_summary[df_summary['cell_id'].str.startswith(\"Cell 1:\", na=False)]\n","                    init_failed = not init_record_df.empty and init_record_df['error'].notna().any()\n","                    workflow_df = df_summary[~df_summary['cell_id'].str.startswith(\"Cell 1:\", na=False)]\n","                    num_workflow = len(workflow_df)\n","                    num_workflow_failed = workflow_df['error'].notna().sum()\n","                    num_workflow_warning_only = workflow_df[(workflow_df['num_warnings'] > 0) & workflow_df['error'].isna()].shape[0]\n","                    num_workflow_ok = num_workflow - num_workflow_failed - num_workflow_warning_only\n","\n","                    print(\"\\n\" + \"=\"*80)\n","                    print(f\"**總結:** 共追蹤 {num_total_tracked} 個儲存格。\")\n","                    if not init_record_df.empty: print(f\"  - {'❌ Cell 1 初始化失敗!' if init_failed else '✅ Cell 1 初始化成功。'}\")\n","                    else: print(f\"  - ❓ Cell 1 初始化狀態未知 (未追蹤)。\")\n","                    print(f\"\\n**工作流程 (Cell >= 2) 狀態 ({num_workflow} 個):**\")\n","                    print(f\"  - ✅/👍 成功 (無警告/錯誤): {num_workflow_ok}\")\n","                    print(f\"  - ⚠️  僅有警告 (無錯誤): {num_workflow_warning_only}\")\n","                    print(f\"  - ❌  失敗 (可能伴隨警告): {num_workflow_failed}\")\n","                    print(\"=\"*80)\n","                    _cell_notes_z.append(\"已打印最終統計總結。\")\n","                    _cell_status_z = \"成功\"\n","                    _cell_outputs_z['report_generated'] = True # 更新 Cell Z 的輸出狀態\n","                    logger.info(\"使用 Pandas 生成摘要成功完成。\")\n","\n","        except Exception as e_pandas:\n","            # 捕獲生成摘要過程中的錯誤\n","            error_msg = f\"使用 Pandas 生成執行摘要時發生錯誤: {e_pandas}\"\n","            print(f\"❌ {error_msg}\")\n","            logger.error(error_msg, exc_info=True)\n","            _cell_status_z = \"失敗\"\n","            _cell_error_z = error_msg\n","            _cell_traceback_z = traceback.format_exc()\n","            _cell_notes_z.append(f\"錯誤: 生成 Pandas 摘要失敗: {e_pandas}\")\n","            # 嘗試打印原始數據\n","            if 'tracker_data' in locals():\n","                 print(\"\\n**原始追蹤器數據 (用於除錯):**\")\n","                 pprint.pprint(tracker_data, indent=2, width=80)\n","\n","# --- 異常處理 (捕獲 Cell Z 自身執行的基本錯誤) ---\n","except NameError as e:\n","    error_msg = f\"❌ 錯誤: {e}。無法生成摘要。\"\n","    print(error_msg); logger.error(str(e)); _cell_status_z = \"失敗\"; _cell_error_z = str(e); _cell_notes_z.append(f\"失敗: {e}\")\n","except Exception as e:\n","    error_msg = f\"{_cell_identifier} 執行時發生未預期錯誤: {e}\"\n","    print(f\"❌ {error_msg}\"); logger.error(error_msg, exc_info=True)\n","    _cell_status_z = \"失敗\"; _cell_error_z = error_msg; _cell_traceback_z = traceback.format_exc(); _cell_notes_z.append(f\"失敗: 發生未預期錯誤: {e}\")\n","\n","# --- finally 區塊：執行總結報告 (Cell Z 自身) ---\n","finally:\n","    _cell_end_time_z = time.time()\n","    _cell_duration_z = _cell_end_time_z - _cell_start_time_z\n","    _final_status_icon_z = \"✅\" if _cell_status_z.startswith(\"成功\") else \"❌\"\n","    if \"警告\" in _cell_status_z: _final_status_icon_z = \"⚠️\"\n","\n","    _current_time_str_z = \"N/A\"\n","    try:\n","        _report_tz_info_z = target_tz if 'target_tz' in globals() and target_tz else timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str_z = datetime.now(_report_tz_info_z).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str_z = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str_z = f\"獲取時間錯誤: {time_err_local}\"\n","\n","    # 可選：更新 EXECUTION_TRACKER 記錄 Cell Z 自身狀態\n","    _tracking_record_z = {\n","        'cell_id': _cell_identifier, 'status_icon': _final_status_icon_z, 'status_text': _cell_status_z,\n","        'timestamp': _current_time_str_z, 'duration_sec': round(_cell_duration_z, 2),\n","        'warnings': [], # Cell Z 自身的警告已記錄在 _cell_warnings_z (如果需要顯示可以加入)\n","        'error': _cell_error_z, 'traceback': _cell_traceback_z,\n","        'notes': _cell_notes_z, # 使用 Cell Z 自身的 notes\n","        'inputs': _cell_inputs_z, # 使用 Cell Z 自身的 inputs\n","        'outputs': _cell_outputs_z, # 使用 Cell Z 自身的 outputs\n","        'generated_files': _cell_generated_files_z # 使用 Cell Z 自身的 generated_files\n","    }\n","    try:\n","        if 'EXECUTION_TRACKER' in globals() and isinstance(EXECUTION_TRACKER, dict):\n","             EXECUTION_TRACKER[_cell_identifier] = _tracking_record_z\n","    except Exception as tracker_update_err_z:\n","         print(f\"警告: 更新 Cell Z 自身追蹤記錄時出錯: {tracker_update_err_z}\")\n","\n","    # 打印 Cell Z 自身報告\n","    print(\"\\n\" + \"-\"*80)\n","    print(f\"**儲存格自身執行報告: {_cell_identifier} (v1.1)**\") # 更新版本號\n","    print(f\"**狀態:** {_final_status_icon_z} {_cell_status_z}\")\n","    print(f\"**執行時間:** {_cell_duration_z:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str_z}\")\n","    if _cell_notes_z: print(\"**執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes_z]\n","    if _cell_error_z: print(f\"**錯誤訊息:** {_cell_error_z}\")\n","    if _cell_traceback_z: print(\"**Traceback:**\"); print(f\"<pre>{_cell_traceback_z}</pre>\")\n","    print(\"-\" * 80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del tracker_data, records, valid_records, processed_data, df_summary, df_display\n","    except NameError: pass\n","    try: del styled_df, warnings_found, errors_found, workflow_df, init_record_df\n","    except NameError: pass\n","    try: del _PANDAS_AVAILABLE_Z, _IPYTHON_AVAILABLE_Z\n","    except NameError: pass\n","    try: del _cell_start_time_z, _cell_status_z, _cell_error_z, _cell_traceback_z\n","    except NameError: pass\n","    try: del _cell_end_time_z, _cell_duration_z, _final_status_icon_z, _current_time_str_z, _cell_notes_z\n","    except NameError: pass\n","    try: del _tracking_record_z, _report_tz_info_z, time_err, time_err_local, error_msg\n","    except NameError: pass\n","    try: del num_total_tracked, init_failed, num_workflow, num_workflow_failed, num_workflow_warning_only, num_workflow_ok\n","    except NameError: pass\n","    try: del index, row, original_record, original_warnings, traceback_info, display_err\n","    except NameError: pass\n","    try: del columns_in_summary, record_data, col, error_val, display_columns, highlight_status, style_err\n","    except NameError: pass\n","    try: del info_msg, ignored_count, warn_msg # 清理新增的變數\n","    except NameError: pass\n","    try: del _cell_inputs_z, _cell_outputs_z, _cell_generated_files_z # 清理 Cell Z 自身狀態變數\n","    except NameError: pass\n","    # 全局變數保留\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell Z: 執行流程匯總報告\n","# 功能: 讀取全局執行追蹤器，生成並顯示所有儲存格的狀態摘要。\n","# 版本: 1.1 (修正 NameError)\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1'...'Cell 11'] (隱式)\n","# 輸入: ['global:EXECUTION_TRACKER', 'global:libs_loaded']\n","# 輸出: (顯示摘要表格)\n","# =================================================="],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"8EfldSbA4tUN","executionInfo":{"status":"ok","timestamp":1746593443937,"user_tz":-480,"elapsed":136,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"96073de9-b873-4eb6-d887-b1123f721ac6"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:43,378 - __main__ - INFO - Cell Z: 執行流程匯總報告 - 開始執行...\n","2025-05-07 04:50:43,379 - __main__ - INFO - 步驟 1: 檢查 EXECUTION_TRACKER...\n","2025-05-07 04:50:43,380 - __main__ - INFO - 步驟 2: 使用 Pandas 生成執行摘要表...\n","2025-05-07 04:50:43,383 - __main__ - INFO - 成功創建包含 11 行的摘要 DataFrame。\n"]},{"output_type":"stream","name":"stdout","text":["Pandas 和 IPython 可用，將生成格式化摘要。\n","\n","--- Cell Z: 執行流程匯總報告 (v1.1) 開始執行 ---\n","================================================================================\n","                  執行流程匯總報告\n","================================================================================\n","\n","\n","**📊 儲存格執行狀態摘要 (包含 Cell 1 初始化):**\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<pandas.io.formats.style.Styler at 0x7c9ceba0d890>"],"text/html":["<style type=\"text/css\">\n","#T_e36f6 th {\n","  text-align: left;\n","}\n","#T_e36f6_row0_col0, #T_e36f6_row0_col1, #T_e36f6_row0_col2, #T_e36f6_row0_col3, #T_e36f6_row0_col4, #T_e36f6_row0_col5, #T_e36f6_row0_col6, #T_e36f6_row1_col0, #T_e36f6_row1_col1, #T_e36f6_row1_col2, #T_e36f6_row1_col3, #T_e36f6_row1_col4, #T_e36f6_row1_col5, #T_e36f6_row1_col6, #T_e36f6_row2_col0, #T_e36f6_row2_col1, #T_e36f6_row2_col2, #T_e36f6_row2_col3, #T_e36f6_row2_col4, #T_e36f6_row2_col5, #T_e36f6_row2_col6, #T_e36f6_row3_col0, #T_e36f6_row3_col1, #T_e36f6_row3_col2, #T_e36f6_row3_col3, #T_e36f6_row3_col4, #T_e36f6_row3_col5, #T_e36f6_row3_col6, #T_e36f6_row4_col0, #T_e36f6_row4_col1, #T_e36f6_row4_col2, #T_e36f6_row4_col3, #T_e36f6_row4_col4, #T_e36f6_row4_col5, #T_e36f6_row4_col6, #T_e36f6_row6_col0, #T_e36f6_row6_col1, #T_e36f6_row6_col2, #T_e36f6_row6_col3, #T_e36f6_row6_col4, #T_e36f6_row6_col5, #T_e36f6_row6_col6, #T_e36f6_row7_col0, #T_e36f6_row7_col1, #T_e36f6_row7_col2, #T_e36f6_row7_col3, #T_e36f6_row7_col4, #T_e36f6_row7_col5, #T_e36f6_row7_col6, #T_e36f6_row8_col0, #T_e36f6_row8_col1, #T_e36f6_row8_col2, #T_e36f6_row8_col3, #T_e36f6_row8_col4, #T_e36f6_row8_col5, #T_e36f6_row8_col6, #T_e36f6_row9_col0, #T_e36f6_row9_col1, #T_e36f6_row9_col2, #T_e36f6_row9_col3, #T_e36f6_row9_col4, #T_e36f6_row9_col5, #T_e36f6_row9_col6, #T_e36f6_row10_col0, #T_e36f6_row10_col1, #T_e36f6_row10_col2, #T_e36f6_row10_col3, #T_e36f6_row10_col4, #T_e36f6_row10_col5, #T_e36f6_row10_col6 {\n","  text-align: left;\n","  vertical-align: top;\n","}\n","#T_e36f6_row5_col0, #T_e36f6_row5_col1, #T_e36f6_row5_col2, #T_e36f6_row5_col3, #T_e36f6_row5_col4, #T_e36f6_row5_col5, #T_e36f6_row5_col6 {\n","  background-color: #FFF3CD;\n","  color: #856404;\n","  text-align: left;\n","  vertical-align: top;\n","}\n","</style>\n","<table id=\"T_e36f6\" class=\"dataframe\">\n","  <thead>\n","    <tr>\n","      <th class=\"blank level0\" >&nbsp;</th>\n","      <th id=\"T_e36f6_level0_col0\" class=\"col_heading level0 col0\" >儲存格 ID</th>\n","      <th id=\"T_e36f6_level0_col1\" class=\"col_heading level0 col1\" >狀態</th>\n","      <th id=\"T_e36f6_level0_col2\" class=\"col_heading level0 col2\" >狀態說明</th>\n","      <th id=\"T_e36f6_level0_col3\" class=\"col_heading level0 col3\" >完成時間</th>\n","      <th id=\"T_e36f6_level0_col4\" class=\"col_heading level0 col4\" >耗時(秒)</th>\n","      <th id=\"T_e36f6_level0_col5\" class=\"col_heading level0 col5\" >警告數</th>\n","      <th id=\"T_e36f6_level0_col6\" class=\"col_heading level0 col6\" >錯誤摘要</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row0\" class=\"row_heading level0 row0\" >0</th>\n","      <td id=\"T_e36f6_row0_col0\" class=\"data row0 col0\" >Cell 1: 專案初始化與全局設定</td>\n","      <td id=\"T_e36f6_row0_col1\" class=\"data row0 col1\" >✅</td>\n","      <td id=\"T_e36f6_row0_col2\" class=\"data row0 col2\" >成功 (使用回退日期)</td>\n","      <td id=\"T_e36f6_row0_col3\" class=\"data row0 col3\" >2025-05-07 12:50:11 CST+0800</td>\n","      <td id=\"T_e36f6_row0_col4\" class=\"data row0 col4\" >0.06</td>\n","      <td id=\"T_e36f6_row0_col5\" class=\"data row0 col5\" >0</td>\n","      <td id=\"T_e36f6_row0_col6\" class=\"data row0 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row1\" class=\"row_heading level0 row1\" >1</th>\n","      <td id=\"T_e36f6_row1_col0\" class=\"data row1 col0\" >Cell 2: 核心函式定義</td>\n","      <td id=\"T_e36f6_row1_col1\" class=\"data row1 col1\" >✅</td>\n","      <td id=\"T_e36f6_row1_col2\" class=\"data row1 col2\" >成功</td>\n","      <td id=\"T_e36f6_row1_col3\" class=\"data row1 col3\" >2025-05-07 12:50:11 CST+0800</td>\n","      <td id=\"T_e36f6_row1_col4\" class=\"data row1 col4\" >0.01</td>\n","      <td id=\"T_e36f6_row1_col5\" class=\"data row1 col5\" >0</td>\n","      <td id=\"T_e36f6_row1_col6\" class=\"data row1 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row2\" class=\"row_heading level0 row2\" >2</th>\n","      <td id=\"T_e36f6_row2_col0\" class=\"data row2 col0\" >Cell 3: 日期處理與 API 驗證</td>\n","      <td id=\"T_e36f6_row2_col1\" class=\"data row2 col1\" >✅</td>\n","      <td id=\"T_e36f6_row2_col2\" class=\"data row2 col2\" >成功</td>\n","      <td id=\"T_e36f6_row2_col3\" class=\"data row2 col3\" >2025-05-07 12:50:12 CST+0800</td>\n","      <td id=\"T_e36f6_row2_col4\" class=\"data row2 col4\" >0.24</td>\n","      <td id=\"T_e36f6_row2_col5\" class=\"data row2 col5\" >0</td>\n","      <td id=\"T_e36f6_row2_col6\" class=\"data row2 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row3\" class=\"row_heading level0 row3\" >3</th>\n","      <td id=\"T_e36f6_row3_col0\" class=\"data row3 col0\" >Cell 4: 抓取 FRED 經濟數據</td>\n","      <td id=\"T_e36f6_row3_col1\" class=\"data row3 col1\" >✅</td>\n","      <td id=\"T_e36f6_row3_col2\" class=\"data row3 col2\" >成功</td>\n","      <td id=\"T_e36f6_row3_col3\" class=\"data row3 col3\" >2025-05-07 12:50:16 CST+0800</td>\n","      <td id=\"T_e36f6_row3_col4\" class=\"data row3 col4\" >4.69</td>\n","      <td id=\"T_e36f6_row3_col5\" class=\"data row3 col5\" >0</td>\n","      <td id=\"T_e36f6_row3_col6\" class=\"data row3 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row4\" class=\"row_heading level0 row4\" >4</th>\n","      <td id=\"T_e36f6_row4_col0\" class=\"data row4 col0\" >Cell 5: 抓取額外市場數據 (Yahoo Finance)</td>\n","      <td id=\"T_e36f6_row4_col1\" class=\"data row4 col1\" >✅</td>\n","      <td id=\"T_e36f6_row4_col2\" class=\"data row4 col2\" >成功</td>\n","      <td id=\"T_e36f6_row4_col3\" class=\"data row4 col3\" >2025-05-07 12:50:17 CST+0800</td>\n","      <td id=\"T_e36f6_row4_col4\" class=\"data row4 col4\" >1.02</td>\n","      <td id=\"T_e36f6_row4_col5\" class=\"data row4 col5\" >0</td>\n","      <td id=\"T_e36f6_row4_col6\" class=\"data row4 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row5\" class=\"row_heading level0 row5\" >5</th>\n","      <td id=\"T_e36f6_row5_col0\" class=\"data row5 col0\" >Cell 6: 抓取並處理 NY Fed 持有量</td>\n","      <td id=\"T_e36f6_row5_col1\" class=\"data row5 col1\" >⚠️</td>\n","      <td id=\"T_e36f6_row5_col2\" class=\"data row5 col2\" >成功 (有警告)</td>\n","      <td id=\"T_e36f6_row5_col3\" class=\"data row5 col3\" >2025-05-07 12:50:25 CST+0800</td>\n","      <td id=\"T_e36f6_row5_col4\" class=\"data row5 col4\" >7.19</td>\n","      <td id=\"T_e36f6_row5_col5\" class=\"data row5 col5\" >1</td>\n","      <td id=\"T_e36f6_row5_col6\" class=\"data row5 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row6\" class=\"row_heading level0 row6\" >6</th>\n","      <td id=\"T_e36f6_row6_col0\" class=\"data row6 col0\" >Cell 7: 合併所有數據源</td>\n","      <td id=\"T_e36f6_row6_col1\" class=\"data row6 col1\" >✅</td>\n","      <td id=\"T_e36f6_row6_col2\" class=\"data row6 col2\" >成功</td>\n","      <td id=\"T_e36f6_row6_col3\" class=\"data row6 col3\" >2025-05-07 12:50:25 CST+0800</td>\n","      <td id=\"T_e36f6_row6_col4\" class=\"data row6 col4\" >0.05</td>\n","      <td id=\"T_e36f6_row6_col5\" class=\"data row6 col5\" >0</td>\n","      <td id=\"T_e36f6_row6_col6\" class=\"data row6 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row7\" class=\"row_heading level0 row7\" >7</th>\n","      <td id=\"T_e36f6_row7_col0\" class=\"data row7 col0\" >Cell 8: 計算衍生指標與壓力指數</td>\n","      <td id=\"T_e36f6_row7_col1\" class=\"data row7 col1\" >✅</td>\n","      <td id=\"T_e36f6_row7_col2\" class=\"data row7 col2\" >成功</td>\n","      <td id=\"T_e36f6_row7_col3\" class=\"data row7 col3\" >2025-05-07 12:50:26 CST+0800</td>\n","      <td id=\"T_e36f6_row7_col4\" class=\"data row7 col4\" >0.16</td>\n","      <td id=\"T_e36f6_row7_col5\" class=\"data row7 col5\" >0</td>\n","      <td id=\"T_e36f6_row7_col6\" class=\"data row7 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row8\" class=\"row_heading level0 row8\" >8</th>\n","      <td id=\"T_e36f6_row8_col0\" class=\"data row8 col0\" >Cell 9: 產生時間序列圖表</td>\n","      <td id=\"T_e36f6_row8_col1\" class=\"data row8 col1\" >✅</td>\n","      <td id=\"T_e36f6_row8_col2\" class=\"data row8 col2\" >成功</td>\n","      <td id=\"T_e36f6_row8_col3\" class=\"data row8 col3\" >2025-05-07 12:50:42 CST+0800</td>\n","      <td id=\"T_e36f6_row8_col4\" class=\"data row8 col4\" >15.76</td>\n","      <td id=\"T_e36f6_row8_col5\" class=\"data row8 col5\" >0</td>\n","      <td id=\"T_e36f6_row8_col6\" class=\"data row8 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row9\" class=\"row_heading level0 row9\" >9</th>\n","      <td id=\"T_e36f6_row9_col0\" class=\"data row9 col0\" >Cell 10: 產生趨勢圖與儀表板</td>\n","      <td id=\"T_e36f6_row9_col1\" class=\"data row9 col1\" >✅</td>\n","      <td id=\"T_e36f6_row9_col2\" class=\"data row9 col2\" >成功</td>\n","      <td id=\"T_e36f6_row9_col3\" class=\"data row9 col3\" >2025-05-07 12:50:43 CST+0800</td>\n","      <td id=\"T_e36f6_row9_col4\" class=\"data row9 col4\" >0.72</td>\n","      <td id=\"T_e36f6_row9_col5\" class=\"data row9 col5\" >0</td>\n","      <td id=\"T_e36f6_row9_col6\" class=\"data row9 col6\" >None</td>\n","    </tr>\n","    <tr>\n","      <th id=\"T_e36f6_level0_row10\" class=\"row_heading level0 row10\" >10</th>\n","      <td id=\"T_e36f6_row10_col0\" class=\"data row10 col0\" >Cell 11: 顯示文字分析結果</td>\n","      <td id=\"T_e36f6_row10_col1\" class=\"data row10 col1\" >✅</td>\n","      <td id=\"T_e36f6_row10_col2\" class=\"data row10 col2\" >成功</td>\n","      <td id=\"T_e36f6_row10_col3\" class=\"data row10 col3\" >2025-05-07 12:50:43 CST+0800</td>\n","      <td id=\"T_e36f6_row10_col4\" class=\"data row10 col4\" >0.02</td>\n","      <td id=\"T_e36f6_row10_col5\" class=\"data row10 col5\" >0</td>\n","      <td id=\"T_e36f6_row10_col6\" class=\"data row10 col6\" >None</td>\n","    </tr>\n","  </tbody>\n","</table>\n"]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["\n","------------------------------ **⚠️ 詳細警告訊息** ------------------------------"]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:43,412 - __main__ - INFO - 使用 Pandas 生成摘要成功完成。\n"]},{"output_type":"stream","name":"stdout","text":["\n","\n","**[Cell 6: 抓取並處理 NY Fed 持有量]** (1 條警告):\n","- 合併了定義可能不同的 SBN(Gross?) 和 SBP(Net?) 數據，解釋需謹慎。\n","\n","================================================================================\n","**總結:** 共追蹤 11 個儲存格。\n","  - ✅ Cell 1 初始化成功。\n","\n","**工作流程 (Cell >= 2) 狀態 (10 個):**\n","  - ✅/👍 成功 (無警告/錯誤): 9\n","  - ⚠️  僅有警告 (無錯誤): 1\n","  - ❌  失敗 (可能伴隨警告): 0\n","================================================================================\n","\n","--------------------------------------------------------------------------------\n","**儲存格自身執行報告: Cell Z: 執行流程匯總報告 (v1.1)**\n","**狀態:** ✅ 成功\n","**執行時間:** 0.04 秒\n","**完成時間:** 2025-05-07 12:50:43 CST+0800\n","**執行註記:**\n","- 開始生成執行狀態摘要。\n","- 使用 Pandas 生成摘要表。\n","- 創建了 11 行的摘要 DataFrame。\n","- 已使用 IPython 顯示樣式化摘要表。\n","- 發現 1 個儲存格有詳細警告。\n","- 未發現儲存格的錯誤記錄。\n","- 已打印最終統計總結。\n","--------------------------------------------------------------------------------\n","\n"]}]},{"cell_type":"code","source":["# -*- coding: utf-8 -*-\n","# 專案: 一級交易商壓力分析 (模組化版本)\n","# 版本: 1.1 (Cell 12 - 使用 Checkbox)\n","# 日期: 2025-05-03\n","# 地點: 台灣 高雄市 三民區\n","# ==================================================\n","# @title Cell 12: 互動式報告參數設定 (使用 Checkbox)\n","# --------------------------------------------------\n","# 功能: 提供互動式介面，讓使用者選擇要生成之 HTML 報告的日期範圍\n","#       (最新狀況、最近 N 天、自訂) 和要包含的圖表 (使用勾選框)。\n","#       將使用者選擇儲存到全局變數中。\n","# 版本: 1.1\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1'] (需要 ipywidgets 庫)\n","# 輸入: (使用者透過 ipywidgets 互動)\n","#       ['global:PROJECT_CONFIG'] (讀取預設 ETF Ticker)\n","# 輸出: ['global:report_date_range_type', 'global:report_start_date',\n","#        'global:report_end_date', 'global:report_charts_selected']\n","#       (更新 EXECUTION_TRACKER)\n","# ==================================================\n","\n","# ==================================================\n","# 設計註解 (整合版 v2.7.1 - 開頭)\n","# --------------------------------------------------\n","# ## 本儲存格主要完成事項：\n","# * **檢查依賴**: 驗證 Cell 1 是否成功載入 `ipywidgets` 函式庫。\n","# * **定義可用圖表**: 列出可供使用者選擇的圖表名稱。\n","# * **創建 Widgets**:\n","#   * `Dropdown` (日期範圍類型): 提供 \"最新狀況\", \"最近30天\", \"最近90天\", \"自訂區間\" 選項。\n","#   * `DatePicker` (開始/結束日期): 用於選擇自訂區間，初始隱藏。\n","#   * **`Checkbox` 列表 (圖表選擇)**: 為每個可用圖表創建一個勾選框，替代 SelectMultiple。\n","#   * `Button` (確認按鈕): 觸發參數儲存。\n","#   * `Output` (訊息區域): 顯示確認或錯誤訊息。\n","# * **互動邏輯**:\n","#   * `Dropdown` 的觀察者 (`observe`): 當選擇 \"自訂區間\" 時顯示日期選擇器，否則隱藏。\n","#   * 按鈕的 `on_click` 事件處理:\n","#     * 讀取所有 widget 的當前值。\n","#     * 驗證自訂區間的日期邏輯 (若選擇)。\n","#     * **遍歷 Checkbox 列表**，將勾選的圖表名稱加入 `report_charts_selected`。\n","#     * 驗證是否至少選擇了一個圖表。\n","#     * 將有效的選擇儲存到對應的全局變數。\n","#     * 在 Output 區域顯示確認訊息。\n","# * **佈局與顯示**: 使用 `VBox` 和 `HBox` (或 `GridBox`) 排列 widgets 並顯示。\n","# * **狀態報告**: 在 `finally` 區塊中更新 `EXECUTION_TRACKER` 並打印執行報告。\n","#\n","# ## 設計思路/邏輯說明：\n","# * 將報告參數的設定集中在此互動式儲存格。\n","# * 使用 `Dropdown` 和動態顯示的 `DatePicker` 提供靈活的日期範圍選擇。\n","# * **改用 Checkbox** 列表進行圖表選擇，提高行動裝置易用性。\n","# * 透過全局變數將使用者的選擇傳遞給下一個儲存格 (Cell 13)。\n","# * 提供清晰的輸出訊息，引導使用者執行下一步。\n","#\n","# ## 重要假設：\n","# * Cell 1 已成功執行並載入了 `ipywidgets`。\n","# * 使用者會在此儲存格進行互動並點擊按鈕，然後再執行 Cell 13。\n","#\n","# ## 主要輸出/狀態變更：\n","# * `global:report_date_range_type` (str): 使用者選擇的日期範圍類型。\n","# * `global:report_start_date` (str or None): 自訂開始日期 (若選擇自訂)。\n","# * `global:report_end_date` (str or None): 自訂結束日期 (若選擇自訂)。\n","# * `global:report_charts_selected` (list): 使用者勾選的圖表名稱列表。\n","# * `global:EXECUTION_TRACKER`: 更新了此儲存格 (Cell 12) 的執行記錄。\n","#\n","# ## 注意事項/後續步驟：\n","# * 執行此儲存格後，請進行互動選擇，並**務必點擊「產生 HTML 報告參數」按鈕**\n","#   來儲存您的選擇。\n","# * **後續步驟:** 執行 **Cell 13: 產生 HTML 報告檔**。\n","# ==================================================\n","\n","# --- 標準庫導入 ---\n","import time\n","import traceback\n","import pprint\n","import logging\n","from datetime import datetime, date, timedelta\n","\n","# --- 第三方庫導入 ---\n","try:\n","    import ipywidgets as widgets\n","    from ipywidgets import HBox, VBox, Layout # 引入 Layout 控制樣式\n","    from IPython.display import display, clear_output\n","    import pandas as pd\n","    print(\"互動介面所需函式庫 (ipywidgets, pandas) 看似可用。\")\n","    _WIDGETS_AVAILABLE = True\n","except ImportError as e:\n","    print(f\"警告：導入互動介面所需函式庫失敗({e})。此儲存格無法正常工作。\")\n","    widgets = None; HBox = None; VBox = None; Layout = None\n","    display = print; clear_output = lambda wait=True: None\n","    pd = None\n","    _WIDGETS_AVAILABLE = False\n","\n","# --- 獲取 Logger ---\n","logger = logging.getLogger(__name__)\n","\n","# --- 儲存格標識符 ---\n","_cell_identifier = \"Cell 12: 互動式報告參數設定\"\n","\n","# --- 狀態追蹤變數 ---\n","_cell_start_time = time.time()\n","_cell_status = \"處理中\"\n","_cell_warnings = []\n","_cell_notes = []\n","_cell_error = None\n","_cell_traceback = None\n","_cell_inputs = {}\n","_cell_outputs = {}\n","_cell_generated_files = []\n","\n","# --- 全局變數定義 ---\n","global report_date_range_type, report_start_date, report_end_date, report_charts_selected\n","report_date_range_type = None\n","report_start_date = None\n","report_end_date = None\n","report_charts_selected = []\n","\n","# --- 主要執行邏輯 ---\n","try:\n","    # --- 0. 檢查依賴 ---\n","    logger.info(f\"{_cell_identifier} - 開始執行...\")\n","    print(f\"\\n--- {_cell_identifier} (v1.1) 開始執行 ---\") # 更新版本號\n","\n","    if not _WIDGETS_AVAILABLE or not pd:\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：缺少 ipywidgets 或 pandas 函式庫。\"; raise ImportError(_cell_error)\n","    if 'libs_loaded' not in globals() or not libs_loaded.get('ipywidgets'):\n","         _cell_status = \"失敗\"; _cell_error = f\"依賴錯誤：Cell 1 未能成功載入 ipywidgets。\"; raise ImportError(_cell_error)\n","    if 'PROJECT_CONFIG' not in globals() or not isinstance(PROJECT_CONFIG, dict):\n","        _cell_status = \"失敗\"; _cell_error = \"依賴錯誤：找不到有效的 PROJECT_CONFIG。\"; raise NameError(_cell_error)\n","\n","    print(f\"  - 步驟 0: 依賴檢查通過。\")\n","\n","    # --- 1. 定義互動元件 ---\n","    print(\"  - 步驟 1: 定義互動元件...\")\n","    logger.info(\"步驟 1: 定義互動元件...\")\n","\n","    # 可用圖表選項\n","    available_charts = [\n","        \"SOFR (%)\", \"Spread 10Y-2Y (BPS)\", \"MOVE Level\", \"VIX Index\",\n","        \"Dealer Pos (Bil $)\", \"Reserves (Tril $)\", \"Stress Index (Smoothed)\",\n","        \"Positions/Reserves Ratio\", \"Stress Idx MACD\",\n","    ]\n","    etf_ticker_widget = PROJECT_CONFIG.get('lt_bond_etf_ticker', '').strip().upper()\n","    if PROJECT_CONFIG.get('enable_lt_bond_etf_plot', False) and etf_ticker_widget:\n","        available_charts.append(f\"LT Bond ETF ({etf_ticker_widget})\")\n","    _cell_inputs['available_charts'] = available_charts\n","\n","    # 日期範圍選擇\n","    date_range_options = [\n","        (\"最新狀況\", \"latest\"), (\"最近 30 天\", \"last_30d\"), (\"最近 90 天\", \"last_90d\"),\n","        (\"最近一年\", \"last_1y\"), (\"自訂區間\", \"custom\")\n","    ]\n","    date_range_dropdown = widgets.Dropdown(\n","        options=date_range_options, value=\"latest\", description='報告日期範圍:',\n","        style={'description_width': 'initial'}\n","    )\n","    _cell_inputs['default_date_range_type'] = \"latest\"\n","\n","    # 自訂日期選擇器\n","    try:\n","        if 'target_tz' in globals() and target_tz: today_widget = datetime.now(target_tz).date()\n","        else: today_widget = datetime.now(timezone.utc).date()\n","    except: today_widget = date.today()\n","\n","    start_date_picker_custom = widgets.DatePicker(description='自訂開始日期:', value=today_widget - timedelta(days=90), disabled=False)\n","    end_date_picker_custom = widgets.DatePicker(description='自訂結束日期:', value=today_widget, disabled=False)\n","    custom_date_box = VBox([start_date_picker_custom, end_date_picker_custom])\n","    custom_date_box.layout.display = 'none'\n","\n","    # 圖表選擇 (使用 Checkbox)\n","    print(\"      - 創建圖表選擇 Checkbox...\")\n","    chart_checkboxes = {} # 使用字典儲存 Checkbox，方便按名稱查找\n","    default_selected_charts = [\n","        \"Stress Index (Smoothed)\", \"MOVE Level\", \"Spread 10Y-2Y (BPS)\", \"Positions/Reserves Ratio\"\n","    ]\n","    valid_defaults = [c for c in default_selected_charts if c in available_charts]\n","    _cell_inputs['default_charts_selected'] = valid_defaults\n","\n","    checkbox_widgets = []\n","    for chart_name in available_charts:\n","        checkbox = widgets.Checkbox(\n","            value=(chart_name in valid_defaults), # 預設勾選\n","            description=chart_name,\n","            disabled=False,\n","            indent=False, # 減少縮排，更緊湊\n","            layout=Layout(width='auto', margin='0px 5px 0px 0px') # 自動寬度，加右邊距\n","        )\n","        chart_checkboxes[chart_name] = checkbox\n","        checkbox_widgets.append(checkbox)\n","\n","    # 將 Checkbox 分成兩欄顯示，更適合手機\n","    num_charts = len(checkbox_widgets)\n","    mid_point = (num_charts + 1) // 2\n","    checkbox_col1 = VBox(checkbox_widgets[:mid_point])\n","    checkbox_col2 = VBox(checkbox_widgets[mid_point:])\n","    charts_selection_box = HBox([checkbox_col1, checkbox_col2]) # 水平排列兩欄\n","\n","    # 確認按鈕和輸出區域\n","    confirm_button_report = widgets.Button(\n","        description=\"✅ 確認參數並準備生成報告\", # 更新按鈕文字\n","        button_style='success',\n","        tooltip='點擊此按鈕確認以上選擇，然後執行下一個 Cell 生成報告'\n","    )\n","    output_area_report = widgets.Output()\n","\n","    # --- 2. 定義互動邏輯 ---\n","    print(\"  - 步驟 2: 定義互動邏輯...\")\n","    logger.info(\"步驟 2: 定義互動邏輯...\")\n","\n","    def handle_date_range_change(change):\n","        if change['new'] == 'custom': custom_date_box.layout.display = 'flex' # Use flex for VBox\n","        else: custom_date_box.layout.display = 'none'\n","    date_range_dropdown.observe(handle_date_range_change, names='value')\n","\n","    def on_confirm_report_button_clicked(b):\n","        global report_date_range_type, report_start_date, report_end_date, report_charts_selected\n","        global _cell_outputs, _cell_status, _cell_warnings, _cell_notes\n","\n","        with output_area_report:\n","            clear_output(wait=True)\n","            logger.info(\"報告參數確認按鈕被點擊。\")\n","\n","            selected_range_type = date_range_dropdown.value\n","            custom_start = None; custom_end = None\n","            validation_ok = True\n","\n","            if selected_range_type == 'custom':\n","                start_obj = start_date_picker_custom.value\n","                end_obj = end_date_picker_custom.value\n","                if start_obj and end_obj:\n","                    if start_obj >= end_obj:\n","                        print(\"❌ 錯誤：自訂區間的開始日期必須早於結束日期。\"); validation_ok = False\n","                    else:\n","                        custom_start = start_obj.strftime('%Y-%m-%d')\n","                        custom_end = end_obj.strftime('%Y-%m-%d')\n","                else:\n","                    print(\"❌ 錯誤：選擇自訂區間時，必須指定開始和結束日期。\"); validation_ok = False\n","\n","            # 從 Checkbox 收集選擇的圖表\n","            selected_charts = []\n","            for chart_name, checkbox in chart_checkboxes.items():\n","                if checkbox.value:\n","                    selected_charts.append(chart_name)\n","\n","            if not selected_charts:\n","                print(\"❌ 錯誤：請至少選擇一個要包含在報告中的圖表。\"); validation_ok = False\n","\n","            if validation_ok:\n","                report_date_range_type = selected_range_type\n","                report_start_date = custom_start\n","                report_end_date = custom_end\n","                report_charts_selected = selected_charts\n","\n","                _cell_outputs['selected_date_range_type'] = report_date_range_type\n","                _cell_outputs['selected_start_date'] = report_start_date\n","                _cell_outputs['selected_end_date'] = report_end_date\n","                _cell_outputs['selected_charts_count'] = len(report_charts_selected)\n","                _cell_outputs['selected_charts_list'] = report_charts_selected\n","\n","                success_msg = (f\"✅ 報告參數已設定！\\n\"\n","                               f\"   - 日期範圍: {dict(date_range_options)[report_date_range_type]}\"\n","                               f\"{' (' + report_start_date + ' 至 ' + report_end_date + ')' if report_date_range_type == 'custom' else ''}\\n\"\n","                               f\"   - 已選圖表: {', '.join(report_charts_selected)}\\n\"\n","                               f\"➡️ 請執行下一個儲存格 (Cell 13) 來生成 HTML 報告。\")\n","                print(success_msg)\n","                _cell_notes.append(\"使用者已確認報告參數。\")\n","                logger.info(f\"報告參數已確認: 範圍={report_date_range_type}, 圖表={report_charts_selected}\")\n","                if not _cell_warnings: _cell_status = \"成功\" # 更新狀態\n","            else:\n","                 report_date_range_type = None; report_start_date = None; report_end_date = None; report_charts_selected = []\n","                 _cell_outputs.pop('selected_date_range_type', None) # 清除記錄\n","\n","    confirm_button_report.on_click(on_confirm_report_button_clicked)\n","\n","    # --- 3. 顯示介面 ---\n","    print(\"  - 步驟 3: 顯示互動介面...\")\n","    logger.info(\"步驟 3: 顯示互動介面...\")\n","    ui = VBox([\n","        widgets.HTML(\"<h3>請選擇 HTML 報告的參數：</h3>\"),\n","        date_range_dropdown,\n","        custom_date_box,\n","        widgets.HTML(\"<hr>\"),\n","        widgets.Label(\"選擇圖表:\"), # 添加標籤\n","        charts_selection_box, # 使用包含兩欄 Checkbox 的 HBox\n","        widgets.HTML(\"<hr>\"),\n","        confirm_button_report,\n","        output_area_report\n","    ])\n","    display(ui)\n","    _cell_notes.append(\"已顯示互動式報告參數設定介面 (使用 Checkbox)。\")\n","\n","    _cell_status = \"等待使用者確認\"\n","    logger.info(f\"{_cell_identifier} - 介面顯示完成，等待使用者互動。\")\n","\n","\n","# --- 異常處理 ---\n","except (NameError, ValueError, ImportError, KeyError) as e:\n","    if _cell_status != \"失敗\": _cell_status = \"失敗\"; _cell_error = f\"執行過程中發生錯誤: {e}\"\n","    if not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗。\")\n","except Exception as e:\n","    if _cell_status != \"失敗\":\n","        _cell_status = \"失敗\"; _cell_error = f\"執行時發生未預期錯誤 ({e.__class__.__name__}): {e}\"\n","        _cell_traceback = traceback.format_exc()\n","        logger.critical(f\"{_cell_identifier} 失敗: {_cell_error}\", exc_info=True)\n","    elif not _cell_traceback: _cell_traceback = traceback.format_exc()\n","    print(f\"❌ {_cell_identifier} 執行失敗 (未預期錯誤)。\")\n","\n","# --- finally 區塊：執行總結報告 ---\n","finally:\n","    _cell_end_time = time.time()\n","    _cell_duration = _cell_end_time - _cell_start_time\n","    _final_status_icon = \"❓\"\n","\n","    if _cell_status == \"失敗\": _final_status_icon = \"❌\"\n","    elif _cell_status == \"跳過\": _final_status_icon = \"🚫\"\n","    elif \"有警告\" in _cell_status: _final_status_icon = \"⚠️\"\n","    elif _cell_status == \"成功\": _final_status_icon = \"✅\"\n","    elif _cell_status == \"等待使用者確認\": _final_status_icon = \"⏳\"\n","\n","    _current_time_str = \"N/A\"\n","    try:\n","        if 'target_tz' in globals() and target_tz: _report_tz_info = target_tz\n","        else: _report_tz_info = timezone(timedelta(hours=8), name='UTC+8 (Fallback)')\n","        _current_time_str = datetime.now(_report_tz_info).strftime('%Y-%m-%d %H:%M:%S %Z%z')\n","    except Exception as time_err:\n","        try: _current_time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S (Local)')\n","        except Exception as time_err_local: _current_time_str = f\"獲取時間錯誤: {time_err_local}\"\n","        if _cell_status != \"失敗\": _cell_warnings.append(f\"報告時間獲取錯誤: {time_err}\")\n","\n","    if 'EXECUTION_TRACKER' not in globals() or not isinstance(EXECUTION_TRACKER, dict):\n","        EXECUTION_TRACKER = {}\n","        if _cell_status != \"失敗\": _cell_warnings.append(\"EXECUTION_TRACKER 未正確初始化。\")\n","\n","    _tracking_record = {\n","        'cell_id': _cell_identifier,\n","        'status_icon': _final_status_icon,\n","        'status_text': _cell_status,\n","        'timestamp': _current_time_str,\n","        'duration_sec': round(_cell_duration, 2),\n","        'warnings': sorted(list(set(_cell_warnings))),\n","        'error': _cell_error,\n","        'traceback': _cell_traceback.strip() if _cell_traceback else None,\n","        'notes': _cell_notes,\n","        'inputs': _cell_inputs,\n","        'outputs': _cell_outputs,\n","        'generated_files': _cell_generated_files\n","    }\n","    try:\n","        EXECUTION_TRACKER[_cell_identifier] = _tracking_record\n","    except Exception as tracker_update_err:\n","         print(f\"錯誤: 更新 EXECUTION_TRACKER 時發生異常: {tracker_update_err}\")\n","         try: logger.error(f\"更新 EXECUTION_TRACKER 時失敗: {tracker_update_err}\", exc_info=True)\n","         except: pass\n","\n","    print(\"\\n\" + \"=\"*80)\n","    print(f\"儲存格: {_cell_identifier} (v1.1) **執行總結報告**\") # 更新版本號\n","    print(f\"**狀態:** {_final_status_icon} {_cell_status}\")\n","    print(f\"**執行時間:** {_cell_duration:.2f} 秒\")\n","    print(f\"**完成時間:** {_current_time_str}\")\n","    if _cell_inputs: print(\"\\n**⚙️ 輸入參數詳情 (預設/可用選項):**\"); pprint.pprint(_cell_inputs, indent=2, width=70, sort_dicts=False)\n","    if _cell_notes: print(\"\\n**📝 執行註記:**\"); [print(f\"- {note}\") for note in _cell_notes]\n","    if _tracking_record.get('warnings'): print(\"\\n**⚠️ 警告訊息:**\"); [print(f\"- {warning}\") for warning in _tracking_record['warnings']]\n","    if _tracking_record.get('error'): print(f\"\\n**❌ 錯誤訊息:**\\n{_tracking_record['error']}\")\n","    if _tracking_record.get('traceback'):\n","        print(\"\\n\" + \"-\"*20 + \" **詳細錯誤追蹤 (Traceback)** \" + \"-\"*20)\n","        print(f\"<pre>{_tracking_record['traceback']}</pre>\")\n","        print(\"-\" * (46 + len(\" 詳細錯誤追蹤 (Traceback) \")))\n","    print(\"\\n**📊 主要輸出 / 狀態變更 (使用者確認後更新):**\")\n","    outputs_display = _tracking_record.get('outputs', {}).copy()\n","    if not outputs_display.get('selected_date_range_type'):\n","        outputs_display['info'] = \"等待使用者選擇參數並點擊按鈕...\"\n","    pprint.pprint(outputs_display, indent=2, width=70, sort_dicts=False)\n","    if _tracking_record.get('generated_files'): print(\"\\n**📄 相關檔案:**\"); [print(f\"- ./{f_path}\") for f_path in _tracking_record['generated_files']]\n","    print(\"=\"*80 + \"\\n\")\n","\n","    # --- 清理 ---\n","    try: del _cell_start_time, _cell_end_time, _cell_duration, _cell_status\n","    except NameError: pass\n","    try: del _cell_error, _cell_traceback, _cell_warnings, _cell_notes\n","    except NameError: pass\n","    try: del _cell_inputs, _cell_outputs, _cell_generated_files\n","    except NameError: pass\n","    try: del _final_status_icon, _current_time_str, _tracking_record, _report_tz_info\n","    except NameError: pass\n","    try: del available_charts, etf_ticker_widget, date_range_options, date_range_dropdown\n","    except NameError: pass\n","    try: del today_widget, start_date_picker_custom, end_date_picker_custom, custom_date_box\n","    except NameError: pass\n","    try: del default_selected_charts, valid_defaults, chart_checkboxes, checkbox_widgets\n","    except NameError: pass\n","    try: del num_charts, mid_point, checkbox_col1, checkbox_col2, charts_selection_box\n","    except NameError: pass\n","    try: del confirm_button_report, output_area_report, ui, outputs_display\n","    except NameError: pass\n","    # 全局變數和 widget 實例保留\n","\n","# ==================================================\n","# 頁尾註解 (v2.7.1) - 快速回顧標頭信息\n","# --------------------------------------------------\n","# @title Cell 12: 互動式報告參數設定 (使用 Checkbox)\n","# 功能: 提供互動介面選擇報告日期範圍和圖表 (使用勾選框)。\n","# 版本: 1.1\n","# 日期: 2025-05-03\n","# 依賴: ['Cell 1']\n","# 輸入: (使用者互動), ['global:PROJECT_CONFIG']\n","# 輸出: ['global:report_date_range_type', 'global:report_start_date', 'global:report_end_date', 'global:report_charts_selected']\n","# ==================================================\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":829,"referenced_widgets":["86d298b7bdc3461dbf4ec3f7e409371a","feb2cdd3984b44909d73a20710ad3717","32a045b4e0b74410af60ed0b8d65775f","5b2ddfc7e7804a07bd2f72b040572b6e","5fa11d54d8374783a4d658a8a1b60c54","ee3404657a3947bbb41fe31b3f7eb3d0","5d9b447f4d6440af8fb849b84ff80736","2112cda95d3a4a1ab839d74b76eeb34e","a412d7c35f124a92b5f9aee7f4a84eba","08afb5b99bcb48bb86747317b8fc1dea","9ce986f468944b90a6c79432d94ec5d2","eadb43e4d8ab45fc9502c0ba22b2ec83","070ed18b14a14d5fa68269448e8304f9","1632bb6c24db47389e30ebab7bc26b47","b5a1855e9c9741f18935f842528275d4","82f7c6ffa9754b43b58ab3bf08bc791c","f09a668371ab4541893b1cc963958efd","d3cbc19fda8e47989aeefddf411f6e6b","e0f1032c9f0d4a2ea24930820c0804a7","cfc433a146ae47be9d479ed2a105796a","56fd37f91e6c47a0830abc554c687b5c","d74fce6ef41b425b97633e7844365618","5ebde447fa7f4ec1ba40e68f9b4d5e0c","1f8fa37943d7479ca8b2e184660bbb28","6e8f09e2ad964b52acdd46505a050c51","5882ff55640f4983b48f880012895e3a","8f8bc3e9a6d1480a8c8adbaf063236f0","f1c75b010ed8419297f0c9b76a7716ab","04de279d35c046c7a6ba6be9e70a0bd2","16cb30f0cd424a68a0f5543ac3686998","0edec97c932e4c0aa0ee389d374be368","09a445dc2b3e4243918166f44dabba6c","a5b17497c5e444c68f78191571f0694c","cd01262a678340668c1c41c01923cd20","277a581986b340678fe7955b977b1acf","1b203e0d2e2d475c82b06da27b64de83","2540247764b3413eb48daf779e389973","892db707884c44d5a0bd93db7e98cc2d","6cbe101bcde042e9bb276a191aae82a2","3e50b0b52c8b4c7c8ef6bc9571a4119e","11a89200cb0d4b52bb1513c0990b74c7","6fec770d74c04b2da11391dcbb1072fe","c019e2b3aa68448385329225a9d14a92","71f70d3c7fa9442a901dbacbe2dfc663","70f0b021d65541cc9a44dd8075bf0a46","e6519b5f375a455b8a45aa1fd64d5644","749d9658f34d4df5bf9d6fdb6caf9d1e","11e543cb18fe4b719c21a622afbcc62a","87456330e3b84f82862b416ae7da5a75","590605b63bf54ece9eb8ff067d42cb94","9b165f6e6ace445285945dbf7e2eed88","f757eaef5b1147839c24e10fff72db7f","88c0485b5a0c444ba247d6182b691fc9","27dbb0d59c604be4a3ad04fff1961bb5","b4d3838fdcd147f083150a4a46cc0f13","a73ee040474b4fd2a0b2cfac28d16fa4","7c52e870b62d4143844eadac13810a4b","5ec6f63633d6474fa26c03a625f5b555","507e70da12c746689e7fd61c3980c34e","69d12c11e9f74b82be0e0ffd2c13becc","1d09b7c7e5674bbd80e80175b591a09e","8b259edc03dc495eb00de40cc9fbfab0","6e3d9a13194d4d5ba530ec9374a08407","d76f4ca7ed3a463f92f08ca738b487d9","40d49ff783a440b2a9765db9216ca3df"]},"id":"ldHcI5OgEQAN","executionInfo":{"status":"ok","timestamp":1746593444204,"user_tz":-480,"elapsed":266,"user":{"displayName":"SP H","userId":"01973558706658263211"}},"outputId":"467a2a00-80f5-4567-e7e4-dc7371f6dedc"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:43,493 - __main__ - INFO - Cell 12: 互動式報告參數設定 - 開始執行...\n","2025-05-07 04:50:43,496 - __main__ - INFO - 步驟 1: 定義互動元件...\n"]},{"output_type":"stream","name":"stdout","text":["互動介面所需函式庫 (ipywidgets, pandas) 看似可用。\n","\n","--- Cell 12: 互動式報告參數設定 (v1.1) 開始執行 ---\n","  - 步驟 0: 依賴檢查通過。\n","  - 步驟 1: 定義互動元件...\n","      - 創建圖表選擇 Checkbox...\n"]},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:43,635 - __main__ - INFO - 步驟 2: 定義互動邏輯...\n","2025-05-07 04:50:43,636 - __main__ - INFO - 步驟 3: 顯示互動介面...\n"]},{"output_type":"stream","name":"stdout","text":["  - 步驟 2: 定義互動邏輯...\n","  - 步驟 3: 顯示互動介面...\n"]},{"output_type":"display_data","data":{"text/plain":["VBox(children=(HTML(value='<h3>請選擇 HTML 報告的參數：</h3>'), Dropdown(description='報告日期範圍:', options=(('最新狀況', 'late…"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"86d298b7bdc3461dbf4ec3f7e409371a"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["2025-05-07 04:50:43,686 - __main__ - INFO - Cell 12: 互動式報告參數設定 - 介面顯示完成，等待使用者互動。\n"]},{"output_type":"stream","name":"stdout","text":["\n","================================================================================\n","儲存格: Cell 12: 互動式報告參數設定 (v1.1) **執行總結報告**\n","**狀態:** ⏳ 等待使用者確認\n","**執行時間:** 0.20 秒\n","**完成時間:** 2025-05-07 12:50:43 CST+0800\n","\n","**⚙️ 輸入參數詳情 (預設/可用選項):**\n","{ 'available_charts': [ 'SOFR (%)',\n","                        'Spread 10Y-2Y (BPS)',\n","                        'MOVE Level',\n","                        'VIX Index',\n","                        'Dealer Pos (Bil $)',\n","                        'Reserves (Tril $)',\n","                        'Stress Index (Smoothed)',\n","                        'Positions/Reserves Ratio',\n","                        'Stress Idx MACD',\n","                        'LT Bond ETF (TLT)'],\n","  'default_date_range_type': 'latest',\n","  'default_charts_selected': [ 'Stress Index (Smoothed)',\n","                               'MOVE Level',\n","                               'Spread 10Y-2Y (BPS)',\n","                               'Positions/Reserves Ratio']}\n","\n","**📝 執行註記:**\n","- 已顯示互動式報告參數設定介面 (使用 Checkbox)。\n","\n","**📊 主要輸出 / 狀態變更 (使用者確認後更新):**\n","{'info': '等待使用者選擇參數並點擊按鈕...'}\n","================================================================================\n","\n"]}]}],"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMVnx8A42kmlWFjN3/8yUch"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"2d841e24884e44329e2e6f6eaba2bbc6":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_97cbc6087cf340ce98fae5393ed9e517","IPY_MODEL_8b9d50bafc21406bb7dde016f78c94fe","IPY_MODEL_06155f555c04429b8bb14e2b8146f6aa"],"layout":"IPY_MODEL_ed30d22d6262420abd354013a1b1247f","tabbable":null,"tooltip":null}},"97cbc6087cf340ce98fae5393ed9e517":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_1a7be9ece1254ec99e1c7c024450d9bf","IPY_MODEL_159dc8cd11b54ac3b29223e9e20cfdcb"],"layout":"IPY_MODEL_511c346dbb04499b82dc293f7f68d8cb","tabbable":null,"tooltip":null}},"8b9d50bafc21406bb7dde016f78c94fe":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ButtonModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ButtonView","button_style":"info","description":"🔄 更新並儲存日期設定","disabled":false,"icon":"save","layout":"IPY_MODEL_9d141739e08d461790b959f8e2c4539c","style":"IPY_MODEL_c70d903cb4ff4bfab7c63faf5a7a376e","tabbable":null,"tooltip":"點擊此按鈕以使用上方選擇的日期，並儲存供下次使用"}},"06155f555c04429b8bb14e2b8146f6aa":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_model_name":"OutputModel","_view_count":null,"_view_module":"@jupyter-widgets/output","_view_module_version":"1.0.0","_view_name":"OutputView","layout":"IPY_MODEL_74b665976d914494945a7cc24113bae0","msg_id":"","outputs":[],"tabbable":null,"tooltip":null}},"ed30d22d6262420abd354013a1b1247f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1a7be9ece1254ec99e1c7c024450d9bf":{"model_module":"@jupyter-widgets/controls","model_name":"DatePickerModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DatePickerModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"DatePickerView","description":"開始日期:","description_allow_html":false,"disabled":false,"layout":"IPY_MODEL_762f76e2506e4c4b89ca4f5b20aec64b","max":null,"min":null,"step":1,"style":"IPY_MODEL_da5bc3fd882a480b95fa7e65d363e331","tabbable":null,"tooltip":null,"value":{"year":2018,"month":0,"date":1}}},"159dc8cd11b54ac3b29223e9e20cfdcb":{"model_module":"@jupyter-widgets/controls","model_name":"DatePickerModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DatePickerModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"DatePickerView","description":"結束日期:","description_allow_html":false,"disabled":false,"layout":"IPY_MODEL_fc5ba508b8dd40bfb50eef64ea9844bd","max":null,"min":null,"step":1,"style":"IPY_MODEL_6dafc7fb1daa43d2a5328f9e82484937","tabbable":null,"tooltip":null,"value":{"year":2025,"month":4,"date":7}}},"511c346dbb04499b82dc293f7f68d8cb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9d141739e08d461790b959f8e2c4539c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c70d903cb4ff4bfab7c63faf5a7a376e":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ButtonStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","button_color":null,"font_family":null,"font_size":null,"font_style":null,"font_variant":null,"font_weight":null,"text_color":null,"text_decoration":null}},"762f76e2506e4c4b89ca4f5b20aec64b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"da5bc3fd882a480b95fa7e65d363e331":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","description_width":""}},"fc5ba508b8dd40bfb50eef64ea9844bd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6dafc7fb1daa43d2a5328f9e82484937":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","description_width":""}},"74b665976d914494945a7cc24113bae0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"86d298b7bdc3461dbf4ec3f7e409371a":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_feb2cdd3984b44909d73a20710ad3717","IPY_MODEL_32a045b4e0b74410af60ed0b8d65775f","IPY_MODEL_5b2ddfc7e7804a07bd2f72b040572b6e","IPY_MODEL_5fa11d54d8374783a4d658a8a1b60c54","IPY_MODEL_ee3404657a3947bbb41fe31b3f7eb3d0","IPY_MODEL_5d9b447f4d6440af8fb849b84ff80736","IPY_MODEL_2112cda95d3a4a1ab839d74b76eeb34e","IPY_MODEL_a412d7c35f124a92b5f9aee7f4a84eba","IPY_MODEL_08afb5b99bcb48bb86747317b8fc1dea"],"layout":"IPY_MODEL_9ce986f468944b90a6c79432d94ec5d2","tabbable":null,"tooltip":null}},"feb2cdd3984b44909d73a20710ad3717":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_eadb43e4d8ab45fc9502c0ba22b2ec83","placeholder":"​","style":"IPY_MODEL_070ed18b14a14d5fa68269448e8304f9","tabbable":null,"tooltip":null,"value":"<h3>請選擇 HTML 報告的參數：</h3>"}},"32a045b4e0b74410af60ed0b8d65775f":{"model_module":"@jupyter-widgets/controls","model_name":"DropdownModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DropdownModel","_options_labels":["最新狀況","最近 30 天","最近 90 天","最近一年","自訂區間"],"_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"DropdownView","description":"報告日期範圍:","description_allow_html":false,"disabled":false,"index":0,"layout":"IPY_MODEL_1632bb6c24db47389e30ebab7bc26b47","style":"IPY_MODEL_b5a1855e9c9741f18935f842528275d4","tabbable":null,"tooltip":null}},"5b2ddfc7e7804a07bd2f72b040572b6e":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_82f7c6ffa9754b43b58ab3bf08bc791c","IPY_MODEL_f09a668371ab4541893b1cc963958efd"],"layout":"IPY_MODEL_d3cbc19fda8e47989aeefddf411f6e6b","tabbable":null,"tooltip":null}},"5fa11d54d8374783a4d658a8a1b60c54":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_e0f1032c9f0d4a2ea24930820c0804a7","placeholder":"​","style":"IPY_MODEL_cfc433a146ae47be9d479ed2a105796a","tabbable":null,"tooltip":null,"value":"<hr>"}},"ee3404657a3947bbb41fe31b3f7eb3d0":{"model_module":"@jupyter-widgets/controls","model_name":"LabelModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"LabelModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"LabelView","description":"","description_allow_html":false,"layout":"IPY_MODEL_56fd37f91e6c47a0830abc554c687b5c","placeholder":"​","style":"IPY_MODEL_d74fce6ef41b425b97633e7844365618","tabbable":null,"tooltip":null,"value":"選擇圖表:"}},"5d9b447f4d6440af8fb849b84ff80736":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5ebde447fa7f4ec1ba40e68f9b4d5e0c","IPY_MODEL_1f8fa37943d7479ca8b2e184660bbb28"],"layout":"IPY_MODEL_6e8f09e2ad964b52acdd46505a050c51","tabbable":null,"tooltip":null}},"2112cda95d3a4a1ab839d74b76eeb34e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"HTMLView","description":"","description_allow_html":false,"layout":"IPY_MODEL_5882ff55640f4983b48f880012895e3a","placeholder":"​","style":"IPY_MODEL_8f8bc3e9a6d1480a8c8adbaf063236f0","tabbable":null,"tooltip":null,"value":"<hr>"}},"a412d7c35f124a92b5f9aee7f4a84eba":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ButtonModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ButtonView","button_style":"success","description":"✅ 確認參數並準備生成報告","disabled":false,"icon":"","layout":"IPY_MODEL_f1c75b010ed8419297f0c9b76a7716ab","style":"IPY_MODEL_04de279d35c046c7a6ba6be9e70a0bd2","tabbable":null,"tooltip":"點擊此按鈕確認以上選擇，然後執行下一個 Cell 生成報告"}},"08afb5b99bcb48bb86747317b8fc1dea":{"model_module":"@jupyter-widgets/output","model_name":"OutputModel","model_module_version":"1.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/output","_model_module_version":"1.0.0","_model_name":"OutputModel","_view_count":null,"_view_module":"@jupyter-widgets/output","_view_module_version":"1.0.0","_view_name":"OutputView","layout":"IPY_MODEL_d151915867c24e7e8f1cec2ae3d89160","msg_id":"","outputs":[],"tabbable":null,"tooltip":null}},"9ce986f468944b90a6c79432d94ec5d2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"eadb43e4d8ab45fc9502c0ba22b2ec83":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"070ed18b14a14d5fa68269448e8304f9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"1632bb6c24db47389e30ebab7bc26b47":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b5a1855e9c9741f18935f842528275d4":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","description_width":"initial"}},"82f7c6ffa9754b43b58ab3bf08bc791c":{"model_module":"@jupyter-widgets/controls","model_name":"DatePickerModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DatePickerModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"DatePickerView","description":"自訂開始日期:","description_allow_html":false,"disabled":false,"layout":"IPY_MODEL_16cb30f0cd424a68a0f5543ac3686998","max":null,"min":null,"step":1,"style":"IPY_MODEL_0edec97c932e4c0aa0ee389d374be368","tabbable":null,"tooltip":null,"value":{"year":2025,"month":1,"date":6}}},"f09a668371ab4541893b1cc963958efd":{"model_module":"@jupyter-widgets/controls","model_name":"DatePickerModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DatePickerModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"DatePickerView","description":"自訂結束日期:","description_allow_html":false,"disabled":false,"layout":"IPY_MODEL_09a445dc2b3e4243918166f44dabba6c","max":null,"min":null,"step":1,"style":"IPY_MODEL_a5b17497c5e444c68f78191571f0694c","tabbable":null,"tooltip":null,"value":{"year":2025,"month":4,"date":7}}},"d3cbc19fda8e47989aeefddf411f6e6b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":"none","flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e0f1032c9f0d4a2ea24930820c0804a7":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cfc433a146ae47be9d479ed2a105796a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"56fd37f91e6c47a0830abc554c687b5c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d74fce6ef41b425b97633e7844365618":{"model_module":"@jupyter-widgets/controls","model_name":"LabelStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"LabelStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_family":null,"font_size":null,"font_style":null,"font_variant":null,"font_weight":null,"text_color":null,"text_decoration":null}},"5ebde447fa7f4ec1ba40e68f9b4d5e0c":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_cd01262a678340668c1c41c01923cd20","IPY_MODEL_277a581986b340678fe7955b977b1acf","IPY_MODEL_1b203e0d2e2d475c82b06da27b64de83","IPY_MODEL_2540247764b3413eb48daf779e389973","IPY_MODEL_892db707884c44d5a0bd93db7e98cc2d"],"layout":"IPY_MODEL_6cbe101bcde042e9bb276a191aae82a2","tabbable":null,"tooltip":null}},"1f8fa37943d7479ca8b2e184660bbb28":{"model_module":"@jupyter-widgets/controls","model_name":"VBoxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_3e50b0b52c8b4c7c8ef6bc9571a4119e","IPY_MODEL_11a89200cb0d4b52bb1513c0990b74c7","IPY_MODEL_6fec770d74c04b2da11391dcbb1072fe","IPY_MODEL_c019e2b3aa68448385329225a9d14a92","IPY_MODEL_71f70d3c7fa9442a901dbacbe2dfc663"],"layout":"IPY_MODEL_70f0b021d65541cc9a44dd8075bf0a46","tabbable":null,"tooltip":null}},"6e8f09e2ad964b52acdd46505a050c51":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5882ff55640f4983b48f880012895e3a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8f8bc3e9a6d1480a8c8adbaf063236f0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"HTMLStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":"","font_size":null,"text_color":null}},"f1c75b010ed8419297f0c9b76a7716ab":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"04de279d35c046c7a6ba6be9e70a0bd2":{"model_module":"@jupyter-widgets/controls","model_name":"ButtonStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ButtonStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","button_color":null,"font_family":null,"font_size":null,"font_style":null,"font_variant":null,"font_weight":null,"text_color":null,"text_decoration":null}},"16cb30f0cd424a68a0f5543ac3686998":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0edec97c932e4c0aa0ee389d374be368":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","description_width":""}},"09a445dc2b3e4243918166f44dabba6c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a5b17497c5e444c68f78191571f0694c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","description_width":""}},"cd01262a678340668c1c41c01923cd20":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"SOFR (%)","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_e6519b5f375a455b8a45aa1fd64d5644","style":"IPY_MODEL_749d9658f34d4df5bf9d6fdb6caf9d1e","tabbable":null,"tooltip":null,"value":false}},"277a581986b340678fe7955b977b1acf":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"Spread 10Y-2Y (BPS)","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_11e543cb18fe4b719c21a622afbcc62a","style":"IPY_MODEL_87456330e3b84f82862b416ae7da5a75","tabbable":null,"tooltip":null,"value":true}},"1b203e0d2e2d475c82b06da27b64de83":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"MOVE Level","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_590605b63bf54ece9eb8ff067d42cb94","style":"IPY_MODEL_9b165f6e6ace445285945dbf7e2eed88","tabbable":null,"tooltip":null,"value":true}},"2540247764b3413eb48daf779e389973":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"VIX Index","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_f757eaef5b1147839c24e10fff72db7f","style":"IPY_MODEL_88c0485b5a0c444ba247d6182b691fc9","tabbable":null,"tooltip":null,"value":false}},"892db707884c44d5a0bd93db7e98cc2d":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"Dealer Pos (Bil $)","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_27dbb0d59c604be4a3ad04fff1961bb5","style":"IPY_MODEL_b4d3838fdcd147f083150a4a46cc0f13","tabbable":null,"tooltip":null,"value":false}},"6cbe101bcde042e9bb276a191aae82a2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3e50b0b52c8b4c7c8ef6bc9571a4119e":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"Reserves (Tril $)","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_a73ee040474b4fd2a0b2cfac28d16fa4","style":"IPY_MODEL_7c52e870b62d4143844eadac13810a4b","tabbable":null,"tooltip":null,"value":false}},"11a89200cb0d4b52bb1513c0990b74c7":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"Stress Index (Smoothed)","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_5ec6f63633d6474fa26c03a625f5b555","style":"IPY_MODEL_507e70da12c746689e7fd61c3980c34e","tabbable":null,"tooltip":null,"value":true}},"6fec770d74c04b2da11391dcbb1072fe":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"Positions/Reserves Ratio","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_69d12c11e9f74b82be0e0ffd2c13becc","style":"IPY_MODEL_1d09b7c7e5674bbd80e80175b591a09e","tabbable":null,"tooltip":null,"value":true}},"c019e2b3aa68448385329225a9d14a92":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"Stress Idx MACD","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_8b259edc03dc495eb00de40cc9fbfab0","style":"IPY_MODEL_6e3d9a13194d4d5ba530ec9374a08407","tabbable":null,"tooltip":null,"value":false}},"71f70d3c7fa9442a901dbacbe2dfc663":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxModel","model_module_version":"2.0.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"CheckboxView","description":"LT Bond ETF (TLT)","description_allow_html":false,"disabled":false,"indent":false,"layout":"IPY_MODEL_d76f4ca7ed3a463f92f08ca738b487d9","style":"IPY_MODEL_40d49ff783a440b2a9765db9216ca3df","tabbable":null,"tooltip":null,"value":false}},"70f0b021d65541cc9a44dd8075bf0a46":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e6519b5f375a455b8a45aa1fd64d5644":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"749d9658f34d4df5bf9d6fdb6caf9d1e":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}},"11e543cb18fe4b719c21a622afbcc62a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"87456330e3b84f82862b416ae7da5a75":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}},"590605b63bf54ece9eb8ff067d42cb94":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"9b165f6e6ace445285945dbf7e2eed88":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}},"f757eaef5b1147839c24e10fff72db7f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"88c0485b5a0c444ba247d6182b691fc9":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}},"27dbb0d59c604be4a3ad04fff1961bb5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"b4d3838fdcd147f083150a4a46cc0f13":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}},"a73ee040474b4fd2a0b2cfac28d16fa4":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"7c52e870b62d4143844eadac13810a4b":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}},"5ec6f63633d6474fa26c03a625f5b555":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"507e70da12c746689e7fd61c3980c34e":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}},"69d12c11e9f74b82be0e0ffd2c13becc":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"1d09b7c7e5674bbd80e80175b591a09e":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}},"8b259edc03dc495eb00de40cc9fbfab0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"6e3d9a13194d4d5ba530ec9374a08407":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}},"d76f4ca7ed3a463f92f08ca738b487d9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":"0px 5px 0px 0px","max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":"auto"}},"40d49ff783a440b2a9765db9216ca3df":{"model_module":"@jupyter-widgets/controls","model_name":"CheckboxStyleModel","model_module_version":"2.0.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"CheckboxStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","background":null,"description_width":""}}}}},"nbformat":4,"nbformat_minor":0}