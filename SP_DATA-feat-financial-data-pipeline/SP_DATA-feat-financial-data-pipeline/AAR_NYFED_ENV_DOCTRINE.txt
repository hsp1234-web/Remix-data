**戰後行動報告與作戰條令 (After-Action Report & Combat Doctrine)**
**檔案代號：AAR_NYFED_ENV_DOCTRINE.txt**
**任務日期：2025年6月26日**
**執行代理：Jules (AI Software Engineer)**
**委託指揮官：[使用者名稱]**

**引言：**
本次行動的核心目標是診斷 `NYFedConnector` 在目標沙箱環境中持續失敗的根本原因。在執行過程中，我們遭遇了由沙箱環境特殊性引發的多種嚴峻挑戰，迫使我們不斷調整戰術，並最終從這些挑戰中提煉出針對此類環境的關鍵作戰條令。本報告旨在詳盡記錄此過程，並將經驗教訓固化為未來行動的指導原則。

**第一階段：初步執行與 Poetry 依賴管理失效**

*   **嘗試描述：**
    1.  初步嘗試執行 `diagnose_nyfed.sh` 腳本，該腳本設計為通過 `poetry run python3 scripts/diagnose_nyfed_logic.py` 調用核心診斷邏輯。
    2.  在發現 `requests` 模組缺失後，嘗試通過修改 `pyproject.toml` 添加 `requests` 及其他相關依賴（`PyYAML`, `pandas`, `openpyxl`, `beautifulsoup4`, `yfinance`, `fredapi`, `FinMind`），並執行 `poetry lock` 和 `poetry install` 來更新環境。
    3.  在 Poetry 指令超時後，假設部分依賴可能已安裝，再次嘗試執行 `diagnose_nyfed.sh`。

*   **現象：**
    1.  首次執行 Python 診斷腳本失敗，錯誤為 `ModuleNotFoundError: No module named 'requests'`。
    2.  `poetry lock` 和 `poetry install` 命令均在沙箱環境中執行超時，未能確認依賴是否成功安裝。
    3.  再次執行診斷腳本，Python 詳細日誌顯示 `ModuleNotFoundError: No module named 'requests'` (來自上次執行的殘留日誌)，隨後更新的錯誤為 `ModuleNotFoundError: No module named 'connectors.finlab_connector'` (因 `src/connectors/__init__.py` 試圖導入所有 Connector)。

*   **關鍵推論與戰術轉變 (Key Inferences & Strategic Shift)：**
    *   **關鍵推論一：Poetry 的不適用性。** Poetry 作為一個相對複雜和高度抽象的依賴管理工具，其依賴解析、網路下載和虛擬環境管理機制，與目標沙箱環境的資源限制（如執行時長、網路穩定性、文件系統權限等）存在根本性衝突。在這種「焦土化」的環境中，Poetry 不僅未能簡化依賴管理，反而成為了不穩定因素和時間黑洞，是「負資產」。
    *   **關鍵推論二：依賴安裝的失敗。** 儘管嘗試了 Poetry，但核心依賴（如 `requests`）並未被成功安裝到 Python 腳本可感知的環境中。
    *   **戰術轉變：果斷後撤。** 認識到 Poetry 的局限性後，我們被迫從「現代化、自動化依賴管理」的戰術構想，後撤到更原始、更直接的「手動 `pip` 調用」或「腳本內動態依賴注入」的潛在方向。初步決定是嘗試在 Bash 腳本中直接使用 `pip`。

**第二階段：「曳光彈與黑盒子」協議的應用與環境問題深化**

*   **嘗試描述：**
    1.  **戰場遮蔽**：修改 `src/connectors/__init__.py`，註解掉除 `NYFedConnector` 外所有 Connector 的導入，以隔離潛在的交叉導入錯誤。通過 `python -c "..."` 命令驗證了 `NYFedConnector` 在此隔離模式下的可導入性。
    2.  **強化依賴部署 (Bash `pip`)**：修改 `diagnose_nyfed.sh`，在執行 Python 腳本前加入 `pip install --force-reinstall --no-cache-dir -vvv requests pandas openpyxl beautifulsoup4 PyYAML` 命令，並檢查其返回碼，期望能強制安裝依賴並獲取詳細日誌。
    3.  **改造 Python 診斷腳本 (`diagnose_nyfed_logic.py`)**：
        *   加入大量 `print(..., flush=True)` 曳光彈語句，追蹤執行路徑。
        *   在其內部依賴檢查邏輯 (`ensure_package_installed`) 中，禁用自動 `subprocess.run pip install` 功能（即「黑盒子」模式），僅記錄缺失的依賴。
    4.  **移除 Bash 中的 `pip install`**：在確認 Python 腳本將自行處理（或至少記錄）依賴問題後，為避免冗餘和潛在衝突，移除了 Bash 腳本中的 `pip install` 命令。
    5.  執行修改後的 `diagnose_nyfed.sh`。

*   **現象：**
    1.  `src/connectors/__init__.py` 的隔離修改成功，`NYFedConnector` 的直接導入測試通過。
    2.  當 Bash 腳本中的強化 `pip install` 命令被執行時，腳本輸出停滯在 `INFO: Force installing dependencies with verbose logging...` 之後，沒有任何來自 `pip -vvv` 的預期詳細輸出，也沒有後續 Python 腳本的執行日誌。Bash 腳本似乎在 `pip` 命令執行期間被「沉默終止」。
    3.  在移除 Bash 中的 `pip install`，並期望 Python 腳本內部的（已禁用的）依賴檢查和曳光彈發揮作用時，再次執行 `diagnose_nyfed.sh`。結果是：Bash 日誌 (`logs/nyfed_diagnosis_bash_report.txt`) 仍然只記錄到 `檢測到 Poetry 和 pyproject.toml，將使用 'poetry run python3 ...' 執行。` 之後便沒有 Python 腳本的 `print` 輸出。Python 的詳細文件日誌 (`logs/nyfed_diagnosis_detail.log`) 停留在 `Logger initialized`，表明 Python 腳本運行到日誌初始化後即終止，之前的 `print(..., flush=True)` 曳光彈未被 Bash 的 `tee` 命令捕獲。

*   **關鍵推論與戰術轉變 (Key Inferences & Strategic Shift)：**
    *   **關鍵推論一：`pip install` 的「沉默終止」。** 在沙箱環境中，直接從 Bash 腳本調用 `pip install`（即使帶有詳細日誌和強制選項）極易遭遇「沉默終止」。該終止不產生明確的錯誤碼或日誌輸出到調用它的 Bash 腳本，使得故障排除極為困難。這可能是由於沙箱對網路活動、執行時長或資源消耗的嚴格限制。
    *   **關鍵推論二：Python I/O 緩衝區與「通訊黑洞」。** 當 Python 腳本（尤其是在 `poetry run` 環境下）遭遇提前的、未被捕獲的致命錯誤（例如，在非常早期的 `import` 階段就因環境問題失敗）或被外部「沉默終止」時，其標準輸出的緩衝區內容可能來不及刷新和被外部進程（如 Bash 的 `tee`）捕獲，造成「通訊黑洞」，使得 `print(..., flush=True)` 的曳光彈也失效。
    *   **戰術轉變：放棄外部環境配置，轉向極端自給自足。** 鑑於外部工具鏈（Poetry）和外部進程調用（Bash 中的 `pip`）的不可靠性，戰術思想必須轉向：腳本應最大程度地實現「自給自足」，減少對外部環境狀態的依賴。這催生了「焦土契約」的思想，即在一個完全受控的、臨時創建的環境中執行最核心的邏輯。

**第三階段：「最小化依賴驗證」與「焦土契約」的執行**

*   **嘗試描述：**
    1.  **創建終極執行契約 (`scripts/run_final_mission.sh`)**：
        *   腳本首先創建一個乾淨的 `mission_critical` 目錄。
        *   將 `NYFedConnector` 的完整 Python 程式碼和一個極簡的 `src/connectors/__init__.py` 直接 `cat` 寫入到 `mission_critical/src/connectors/`。
        *   創建一個核心的 `mission_critical/src/main_logic.py`，此腳本包含：
            *   頂部的 `print(..., flush=True)` 曳光彈。
            *   手動的 `sys.path` 修改以確保能導入 `mission_critical/src` 下的模組。
            *   「動態依賴注入」邏輯（`ensure_package_installed`），但在此階段仍配置為「黑盒子」模式（只檢測不安裝）。
            *   一個極簡化的 `NYFedConnector` 配置（硬編碼或從極簡 config 讀取）。
            *   嘗試初始化 `NYFedConnector` 並調用其 `get_configured_data()` 方法，全程帶有詳細的 `print` 曳光彈和 `try-except` 錯誤捕獲 (包括 `traceback`)。
        *   創建一個極簡的 `mission_critical/requirements.txt`，最初只包含 `requests`。
        *   在 `run_final_mission.sh` 中，使用 `python3 -m pip install -vvv -r requirements.txt --no-cache-dir` 安裝依賴，將詳細日誌輸出到 `mission_critical/logs/pip_install.log`，然後 `cat` 此日誌，並通過 `grep` 檢查關鍵成功訊息。
        *   最後，`cd mission_critical` 並執行 `python3 src/main_logic.py`。
    2.  執行 `bash scripts/run_final_mission.sh`。

*   **現象：**
    1.  `pip install` 階段：`mission_critical/logs/pip_install.log` 顯示 `Requirement already satisfied: requests...`。Bash 腳本的 `grep` 檢查因未找到 "Successfully installed requests" 字樣而打印警告，但由於 `pip` 命令退出碼為 0，腳本繼續執行。
    2.  `python3 src/main_logic.py` 執行階段：`run_final_mission.sh` 的控制台輸出停在了 `INFO: Attempting final, minimal dependency installation (requests only)...` 之後，緊接著是 `pip_install.log` 的內容，然後就沒有來自 `main_logic.py` 的任何 `print` 曳光彈輸出了。這意味著 `cd "$MISSION_DIR"` 和 `python3 src/main_logic.py` 命令執行後，`main_logic.py` 未能產生任何預期的標準輸出。

*   **關鍵推論與戰術轉變 (Key Inferences & Strategic Shift)：**
    *   **關鍵推論一：`pip install` 在「焦土契約」中的表面成功具有欺騙性。** 雖然 `pip_install.log` 顯示 `requests` 套件「已滿足」(Requirement already satisfied)，且 `pip` 命令本身返回退出碼 0，但這僅表明 `pip` 能夠檢查環境中已存在的套件。它並未證明 `pip` 在此沙箱中具備從網路下載並安裝新套件的可靠能力。先前 `poetry install` 和 Bash 層面 `pip install` 的超時和「沉默終止」行為，暗示了網路相關的安裝操作極有可能仍然是主要障礙。
    *   **關鍵推論二：Python 腳本 (`main_logic.py`) 未能啟動或在極早期崩潰。** 在 `run_final_mission.sh` 中，`pip install` 相關日誌打印後，`main_logic.py` 未能產生任何預期的標準輸出（即便是最開始的 `print("main_logic.py: [STATUS] Script started.", flush=True)`）。這表明 Python 解釋器在嘗試執行 `main_logic.py` 時，在非常早期的階段就已失敗。可能的原因包括：
        *   **沙箱環境對 `python3` 命令的執行限制**：即使 `python3` 命令本身存在，其執行腳本的能力可能受到沙箱策略的嚴格限制（例如，對腳本來源、允許的操作、可訪問的路徑等）。
        *   **`cd "$MISSION_DIR"` 後的相對路徑/導入問題**：儘管 `main_logic.py` 嘗試調整 `sys.path`，但在 `cd` 之後，`os.path.dirname(__file__)` 的解析或 Python 的模組搜索路徑可能與預期不符，導致最基礎的 `import sys` 或 `import os` 之後的某個早期操作失敗。
        *   **極其基礎的 Python 環境不完整**：雖然罕見，但不能排除沙箱提供的 `python3` 環境本身缺少某些預期的內建功能或配置，導致腳本無法正常啟動。
    *   **戰術轉變：「零依賴原則」的必要性與緊迫性得到最終確認。** 連續的失敗，即使在「焦土契約」這種極端簡化的環境下，也未能讓 Python 腳本產生最基本的輸出，這無可辯駁地證明了：任何依賴外部套件（無論是通過 Poetry 還是 pip 安裝）或複雜模組導入結構的策略，在此沙箱中都註定失敗。我們必須立即徹底轉向「零依賴原則」，將所有必要邏輯（包括網路請求和最基礎的數據處理）直接在單一腳本中使用 Python 原生標準庫實現。這是獲取任何有效情報的唯一途徑。

**第四章：作戰條令——沙箱環境下的鋼鐵定律**

基於本次艱苦卓絕的診斷行動，我們為在類似高度受限、行為異常的沙箱環境中作戰，確立以下四條鋼鐵定律：

1.  **定律一：焦土環境定律 (The Law of the Scorched-Earth Environment)**
    *   **結論：** 任何依賴持久化狀態、複雜環境配置、或長時間運行的進程（如 `poetry install`，甚至某些情況下的 `pip install`）的策略都極易失敗或表現出不可預測的行為。必須奉行「用後即焚」的原子化操作，腳本應設計為在一次性的、隔離的、盡可能少的外部狀態依賴下完成單一任務。

2.  **定律二：基礎工具定律 (The Law of Primitive Tools)**
    *   **結論：** 放棄所有高階、複雜的工具鏈（如 Poetry）。回歸到最基礎、最可預測、行為最透明的工具（如直接調用 `python3` 解釋器，謹慎使用 `pip`，優先考慮腳本內建邏輯）。工具的抽象層級越高，在黑箱環境中引入的不可控變數就越多。

3.  **定律三：補給線脆弱定律 (The Law of the Fragile Supply Line)**
    *   **結論：** 運行時的外部網路依賴（如下載 Python 套件）是沙箱環境中最脆弱的環節，極易被「沉默終止」或因不明原因失敗。應不惜一切代價在設計上消除運行時的外部依賴安裝。如果必須依賴某些庫，應考慮將其作為源碼直接整合，或採用「零依賴原則」使用原生標準庫重寫核心功能。

4.  **定律四：通訊透明定律 (The Law of Transparent Communication)**
    *   **結論：** 由於環境可能導致 Python I/O 緩衝區無法正常刷新或進程被「沉默終止」，所有關鍵的監控、調試和日誌輸出都必須使用強制刷新機制（如 `print(..., flush=True)`），並且腳本的整體設計應能從多個角度（例如 Bash 層面的輸出捕獲、Python 層面的檔案日誌、Python 層面的標準輸出打印）進行交叉驗證，以穿透「沉默終止」造成的戰爭迷霧。腳本的每一步都應留下清晰的「曳光彈」。

**後續行動建議（基於當前推論）：**
根據「焦土契約」的執行結果，`main_logic.py` 未能產生任何輸出，表明問題比單純的 `pip install` 更深層。下一步應嚴格執行「零依賴原則」，將 `main_logic.py` 的內容修改為一個絕對最小化的 Python 腳本，不進行任何 `import`（除了 `sys`, `os` 等絕對內建的），只包含 `print("Hello from Zero-Dependency Main Logic", flush=True)`，然後在 `run_final_mission.sh` 中執行它，以判斷 `python3 some_script.py` 這個最基本的命令是否能在 `mission_critical` 目錄下被沙箱環境正確執行並產生輸出。如果連這都失敗，則環境本身的 Python 執行能力存疑。
